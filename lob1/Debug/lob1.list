
lob1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002adc  08002adc  00012adc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e4  20000068  08002ba8  00020068  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000014c  08002ba8  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cbf2  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c2f  00000000  00000000  0002cc83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b53  00000000  00000000  0002e8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000518  00000000  00000000  00031408  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000870  00000000  00000000  00031920  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003439  00000000  00000000  00032190  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000227a  00000000  00000000  000355c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037843  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001134  00000000  00000000  000378c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08002ac4 	.word	0x08002ac4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08002ac4 	.word	0x08002ac4

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_InitTick+0x24>)
{
 8000916:	b510      	push	{r4, lr}
 8000918:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	fbb0 f0f3 	udiv	r0, r0, r3
 8000924:	f000 fab4 	bl	8000e90 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000928:	2200      	movs	r2, #0
 800092a:	4621      	mov	r1, r4
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f000 fa7a 	bl	8000e28 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000934:	2000      	movs	r0, #0
 8000936:	bd10      	pop	{r4, pc}
 8000938:	20000000 	.word	0x20000000

0800093c <HAL_Init>:
{
 800093c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093e:	2003      	movs	r0, #3
 8000940:	f000 fa60 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff ffe5 	bl	8000914 <HAL_InitTick>
  HAL_MspInit();
 800094a:	f001 fb6d 	bl	8002028 <HAL_MspInit>
}
 800094e:	2000      	movs	r0, #0
 8000950:	bd08      	pop	{r3, pc}
	...

08000954 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000954:	4a02      	ldr	r2, [pc, #8]	; (8000960 <HAL_IncTick+0xc>)
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200000a4 	.word	0x200000a4

08000964 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <HAL_GetTick+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200000a4 	.word	0x200000a4

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000970:	b513      	push	{r0, r1, r4, lr}
 8000972:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000974:	f7ff fff6 	bl	8000964 <HAL_GetTick>
 8000978:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800097a:	f7ff fff3 	bl	8000964 <HAL_GetTick>
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	1b00      	subs	r0, r0, r4
 8000982:	4298      	cmp	r0, r3
 8000984:	d3f9      	bcc.n	800097a <HAL_Delay+0xa>
  {
  }
}
 8000986:	b002      	add	sp, #8
 8000988:	bd10      	pop	{r4, pc}
	...

0800098c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800098c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800098e:	4604      	mov	r4, r0
 8000990:	b908      	cbnz	r0, 8000996 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000992:	2001      	movs	r0, #1
 8000994:	e092      	b.n	8000abc <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000996:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000998:	b973      	cbnz	r3, 80009b8 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 800099a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800099c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a0:	4b54      	ldr	r3, [pc, #336]	; (8000af4 <HAL_ADC_Init+0x168>)
 80009a2:	6a1a      	ldr	r2, [r3, #32]
 80009a4:	f042 0201 	orr.w	r2, r2, #1
 80009a8:	621a      	str	r2, [r3, #32]
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 80009b4:	f001 fb88 	bl	80020c8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009ba:	06db      	lsls	r3, r3, #27
 80009bc:	d4e9      	bmi.n	8000992 <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 80009be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80009c0:	4a4d      	ldr	r2, [pc, #308]	; (8000af8 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 80009c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009c6:	f023 0302 	bic.w	r3, r3, #2
 80009ca:	f043 0302 	orr.w	r3, r3, #2
 80009ce:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80009d0:	6853      	ldr	r3, [r2, #4]
 80009d2:	6861      	ldr	r1, [r4, #4]
 80009d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80009d8:	430b      	orrs	r3, r1
 80009da:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e0:	fa90 f0a0 	rbit	r0, r0
 80009e4:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80009e6:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 80009ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80009ec:	fa93 f3a3 	rbit	r3, r3
 80009f0:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80009f4:	6965      	ldr	r5, [r4, #20]
 80009f6:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80009fc:	432a      	orrs	r2, r5
 80009fe:	6a25      	ldr	r5, [r4, #32]
 8000a00:	432a      	orrs	r2, r5
 8000a02:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000a04:	fa05 f000 	lsl.w	r0, r5, r0
 8000a08:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8000a0a:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a0e:	6925      	ldr	r5, [r4, #16]
 8000a10:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000a12:	bf1c      	itt	ne
 8000a14:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8000a16:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000a18:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000a1a:	bf18      	it	ne
 8000a1c:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000a1e:	6802      	ldr	r2, [r0, #0]
 8000a20:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000a24:	d123      	bne.n	8000a6e <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000a26:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000a28:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000a2a:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000a2c:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000a2e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000a32:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000a36:	d043      	beq.n	8000ac0 <HAL_ADC_Init+0x134>
 8000a38:	2d01      	cmp	r5, #1
 8000a3a:	bf08      	it	eq
 8000a3c:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 8000a40:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a44:	2e01      	cmp	r6, #1
 8000a46:	d10d      	bne.n	8000a64 <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d13b      	bne.n	8000ac4 <HAL_ADC_Init+0x138>
 8000a4c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a50:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a54:	fab1 f681 	clz	r6, r1
 8000a58:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a5e:	3901      	subs	r1, #1
 8000a60:	40b1      	lsls	r1, r6
 8000a62:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 8000a64:	6846      	ldr	r6, [r0, #4]
 8000a66:	4925      	ldr	r1, [pc, #148]	; (8000afc <HAL_ADC_Init+0x170>)
 8000a68:	4031      	ands	r1, r6
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 8000a6e:	6881      	ldr	r1, [r0, #8]
 8000a70:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a72:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8000a76:	ea02 0201 	and.w	r2, r2, r1
 8000a7a:	ea42 0203 	orr.w	r2, r2, r3
 8000a7e:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a80:	d001      	beq.n	8000a86 <HAL_ADC_Init+0xfa>
 8000a82:	2d01      	cmp	r5, #1
 8000a84:	d127      	bne.n	8000ad6 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000a86:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8000a88:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000a8c:	fa92 f2a2 	rbit	r2, r2
 8000a90:	fab2 f182 	clz	r1, r2
 8000a94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a96:	3a01      	subs	r2, #1
 8000a98:	408a      	lsls	r2, r1
 8000a9a:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 8000a9e:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 8000aa0:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000aa2:	6881      	ldr	r1, [r0, #8]
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_ADC_Init+0x178>)
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d118      	bne.n	8000ade <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 8000aac:	2000      	movs	r0, #0
 8000aae:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8000ab0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ab2:	f023 0303 	bic.w	r3, r3, #3
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000abc:	b003      	add	sp, #12
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000ac0:	462a      	mov	r2, r5
 8000ac2:	e7bd      	b.n	8000a40 <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000ac6:	f041 0120 	orr.w	r1, r1, #32
 8000aca:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000acc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000ace:	f041 0101 	orr.w	r1, r1, #1
 8000ad2:	6521      	str	r1, [r4, #80]	; 0x50
 8000ad4:	e7c6      	b.n	8000a64 <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 8000ad6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000ad8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000adc:	e7e0      	b.n	8000aa0 <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 8000ade:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ae0:	f023 0312 	bic.w	r3, r3, #18
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6523      	str	r3, [r4, #80]	; 0x50
 8000af2:	e74e      	b.n	8000992 <HAL_ADC_Init+0x6>
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40012700 	.word	0x40012700
 8000afc:	fcfc16ff 	.word	0xfcfc16ff
 8000b00:	c0fff189 	.word	0xc0fff189
 8000b04:	bf80fffe 	.word	0xbf80fffe

08000b08 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b08:	6803      	ldr	r3, [r0, #0]
{
 8000b0a:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b0c:	689a      	ldr	r2, [r3, #8]
{
 8000b0e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b10:	0556      	lsls	r6, r2, #21
{
 8000b12:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b14:	d50b      	bpl.n	8000b2e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000b16:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b18:	05d8      	lsls	r0, r3, #23
 8000b1a:	d508      	bpl.n	8000b2e <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8000b1e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8000b26:	2300      	movs	r3, #0
 8000b28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return HAL_ERROR;
 8000b2c:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b2e:	f7ff ff19 	bl	8000964 <HAL_GetTick>
 8000b32:	4606      	mov	r6, r0
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	0792      	lsls	r2, r2, #30
 8000b3a:	d50e      	bpl.n	8000b5a <HAL_ADC_PollForConversion+0x52>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000b3c:	69a2      	ldr	r2, [r4, #24]
 8000b3e:	b912      	cbnz	r2, 8000b46 <HAL_ADC_PollForConversion+0x3e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b40:	f06f 0212 	mvn.w	r2, #18
 8000b44:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b46:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b4c:	64e2      	str	r2, [r4, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000b54:	d013      	beq.n	8000b7e <HAL_ADC_PollForConversion+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000b56:	2000      	movs	r0, #0
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000b5a:	1c69      	adds	r1, r5, #1
 8000b5c:	d0eb      	beq.n	8000b36 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b5e:	b945      	cbnz	r5, 8000b72 <HAL_ADC_PollForConversion+0x6a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return HAL_TIMEOUT;
 8000b62:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64e3      	str	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        return HAL_TIMEOUT;
 8000b70:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b72:	f7ff fef7 	bl	8000964 <HAL_GetTick>
 8000b76:	1b80      	subs	r0, r0, r6
 8000b78:	4285      	cmp	r5, r0
 8000b7a:	d2db      	bcs.n	8000b34 <HAL_ADC_PollForConversion+0x2c>
 8000b7c:	e7f0      	b.n	8000b60 <HAL_ADC_PollForConversion+0x58>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000b7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d1e8      	bne.n	8000b56 <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000b86:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8000b8a:	d002      	beq.n	8000b92 <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000b8c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	d4e1      	bmi.n	8000b56 <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b98:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b9a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000b9c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000ba0:	d1d9      	bne.n	8000b56 <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ba2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000baa:	bd70      	pop	{r4, r5, r6, pc}

08000bac <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000bac:	6803      	ldr	r3, [r0, #0]
 8000bae:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000bb4:	2300      	movs	r3, #0
{
 8000bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000bb8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bba:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	f000 80a6 	beq.w	8000d10 <HAL_ADC_ConfigChannel+0x15c>
 8000bc4:	2301      	movs	r3, #1
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000bc6:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000bc8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8000bcc:	2d06      	cmp	r5, #6
 8000bce:	6802      	ldr	r2, [r0, #0]
 8000bd0:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000bd4:	680c      	ldr	r4, [r1, #0]
 8000bd6:	d823      	bhi.n	8000c20 <HAL_ADC_ConfigChannel+0x6c>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000bd8:	442b      	add	r3, r5
 8000bda:	251f      	movs	r5, #31
 8000bdc:	6c16      	ldr	r6, [r2, #64]	; 0x40
 8000bde:	3b05      	subs	r3, #5
 8000be0:	409d      	lsls	r5, r3
 8000be2:	ea26 0505 	bic.w	r5, r6, r5
 8000be6:	fa04 f303 	lsl.w	r3, r4, r3
 8000bea:	432b      	orrs	r3, r5
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8000bee:	2c09      	cmp	r4, #9
 8000bf0:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000bf4:	688e      	ldr	r6, [r1, #8]
 8000bf6:	d849      	bhi.n	8000c8c <HAL_ADC_ConfigChannel+0xd8>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	6955      	ldr	r5, [r2, #20]
 8000bfc:	4423      	add	r3, r4
 8000bfe:	4099      	lsls	r1, r3
 8000c00:	ea25 0501 	bic.w	r5, r5, r1
 8000c04:	fa06 f303 	lsl.w	r3, r6, r3
 8000c08:	432b      	orrs	r3, r5
 8000c0a:	6153      	str	r3, [r2, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c0c:	f1a4 0310 	sub.w	r3, r4, #16
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d965      	bls.n	8000ce0 <HAL_ADC_ConfigChannel+0x12c>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c14:	2300      	movs	r3, #0
 8000c16:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000c1a:	4618      	mov	r0, r3
}
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8000c20:	2d0c      	cmp	r5, #12
 8000c22:	d80b      	bhi.n	8000c3c <HAL_ADC_ConfigChannel+0x88>
    MODIFY_REG(hadc->Instance->SQR4,
 8000c24:	442b      	add	r3, r5
 8000c26:	251f      	movs	r5, #31
 8000c28:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8000c2a:	3b23      	subs	r3, #35	; 0x23
 8000c2c:	409d      	lsls	r5, r3
 8000c2e:	ea26 0505 	bic.w	r5, r6, r5
 8000c32:	fa04 f303 	lsl.w	r3, r4, r3
 8000c36:	432b      	orrs	r3, r5
 8000c38:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c3a:	e7d8      	b.n	8000bee <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8000c3c:	2d12      	cmp	r5, #18
 8000c3e:	d80b      	bhi.n	8000c58 <HAL_ADC_ConfigChannel+0xa4>
    MODIFY_REG(hadc->Instance->SQR3,
 8000c40:	442b      	add	r3, r5
 8000c42:	251f      	movs	r5, #31
 8000c44:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8000c46:	3b41      	subs	r3, #65	; 0x41
 8000c48:	409d      	lsls	r5, r3
 8000c4a:	ea26 0505 	bic.w	r5, r6, r5
 8000c4e:	fa04 f303 	lsl.w	r3, r4, r3
 8000c52:	432b      	orrs	r3, r5
 8000c54:	6393      	str	r3, [r2, #56]	; 0x38
 8000c56:	e7ca      	b.n	8000bee <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 8000c58:	2d18      	cmp	r5, #24
 8000c5a:	d80b      	bhi.n	8000c74 <HAL_ADC_ConfigChannel+0xc0>
    MODIFY_REG(hadc->Instance->SQR2,
 8000c5c:	442b      	add	r3, r5
 8000c5e:	251f      	movs	r5, #31
 8000c60:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000c62:	3b5f      	subs	r3, #95	; 0x5f
 8000c64:	409d      	lsls	r5, r3
 8000c66:	ea26 0505 	bic.w	r5, r6, r5
 8000c6a:	fa04 f303 	lsl.w	r3, r4, r3
 8000c6e:	432b      	orrs	r3, r5
 8000c70:	6353      	str	r3, [r2, #52]	; 0x34
 8000c72:	e7bc      	b.n	8000bee <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8000c74:	442b      	add	r3, r5
 8000c76:	251f      	movs	r5, #31
 8000c78:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000c7a:	3b7d      	subs	r3, #125	; 0x7d
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	ea26 0505 	bic.w	r5, r6, r5
 8000c82:	fa04 f303 	lsl.w	r3, r4, r3
 8000c86:	432b      	orrs	r3, r5
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	e7b0      	b.n	8000bee <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8000c8c:	2c13      	cmp	r4, #19
 8000c8e:	d80c      	bhi.n	8000caa <HAL_ADC_ConfigChannel+0xf6>
    MODIFY_REG(hadc->Instance->SMPR2,
 8000c90:	4423      	add	r3, r4
 8000c92:	f1a3 051e 	sub.w	r5, r3, #30
 8000c96:	2307      	movs	r3, #7
 8000c98:	6911      	ldr	r1, [r2, #16]
 8000c9a:	40ab      	lsls	r3, r5
 8000c9c:	ea21 0103 	bic.w	r1, r1, r3
 8000ca0:	fa06 f505 	lsl.w	r5, r6, r5
 8000ca4:	430d      	orrs	r5, r1
 8000ca6:	6115      	str	r5, [r2, #16]
 8000ca8:	e7b0      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x58>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8000caa:	2c1d      	cmp	r4, #29
 8000cac:	d80c      	bhi.n	8000cc8 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 8000cae:	4423      	add	r3, r4
 8000cb0:	f1a3 013c 	sub.w	r1, r3, #60	; 0x3c
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	68d5      	ldr	r5, [r2, #12]
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	ea25 0303 	bic.w	r3, r5, r3
 8000cbe:	fa06 f101 	lsl.w	r1, r6, r1
 8000cc2:	4319      	orrs	r1, r3
 8000cc4:	60d1      	str	r1, [r2, #12]
 8000cc6:	e7a1      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x58>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8000cc8:	2507      	movs	r5, #7
 8000cca:	4423      	add	r3, r4
 8000ccc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8000cce:	3b5a      	subs	r3, #90	; 0x5a
 8000cd0:	409d      	lsls	r5, r3
 8000cd2:	ea21 0105 	bic.w	r1, r1, r5
 8000cd6:	fa06 f303 	lsl.w	r3, r6, r3
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cde:	e795      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x58>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_ADC_ConfigChannel+0x160>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	0212      	lsls	r2, r2, #8
 8000ce6:	d495      	bmi.n	8000c14 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000ce8:	685a      	ldr	r2, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000cea:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000cec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cf0:	605a      	str	r2, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000cf2:	d18f      	bne.n	8000c14 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_ADC_ConfigChannel+0x164>)
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_ADC_ConfigChannel+0x168>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8000cfe:	230a      	movs	r3, #10
 8000d00:	4353      	muls	r3, r2
            wait_loop_index--;
 8000d02:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8000d04:	9b01      	ldr	r3, [sp, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d084      	beq.n	8000c14 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	e7f8      	b.n	8000d02 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8000d10:	2002      	movs	r0, #2
 8000d12:	e783      	b.n	8000c1c <HAL_ADC_ConfigChannel+0x68>
 8000d14:	40012700 	.word	0x40012700
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	000f4240 	.word	0x000f4240

08000d20 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000d20:	2300      	movs	r3, #0
{
 8000d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000d24:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d26:	6803      	ldr	r3, [r0, #0]
{
 8000d28:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	0652      	lsls	r2, r2, #25
 8000d2e:	d502      	bpl.n	8000d36 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d30:	2000      	movs	r0, #0
}
 8000d32:	b002      	add	sp, #8
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	f042 0201 	orr.w	r2, r2, #1
 8000d3c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <ADC_Enable+0x6c>)
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <ADC_Enable+0x70>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8000d4c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000d4e:	9b01      	ldr	r3, [sp, #4]
 8000d50:	b9c3      	cbnz	r3, 8000d84 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 8000d52:	f7ff fe07 	bl	8000964 <HAL_GetTick>
 8000d56:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	681d      	ldr	r5, [r3, #0]
 8000d5c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000d60:	d1e6      	bne.n	8000d30 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8000d62:	f7ff fdff 	bl	8000964 <HAL_GetTick>
 8000d66:	1b80      	subs	r0, r0, r6
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d9f5      	bls.n	8000d58 <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8000d6e:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d78:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 8000d7a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6523      	str	r3, [r4, #80]	; 0x50
 8000d82:	e7d6      	b.n	8000d32 <ADC_Enable+0x12>
      wait_loop_index--;
 8000d84:	9b01      	ldr	r3, [sp, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	e7e0      	b.n	8000d4c <ADC_Enable+0x2c>
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	000f4240 	.word	0x000f4240

08000d94 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000d94:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8000d98:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000d9a:	2b01      	cmp	r3, #1
{
 8000d9c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000d9e:	d02e      	beq.n	8000dfe <HAL_ADC_Start+0x6a>
 8000da0:	2301      	movs	r3, #1
 8000da2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8000da6:	f7ff ffbb 	bl	8000d20 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000daa:	bb48      	cbnz	r0, 8000e00 <HAL_ADC_Start+0x6c>
    ADC_STATE_CLR_SET(hadc->State,
 8000dac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000dae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db2:	f023 0301 	bic.w	r3, r3, #1
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dc2:	bf41      	itttt	mi
 8000dc4:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 8000dc6:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000dca:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000dce:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dd0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000dd2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dd6:	bf1c      	itt	ne
 8000dd8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8000dda:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000de6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000dea:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000df2:	d105      	bne.n	8000e00 <HAL_ADC_Start+0x6c>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000dfe:	2002      	movs	r0, #2
}
 8000e00:	bd10      	pop	{r4, pc}
	...

08000e04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e06:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e12:	041b      	lsls	r3, r3, #16
 8000e14:	0c1b      	lsrs	r3, r3, #16
 8000e16:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e1e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e20:	60d3      	str	r3, [r2, #12]
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2a:	b530      	push	{r4, r5, lr}
 8000e2c:	68dc      	ldr	r4, [r3, #12]
 8000e2e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e32:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	bf28      	it	cs
 8000e3c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e44:	bf98      	it	ls
 8000e46:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	fa05 f303 	lsl.w	r3, r5, r3
 8000e4c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e50:	bf88      	it	hi
 8000e52:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4019      	ands	r1, r3
 8000e56:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	fa05 f404 	lsl.w	r4, r5, r4
 8000e5c:	3c01      	subs	r4, #1
 8000e5e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e60:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e62:	ea42 0201 	orr.w	r2, r2, r1
 8000e66:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	bfaf      	iteee	ge
 8000e6c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	4b06      	ldrlt	r3, [pc, #24]	; (8000e8c <HAL_NVIC_SetPriority+0x64>)
 8000e72:	f000 000f 	andlt.w	r0, r0, #15
 8000e76:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	bfa5      	ittet	ge
 8000e7a:	b2d2      	uxtbge	r2, r2
 8000e7c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e86:	bd30      	pop	{r4, r5, pc}
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	e000ed14 	.word	0xe000ed14

08000e90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	3801      	subs	r0, #1
 8000e92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e96:	d20a      	bcs.n	8000eae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ebe:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	bf0c      	ite	eq
 8000ec4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ec8:	f022 0204 	bicne.w	r2, r2, #4
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	4770      	bx	lr
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_SYSTICK_IRQHandler>:
{
 8000ed6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ed8:	f7ff fffc 	bl	8000ed4 <HAL_SYSTICK_Callback>
 8000edc:	bd08      	pop	{r3, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000ee0:	2300      	movs	r3, #0
{ 
 8000ee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ee6:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8001080 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eee:	4a62      	ldr	r2, [pc, #392]	; (8001078 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ef0:	fa38 f403 	lsrs.w	r4, r8, r3
 8000ef4:	d102      	bne.n	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8000ef6:	b003      	add	sp, #12
 8000ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000efc:	f04f 0e01 	mov.w	lr, #1
 8000f00:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000f04:	ea18 060e 	ands.w	r6, r8, lr
 8000f08:	f000 80a8 	beq.w	800105c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f0c:	684c      	ldr	r4, [r1, #4]
 8000f0e:	f024 0710 	bic.w	r7, r4, #16
 8000f12:	2f02      	cmp	r7, #2
 8000f14:	d116      	bne.n	8000f44 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000f16:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000f1a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f1e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000f22:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000f26:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000f2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f2e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f32:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000f36:	690d      	ldr	r5, [r1, #16]
 8000f38:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f3c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f40:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000f44:	2503      	movs	r5, #3
 8000f46:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000f4a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f4e:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000f50:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f54:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000f58:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f5c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f62:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f66:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f68:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6c:	d811      	bhi.n	8000f92 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 8000f6e:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f70:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000f74:	68cf      	ldr	r7, [r1, #12]
 8000f76:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f7a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f7e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f80:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000f82:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f86:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f8a:	409f      	lsls	r7, r3
 8000f8c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f90:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f92:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f94:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f96:	688f      	ldr	r7, [r1, #8]
 8000f98:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f9c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f9e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000fa0:	00e5      	lsls	r5, r4, #3
 8000fa2:	d55b      	bpl.n	800105c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fa4:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000fac:	f023 0703 	bic.w	r7, r3, #3
 8000fb0:	f045 0501 	orr.w	r5, r5, #1
 8000fb4:	f8c9 5020 	str.w	r5, [r9, #32]
 8000fb8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000fbc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fc0:	f005 0501 	and.w	r5, r5, #1
 8000fc4:	9501      	str	r5, [sp, #4]
 8000fc6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fca:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fd0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000fd4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000fd8:	fa0c f50e 	lsl.w	r5, ip, lr
 8000fdc:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fe0:	4d26      	ldr	r5, [pc, #152]	; (800107c <HAL_GPIO_Init+0x19c>)
 8000fe2:	42a8      	cmp	r0, r5
 8000fe4:	d03c      	beq.n	8001060 <HAL_GPIO_Init+0x180>
 8000fe6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fea:	42a8      	cmp	r0, r5
 8000fec:	d03a      	beq.n	8001064 <HAL_GPIO_Init+0x184>
 8000fee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ff2:	42a8      	cmp	r0, r5
 8000ff4:	d038      	beq.n	8001068 <HAL_GPIO_Init+0x188>
 8000ff6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d036      	beq.n	800106c <HAL_GPIO_Init+0x18c>
 8000ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001002:	42a8      	cmp	r0, r5
 8001004:	d034      	beq.n	8001070 <HAL_GPIO_Init+0x190>
 8001006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100a:	42a8      	cmp	r0, r5
 800100c:	d032      	beq.n	8001074 <HAL_GPIO_Init+0x194>
 800100e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001012:	42a8      	cmp	r0, r5
 8001014:	bf14      	ite	ne
 8001016:	2507      	movne	r5, #7
 8001018:	2506      	moveq	r5, #6
 800101a:	fa05 f50e 	lsl.w	r5, r5, lr
 800101e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001022:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001024:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8001026:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001028:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800102c:	bf0c      	ite	eq
 800102e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8001030:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8001032:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001034:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800103a:	bf0c      	ite	eq
 800103c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800103e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001040:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001042:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001044:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001048:	bf0c      	ite	eq
 800104a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800104c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800104e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001050:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001052:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001054:	bf54      	ite	pl
 8001056:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8001058:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800105a:	60d5      	str	r5, [r2, #12]
    position++;
 800105c:	3301      	adds	r3, #1
 800105e:	e747      	b.n	8000ef0 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001060:	2500      	movs	r5, #0
 8001062:	e7da      	b.n	800101a <HAL_GPIO_Init+0x13a>
 8001064:	2501      	movs	r5, #1
 8001066:	e7d8      	b.n	800101a <HAL_GPIO_Init+0x13a>
 8001068:	2502      	movs	r5, #2
 800106a:	e7d6      	b.n	800101a <HAL_GPIO_Init+0x13a>
 800106c:	2503      	movs	r5, #3
 800106e:	e7d4      	b.n	800101a <HAL_GPIO_Init+0x13a>
 8001070:	2504      	movs	r5, #4
 8001072:	e7d2      	b.n	800101a <HAL_GPIO_Init+0x13a>
 8001074:	2505      	movs	r5, #5
 8001076:	e7d0      	b.n	800101a <HAL_GPIO_Init+0x13a>
 8001078:	40010400 	.word	0x40010400
 800107c:	40020000 	.word	0x40020000
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	b10a      	cbz	r2, 800108a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001086:	6181      	str	r1, [r0, #24]
 8001088:	4770      	bx	lr
 800108a:	0409      	lsls	r1, r1, #16
 800108c:	e7fb      	b.n	8001086 <HAL_GPIO_WritePin+0x2>
	...

08001090 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8001092:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800109a:	d00c      	beq.n	80010b6 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 800109c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800109e:	491a      	ldr	r1, [pc, #104]	; (8001108 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80010a0:	680b      	ldr	r3, [r1, #0]
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80010aa:	6808      	ldr	r0, [r1, #0]
 80010ac:	f000 0001 	and.w	r0, r0, #1
 80010b0:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80010b2:	b002      	add	sp, #8
 80010b4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80010b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010b8:	4914      	ldr	r1, [pc, #80]	; (800110c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80010ba:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80010be:	d00f      	beq.n	80010e0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80010c0:	680a      	ldr	r2, [r1, #0]
 80010c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80010c6:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80010ca:	d1e7      	bne.n	800109c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80010cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80010d0:	d1e4      	bne.n	800109c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80010dc:	2201      	movs	r2, #1
 80010de:	e7de      	b.n	800109e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
 80010e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010ee:	9201      	str	r2, [sp, #4]
 80010f0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80010f2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80010f6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fa:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80010fe:	6259      	str	r1, [r3, #36]	; 0x24
 8001100:	e7e1      	b.n	80010c6 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40023c00 	.word	0x40023c00
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001110:	6803      	ldr	r3, [r0, #0]
{
 8001112:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	07d9      	lsls	r1, r3, #31
{
 8001118:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111a:	d46a      	bmi.n	80011f2 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	079a      	lsls	r2, r3, #30
 8001120:	f100 80e6 	bmi.w	80012f0 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	06de      	lsls	r6, r3, #27
 8001128:	d555      	bpl.n	80011d6 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800112a:	4dc1      	ldr	r5, [pc, #772]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 800112c:	68ab      	ldr	r3, [r5, #8]
 800112e:	f013 0f0c 	tst.w	r3, #12
 8001132:	f040 8183 	bne.w	800143c <HAL_RCC_OscConfig+0x32c>
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800113e:	6829      	ldr	r1, [r5, #0]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	2201      	movs	r2, #1
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	420b      	tst	r3, r1
 8001154:	d002      	beq.n	800115c <HAL_RCC_OscConfig+0x4c>
 8001156:	69a3      	ldr	r3, [r4, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d06e      	beq.n	800123a <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800115c:	4db4      	ldr	r5, [pc, #720]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 800115e:	6a20      	ldr	r0, [r4, #32]
 8001160:	686b      	ldr	r3, [r5, #4]
 8001162:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001166:	4298      	cmp	r0, r3
 8001168:	f240 814a 	bls.w	8001400 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116c:	f7ff ff90 	bl	8001090 <RCC_SetFlashLatencyFromMSIRange>
 8001170:	2800      	cmp	r0, #0
 8001172:	d162      	bne.n	800123a <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001174:	686b      	ldr	r3, [r5, #4]
 8001176:	6a22      	ldr	r2, [r4, #32]
 8001178:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800117c:	4313      	orrs	r3, r2
 800117e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001180:	6869      	ldr	r1, [r5, #4]
 8001182:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	fab3 f283 	clz	r2, r3
 800118e:	69e3      	ldr	r3, [r4, #28]
 8001190:	4093      	lsls	r3, r2
 8001192:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001196:	4313      	orrs	r3, r2
 8001198:	606b      	str	r3, [r5, #4]
 800119a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800119e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80011a2:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80011a6:	4ba2      	ldr	r3, [pc, #648]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 80011a8:	21f0      	movs	r1, #240	; 0xf0
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	fa91 f1a1 	rbit	r1, r1
 80011b0:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80011b4:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80011b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80011ba:	40c3      	lsrs	r3, r0
 80011bc:	1c58      	adds	r0, r3, #1
 80011be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80011c2:	40ca      	lsrs	r2, r1
 80011c4:	499b      	ldr	r1, [pc, #620]	; (8001434 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80011c6:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80011c8:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80011ca:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80011cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80011ce:	4a9a      	ldr	r2, [pc, #616]	; (8001438 <HAL_RCC_OscConfig+0x328>)
 80011d0:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80011d2:	f7ff fb9f 	bl	8000914 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	071d      	lsls	r5, r3, #28
 80011da:	f100 8191 	bmi.w	8001500 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	0758      	lsls	r0, r3, #29
 80011e2:	f100 81d3 	bmi.w	800158c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	f040 8257 	bne.w	800169c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80011ee:	2000      	movs	r0, #0
 80011f0:	e024      	b.n	800123c <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011f2:	4b8f      	ldr	r3, [pc, #572]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	f002 020c 	and.w	r2, r2, #12
 80011fa:	2a08      	cmp	r2, #8
 80011fc:	d007      	beq.n	800120e <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	f002 020c 	and.w	r2, r2, #12
 8001204:	2a0c      	cmp	r2, #12
 8001206:	d11c      	bne.n	8001242 <HAL_RCC_OscConfig+0x132>
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	03db      	lsls	r3, r3, #15
 800120c:	d519      	bpl.n	8001242 <HAL_RCC_OscConfig+0x132>
 800120e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001212:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001216:	4a86      	ldr	r2, [pc, #536]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 8001218:	6811      	ldr	r1, [r2, #0]
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	2201      	movs	r2, #1
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	420b      	tst	r3, r1
 800122e:	f43f af75 	beq.w	800111c <HAL_RCC_OscConfig+0xc>
 8001232:	6863      	ldr	r3, [r4, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f af71 	bne.w	800111c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
}
 800123c:	b003      	add	sp, #12
 800123e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	6863      	ldr	r3, [r4, #4]
 8001244:	4d7a      	ldr	r5, [pc, #488]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 8001246:	2b01      	cmp	r3, #1
 8001248:	d120      	bne.n	800128c <HAL_RCC_OscConfig+0x17c>
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001250:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001252:	f7ff fb87 	bl	8000964 <HAL_GetTick>
 8001256:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800125a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125c:	2601      	movs	r6, #1
 800125e:	4f74      	ldr	r7, [pc, #464]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 8001260:	fa95 f3a5 	rbit	r3, r5
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	fa95 f3a5 	rbit	r3, r5
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	fa06 f303 	lsl.w	r3, r6, r3
 8001276:	4213      	tst	r3, r2
 8001278:	f47f af50 	bne.w	800111c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fb72 	bl	8000964 <HAL_GetTick>
 8001280:	eba0 0008 	sub.w	r0, r0, r8
 8001284:	2864      	cmp	r0, #100	; 0x64
 8001286:	d9eb      	bls.n	8001260 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8001288:	2003      	movs	r0, #3
 800128a:	e7d7      	b.n	800123c <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	bb13      	cbnz	r3, 80012d4 <HAL_RCC_OscConfig+0x1c4>
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001298:	602b      	str	r3, [r5, #0]
 800129a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012a4:	f7ff fb5e 	bl	8000964 <HAL_GetTick>
 80012a8:	4680      	mov	r8, r0
 80012aa:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	682a      	ldr	r2, [r5, #0]
 80012b0:	fa96 f3a6 	rbit	r3, r6
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	fa07 f303 	lsl.w	r3, r7, r3
 80012c0:	4213      	tst	r3, r2
 80012c2:	f43f af2b 	beq.w	800111c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fb4d 	bl	8000964 <HAL_GetTick>
 80012ca:	eba0 0008 	sub.w	r0, r0, r8
 80012ce:	2864      	cmp	r0, #100	; 0x64
 80012d0:	d9eb      	bls.n	80012aa <HAL_RCC_OscConfig+0x19a>
 80012d2:	e7d9      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	d103      	bne.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	e7b3      	b.n	800124a <HAL_RCC_OscConfig+0x13a>
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ee:	e7af      	b.n	8001250 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	f002 020c 	and.w	r2, r2, #12
 80012f8:	2a04      	cmp	r2, #4
 80012fa:	d007      	beq.n	800130c <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	f002 020c 	and.w	r2, r2, #12
 8001302:	2a0c      	cmp	r2, #12
 8001304:	d124      	bne.n	8001350 <HAL_RCC_OscConfig+0x240>
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	03df      	lsls	r7, r3, #15
 800130a:	d421      	bmi.n	8001350 <HAL_RCC_OscConfig+0x240>
 800130c:	2302      	movs	r3, #2
 800130e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4a47      	ldr	r2, [pc, #284]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 8001314:	6810      	ldr	r0, [r2, #0]
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	2101      	movs	r1, #1
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4203      	tst	r3, r0
 800132a:	4613      	mov	r3, r2
 800132c:	d002      	beq.n	8001334 <HAL_RCC_OscConfig+0x224>
 800132e:	68e2      	ldr	r2, [r4, #12]
 8001330:	428a      	cmp	r2, r1
 8001332:	d182      	bne.n	800123a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	6858      	ldr	r0, [r3, #4]
 8001336:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800133a:	fa92 f2a2 	rbit	r2, r2
 800133e:	fab2 f182 	clz	r1, r2
 8001342:	6922      	ldr	r2, [r4, #16]
 8001344:	408a      	lsls	r2, r1
 8001346:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 800134a:	430a      	orrs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	e6e9      	b.n	8001124 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001350:	68e2      	ldr	r2, [r4, #12]
 8001352:	2501      	movs	r5, #1
 8001354:	b382      	cbz	r2, 80013b8 <HAL_RCC_OscConfig+0x2a8>
 8001356:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001362:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800136a:	f7ff fafb 	bl	8000964 <HAL_GetTick>
 800136e:	2702      	movs	r7, #2
 8001370:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	4e2f      	ldr	r6, [pc, #188]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 8001374:	fa97 f3a7 	rbit	r3, r7
 8001378:	6832      	ldr	r2, [r6, #0]
 800137a:	fa97 f3a7 	rbit	r3, r7
 800137e:	fab3 f383 	clz	r3, r3
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	fa05 f303 	lsl.w	r3, r5, r3
 800138a:	4213      	tst	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	6871      	ldr	r1, [r6, #4]
 8001390:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	fab3 f283 	clz	r2, r3
 800139c:	6923      	ldr	r3, [r4, #16]
 800139e:	4093      	lsls	r3, r2
 80013a0:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 80013a4:	4313      	orrs	r3, r2
 80013a6:	6073      	str	r3, [r6, #4]
 80013a8:	e6bc      	b.n	8001124 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fadb 	bl	8000964 <HAL_GetTick>
 80013ae:	eba0 0008 	sub.w	r0, r0, r8
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9de      	bls.n	8001374 <HAL_RCC_OscConfig+0x264>
 80013b6:	e767      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
 80013b8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013c4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013cc:	f7ff faca 	bl	8000964 <HAL_GetTick>
 80013d0:	2602      	movs	r6, #2
 80013d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d4:	4f16      	ldr	r7, [pc, #88]	; (8001430 <HAL_RCC_OscConfig+0x320>)
 80013d6:	fa96 f3a6 	rbit	r3, r6
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	fa96 f3a6 	rbit	r3, r6
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	fa05 f303 	lsl.w	r3, r5, r3
 80013ec:	4213      	tst	r3, r2
 80013ee:	f43f ae99 	beq.w	8001124 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fab7 	bl	8000964 <HAL_GetTick>
 80013f6:	eba0 0008 	sub.w	r0, r0, r8
 80013fa:	2802      	cmp	r0, #2
 80013fc:	d9eb      	bls.n	80013d6 <HAL_RCC_OscConfig+0x2c6>
 80013fe:	e743      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001400:	686b      	ldr	r3, [r5, #4]
 8001402:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001406:	4303      	orrs	r3, r0
 8001408:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140a:	6869      	ldr	r1, [r5, #4]
 800140c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	fab3 f283 	clz	r2, r3
 8001418:	69e3      	ldr	r3, [r4, #28]
 800141a:	4093      	lsls	r3, r2
 800141c:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001420:	4313      	orrs	r3, r2
 8001422:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001424:	f7ff fe34 	bl	8001090 <RCC_SetFlashLatencyFromMSIRange>
 8001428:	2800      	cmp	r0, #0
 800142a:	f43f aeb6 	beq.w	800119a <HAL_RCC_OscConfig+0x8a>
 800142e:	e704      	b.n	800123a <HAL_RCC_OscConfig+0x12a>
 8001430:	40023800 	.word	0x40023800
 8001434:	08002ae3 	.word	0x08002ae3
 8001438:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800143c:	69a2      	ldr	r2, [r4, #24]
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	2a00      	cmp	r2, #0
 8001444:	d037      	beq.n	80014b6 <HAL_RCC_OscConfig+0x3a6>
 8001446:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	2601      	movs	r6, #1
 8001450:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001454:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800145c:	f7ff fa82 	bl	8000964 <HAL_GetTick>
 8001460:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001464:	4680      	mov	r8, r0
 8001466:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800146a:	682a      	ldr	r2, [r5, #0]
 800146c:	fa97 f3a7 	rbit	r3, r7
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa06 f303 	lsl.w	r3, r6, r3
 800147c:	4213      	tst	r3, r2
 800147e:	d013      	beq.n	80014a8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	686b      	ldr	r3, [r5, #4]
 8001482:	6a22      	ldr	r2, [r4, #32]
 8001484:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001488:	4313      	orrs	r3, r2
 800148a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	6869      	ldr	r1, [r5, #4]
 800148e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	fab3 f283 	clz	r2, r3
 800149a:	69e3      	ldr	r3, [r4, #28]
 800149c:	4093      	lsls	r3, r2
 800149e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80014a2:	4313      	orrs	r3, r2
 80014a4:	606b      	str	r3, [r5, #4]
 80014a6:	e696      	b.n	80011d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a8:	f7ff fa5c 	bl	8000964 <HAL_GetTick>
 80014ac:	eba0 0008 	sub.w	r0, r0, r8
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d9d8      	bls.n	8001466 <HAL_RCC_OscConfig+0x356>
 80014b4:	e6e8      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
 80014b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014c2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014ca:	f7ff fa4b 	bl	8000964 <HAL_GetTick>
 80014ce:	f44f 7600 	mov.w	r6, #512	; 0x200
 80014d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80014d4:	2701      	movs	r7, #1
 80014d6:	fa96 f3a6 	rbit	r3, r6
 80014da:	682a      	ldr	r2, [r5, #0]
 80014dc:	fa96 f3a6 	rbit	r3, r6
 80014e0:	fab3 f383 	clz	r3, r3
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa07 f303 	lsl.w	r3, r7, r3
 80014ec:	4213      	tst	r3, r2
 80014ee:	f43f ae72 	beq.w	80011d6 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f2:	f7ff fa37 	bl	8000964 <HAL_GetTick>
 80014f6:	eba0 0008 	sub.w	r0, r0, r8
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9eb      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3c6>
 80014fe:	e6c3      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	6962      	ldr	r2, [r4, #20]
 8001502:	2501      	movs	r5, #1
 8001504:	49a9      	ldr	r1, [pc, #676]	; (80017ac <HAL_RCC_OscConfig+0x69c>)
 8001506:	b302      	cbz	r2, 800154a <HAL_RCC_OscConfig+0x43a>
 8001508:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	440b      	add	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8001516:	f7ff fa25 	bl	8000964 <HAL_GetTick>
 800151a:	2602      	movs	r6, #2
 800151c:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	4fa4      	ldr	r7, [pc, #656]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 8001520:	fa96 f3a6 	rbit	r3, r6
 8001524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001526:	fa96 f3a6 	rbit	r3, r6
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	fa05 f303 	lsl.w	r3, r5, r3
 8001536:	4213      	tst	r3, r2
 8001538:	f47f ae51 	bne.w	80011de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fa12 	bl	8000964 <HAL_GetTick>
 8001540:	eba0 0008 	sub.w	r0, r0, r8
 8001544:	2802      	cmp	r0, #2
 8001546:	d9eb      	bls.n	8001520 <HAL_RCC_OscConfig+0x410>
 8001548:	e69e      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
 800154a:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	440b      	add	r3, r1
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001558:	f7ff fa04 	bl	8000964 <HAL_GetTick>
 800155c:	2602      	movs	r6, #2
 800155e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001560:	4f93      	ldr	r7, [pc, #588]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 8001562:	fa96 f3a6 	rbit	r3, r6
 8001566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001568:	fa96 f3a6 	rbit	r3, r6
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	fa05 f303 	lsl.w	r3, r5, r3
 8001578:	4213      	tst	r3, r2
 800157a:	f43f ae30 	beq.w	80011de <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff f9f1 	bl	8000964 <HAL_GetTick>
 8001582:	eba0 0008 	sub.w	r0, r0, r8
 8001586:	2802      	cmp	r0, #2
 8001588:	d9eb      	bls.n	8001562 <HAL_RCC_OscConfig+0x452>
 800158a:	e67d      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158c:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 800158e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001590:	00d1      	lsls	r1, r2, #3
 8001592:	d434      	bmi.n	80015fe <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001594:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	4d82      	ldr	r5, [pc, #520]	; (80017b4 <HAL_RCC_OscConfig+0x6a4>)
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	05da      	lsls	r2, r3, #23
 80015ae:	d528      	bpl.n	8001602 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b0:	68a3      	ldr	r3, [r4, #8]
 80015b2:	4d7f      	ldr	r5, [pc, #508]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d134      	bne.n	8001622 <HAL_RCC_OscConfig+0x512>
 80015b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80015ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80015c0:	f7ff f9d0 	bl	8000964 <HAL_GetTick>
 80015c4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80015c8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	2701      	movs	r7, #1
 80015cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80017b0 <HAL_RCC_OscConfig+0x6a0>
 80015d0:	fa95 f3a5 	rbit	r3, r5
 80015d4:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80015d8:	fa95 f3a5 	rbit	r3, r5
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	fa07 f303 	lsl.w	r3, r7, r3
 80015e8:	4213      	tst	r3, r2
 80015ea:	d04e      	beq.n	800168a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80015ec:	2e00      	cmp	r6, #0
 80015ee:	f43f adfa 	beq.w	80011e6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4a6f      	ldr	r2, [pc, #444]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 80015f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6253      	str	r3, [r2, #36]	; 0x24
 80015fc:	e5f3      	b.n	80011e6 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2600      	movs	r6, #0
 8001600:	e7d2      	b.n	80015a8 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	682b      	ldr	r3, [r5, #0]
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800160a:	f7ff f9ab 	bl	8000964 <HAL_GetTick>
 800160e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	05db      	lsls	r3, r3, #23
 8001614:	d4cc      	bmi.n	80015b0 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff f9a5 	bl	8000964 <HAL_GetTick>
 800161a:	1bc0      	subs	r0, r0, r7
 800161c:	2864      	cmp	r0, #100	; 0x64
 800161e:	d9f7      	bls.n	8001610 <HAL_RCC_OscConfig+0x500>
 8001620:	e632      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001622:	bb23      	cbnz	r3, 800166e <HAL_RCC_OscConfig+0x55e>
 8001624:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001626:	f44f 7700 	mov.w	r7, #512	; 0x200
 800162a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800162e:	636b      	str	r3, [r5, #52]	; 0x34
 8001630:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800163a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800163c:	f7ff f992 	bl	8000964 <HAL_GetTick>
 8001640:	4681      	mov	r9, r0
 8001642:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001648:	fa97 f3a7 	rbit	r3, r7
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	fa08 f303 	lsl.w	r3, r8, r3
 8001658:	4213      	tst	r3, r2
 800165a:	d0c7      	beq.n	80015ec <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff f982 	bl	8000964 <HAL_GetTick>
 8001660:	f241 3388 	movw	r3, #5000	; 0x1388
 8001664:	eba0 0009 	sub.w	r0, r0, r9
 8001668:	4298      	cmp	r0, r3
 800166a:	d9ea      	bls.n	8001642 <HAL_RCC_OscConfig+0x532>
 800166c:	e60c      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166e:	2b05      	cmp	r3, #5
 8001670:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001672:	d103      	bne.n	800167c <HAL_RCC_OscConfig+0x56c>
 8001674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001678:	636b      	str	r3, [r5, #52]	; 0x34
 800167a:	e79d      	b.n	80015b8 <HAL_RCC_OscConfig+0x4a8>
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	636b      	str	r3, [r5, #52]	; 0x34
 8001682:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001688:	e799      	b.n	80015be <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff f96b 	bl	8000964 <HAL_GetTick>
 800168e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001692:	eba0 0009 	sub.w	r0, r0, r9
 8001696:	4298      	cmp	r0, r3
 8001698:	d99a      	bls.n	80015d0 <HAL_RCC_OscConfig+0x4c0>
 800169a:	e5f5      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	4d44      	ldr	r5, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 800169e:	68ab      	ldr	r3, [r5, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	f43f adc8 	beq.w	800123a <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016aa:	2a02      	cmp	r2, #2
 80016ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b0:	d156      	bne.n	8001760 <HAL_RCC_OscConfig+0x650>
 80016b2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80016b6:	fab3 f383 	clz	r3, r3
 80016ba:	2200      	movs	r2, #0
 80016bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016c0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016c8:	f7ff f94c 	bl	8000964 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 80016ce:	4680      	mov	r8, r0
 80016d0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d4:	2501      	movs	r5, #1
 80016d6:	fa97 f3a7 	rbit	r3, r7
 80016da:	6832      	ldr	r2, [r6, #0]
 80016dc:	fa97 f3a7 	rbit	r3, r7
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa05 f303 	lsl.w	r3, r5, r3
 80016ec:	4213      	tst	r3, r2
 80016ee:	d130      	bne.n	8001752 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	68b2      	ldr	r2, [r6, #8]
 80016f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80016f6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80016fa:	430b      	orrs	r3, r1
 80016fc:	4313      	orrs	r3, r2
 80016fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001700:	4313      	orrs	r3, r2
 8001702:	60b3      	str	r3, [r6, #8]
 8001704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001708:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001714:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 800171c:	f7ff f922 	bl	8000964 <HAL_GetTick>
 8001720:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001724:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001726:	2501      	movs	r5, #1
 8001728:	4e21      	ldr	r6, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x6a0>)
 800172a:	fa94 f3a4 	rbit	r3, r4
 800172e:	6832      	ldr	r2, [r6, #0]
 8001730:	fa94 f3a4 	rbit	r3, r4
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	fa05 f303 	lsl.w	r3, r5, r3
 8001740:	4213      	tst	r3, r2
 8001742:	f47f ad54 	bne.w	80011ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7ff f90d 	bl	8000964 <HAL_GetTick>
 800174a:	1bc0      	subs	r0, r0, r7
 800174c:	2802      	cmp	r0, #2
 800174e:	d9ec      	bls.n	800172a <HAL_RCC_OscConfig+0x61a>
 8001750:	e59a      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff f907 	bl	8000964 <HAL_GetTick>
 8001756:	eba0 0008 	sub.w	r0, r0, r8
 800175a:	2802      	cmp	r0, #2
 800175c:	d9bb      	bls.n	80016d6 <HAL_RCC_OscConfig+0x5c6>
 800175e:	e593      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
 8001760:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	2200      	movs	r2, #0
 800176a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800176e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001776:	f7ff f8f5 	bl	8000964 <HAL_GetTick>
 800177a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800177e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	2601      	movs	r6, #1
 8001782:	fa94 f3a4 	rbit	r3, r4
 8001786:	682a      	ldr	r2, [r5, #0]
 8001788:	fa94 f3a4 	rbit	r3, r4
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	fa06 f303 	lsl.w	r3, r6, r3
 8001798:	4213      	tst	r3, r2
 800179a:	f43f ad28 	beq.w	80011ee <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff f8e1 	bl	8000964 <HAL_GetTick>
 80017a2:	1bc0      	subs	r0, r0, r7
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d9ec      	bls.n	8001782 <HAL_RCC_OscConfig+0x672>
 80017a8:	e56e      	b.n	8001288 <HAL_RCC_OscConfig+0x178>
 80017aa:	bf00      	nop
 80017ac:	1091c1a0 	.word	0x1091c1a0
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80017b8:	491e      	ldr	r1, [pc, #120]	; (8001834 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80017ba:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80017bc:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	2a08      	cmp	r2, #8
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80017c6:	2a0c      	cmp	r2, #12
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x1e>
 80017ca:	2a04      	cmp	r2, #4
 80017cc:	d122      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 80017ce:	481a      	ldr	r0, [pc, #104]	; (8001838 <HAL_RCC_GetSysClockFreq+0x80>)
}
 80017d0:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80017d2:	481a      	ldr	r0, [pc, #104]	; (800183c <HAL_RCC_GetSysClockFreq+0x84>)
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80017da:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017de:	fab2 f282 	clz	r2, r2
 80017e2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80017e6:	fa20 f202 	lsr.w	r2, r0, r2
 80017ea:	4815      	ldr	r0, [pc, #84]	; (8001840 <HAL_RCC_GetSysClockFreq+0x88>)
 80017ec:	5c84      	ldrb	r4, [r0, r2]
 80017ee:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80017f2:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80017f6:	fab0 f280 	clz	r2, r0
 80017fa:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fe:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001800:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8001804:	bf4c      	ite	mi
 8001806:	4b0d      	ldrmi	r3, [pc, #52]	; (800183c <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8001808:	4b0b      	ldrpl	r3, [pc, #44]	; (8001838 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800180a:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 800180c:	4363      	muls	r3, r4
 800180e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001812:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001814:	6848      	ldr	r0, [r1, #4]
 8001816:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	fab3 f383 	clz	r3, r3
 8001822:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001826:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800182e:	4098      	lsls	r0, r3
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	00f42400 	.word	0x00f42400
 800183c:	007a1200 	.word	0x007a1200
 8001840:	08002afb 	.word	0x08002afb

08001844 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_ClockConfig+0x1ac>)
{
 8001846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800184a:	681a      	ldr	r2, [r3, #0]
{
 800184c:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800184e:	f002 0201 	and.w	r2, r2, #1
 8001852:	428a      	cmp	r2, r1
{
 8001854:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001856:	d330      	bcc.n	80018ba <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	6832      	ldr	r2, [r6, #0]
 800185a:	0794      	lsls	r4, r2, #30
 800185c:	d440      	bmi.n	80018e0 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	07d0      	lsls	r0, r2, #31
 8001860:	d446      	bmi.n	80018f0 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <HAL_RCC_ClockConfig+0x1ac>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f002 0201 	and.w	r2, r2, #1
 800186a:	4295      	cmp	r5, r2
 800186c:	f0c0 80ae 	bcc.w	80019cc <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	6832      	ldr	r2, [r6, #0]
 8001872:	0751      	lsls	r1, r2, #29
 8001874:	f100 80b3 	bmi.w	80019de <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001878:	0713      	lsls	r3, r2, #28
 800187a:	d507      	bpl.n	800188c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187c:	4a5d      	ldr	r2, [pc, #372]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 800187e:	6931      	ldr	r1, [r6, #16]
 8001880:	6893      	ldr	r3, [r2, #8]
 8001882:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001886:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800188a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800188c:	f7ff ff94 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001892:	22f0      	movs	r2, #240	; 0xf0
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	fa92 f2a2 	rbit	r2, r2
 800189a:	fab2 f282 	clz	r2, r2
 800189e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a2:	40d3      	lsrs	r3, r2
 80018a4:	4a54      	ldr	r2, [pc, #336]	; (80019f8 <HAL_RCC_ClockConfig+0x1b4>)
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	40d8      	lsrs	r0, r3
 80018aa:	4b54      	ldr	r3, [pc, #336]	; (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff f830 	bl	8000914 <HAL_InitTick>
  return HAL_OK;
 80018b4:	2000      	movs	r0, #0
}
 80018b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	2901      	cmp	r1, #1
 80018bc:	bf02      	ittt	eq
 80018be:	681a      	ldreq	r2, [r3, #0]
 80018c0:	f042 0204 	orreq.w	r2, r2, #4
 80018c4:	601a      	streq	r2, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	4299      	cmp	r1, r3
 80018d8:	d0be      	beq.n	8001858 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
 80018dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4944      	ldr	r1, [pc, #272]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 80018e2:	68b0      	ldr	r0, [r6, #8]
 80018e4:	688b      	ldr	r3, [r1, #8]
 80018e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ea:	4303      	orrs	r3, r0
 80018ec:	608b      	str	r3, [r1, #8]
 80018ee:	e7b6      	b.n	800185e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f0:	6872      	ldr	r2, [r6, #4]
 80018f2:	4940      	ldr	r1, [pc, #256]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 80018f4:	2a02      	cmp	r2, #2
 80018f6:	d10f      	bne.n	8001918 <HAL_RCC_ClockConfig+0xd4>
 80018f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001900:	6808      	ldr	r0, [r1, #0]
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	2101      	movs	r1, #1
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	4203      	tst	r3, r0
 8001916:	e013      	b.n	8001940 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001918:	2a03      	cmp	r2, #3
 800191a:	d102      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
 800191c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001920:	e7ec      	b.n	80018fc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001922:	2a01      	cmp	r2, #1
 8001924:	d129      	bne.n	800197a <HAL_RCC_ClockConfig+0x136>
 8001926:	2302      	movs	r3, #2
 8001928:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	6809      	ldr	r1, [r1, #0]
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001940:	d0cb      	beq.n	80018da <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4c2c      	ldr	r4, [pc, #176]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001948:	68a3      	ldr	r3, [r4, #8]
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	431a      	orrs	r2, r3
 8001950:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001952:	f7ff f807 	bl	8000964 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001958:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	2b02      	cmp	r3, #2
 800195c:	d110      	bne.n	8001980 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800195e:	68a3      	ldr	r3, [r4, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	f43f af7c 	beq.w	8001862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7fe fffb 	bl	8000964 <HAL_GetTick>
 800196e:	1bc0      	subs	r0, r0, r7
 8001970:	4540      	cmp	r0, r8
 8001972:	d9f4      	bls.n	800195e <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001974:	2003      	movs	r0, #3
 8001976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800197a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197e:	e7bd      	b.n	80018fc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001980:	2b03      	cmp	r3, #3
 8001982:	d10b      	bne.n	800199c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001984:	68a3      	ldr	r3, [r4, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b0c      	cmp	r3, #12
 800198c:	f43f af69 	beq.w	8001862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7fe ffe8 	bl	8000964 <HAL_GetTick>
 8001994:	1bc0      	subs	r0, r0, r7
 8001996:	4540      	cmp	r0, r8
 8001998:	d9f4      	bls.n	8001984 <HAL_RCC_ClockConfig+0x140>
 800199a:	e7eb      	b.n	8001974 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800199c:	2b01      	cmp	r3, #1
 800199e:	d110      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a0:	68a3      	ldr	r3, [r4, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	f43f af5b 	beq.w	8001862 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7fe ffda 	bl	8000964 <HAL_GetTick>
 80019b0:	1bc0      	subs	r0, r0, r7
 80019b2:	4540      	cmp	r0, r8
 80019b4:	d9f4      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x15c>
 80019b6:	e7dd      	b.n	8001974 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7fe ffd4 	bl	8000964 <HAL_GetTick>
 80019bc:	1bc0      	subs	r0, r0, r7
 80019be:	4540      	cmp	r0, r8
 80019c0:	d8d8      	bhi.n	8001974 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019c2:	68a3      	ldr	r3, [r4, #8]
 80019c4:	f013 0f0c 	tst.w	r3, #12
 80019c8:	d1f6      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x174>
 80019ca:	e74a      	b.n	8001862 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	07da      	lsls	r2, r3, #31
 80019d8:	f53f af7f 	bmi.w	80018da <HAL_RCC_ClockConfig+0x96>
 80019dc:	e748      	b.n	8001870 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019de:	4905      	ldr	r1, [pc, #20]	; (80019f4 <HAL_RCC_ClockConfig+0x1b0>)
 80019e0:	68f0      	ldr	r0, [r6, #12]
 80019e2:	688b      	ldr	r3, [r1, #8]
 80019e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019e8:	4303      	orrs	r3, r0
 80019ea:	608b      	str	r3, [r1, #8]
 80019ec:	e744      	b.n	8001878 <HAL_RCC_ClockConfig+0x34>
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08002ae3 	.word	0x08002ae3
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetHCLKFreq>:
}
 8001a00:	4b01      	ldr	r3, [pc, #4]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	fa92 f2a2 	rbit	r2, r2
 8001a18:	fab2 f282 	clz	r2, r2
 8001a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a20:	40d3      	lsrs	r3, r2
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a24:	5cd3      	ldrb	r3, [r2, r3]
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a28:	6810      	ldr	r0, [r2, #0]
}    
 8001a2a:	40d8      	lsrs	r0, r3
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08002af3 	.word	0x08002af3
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	fa92 f2a2 	rbit	r2, r2
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001a58:	6810      	ldr	r0, [r2, #0]
} 
 8001a5a:	40d8      	lsrs	r0, r3
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08002af3 	.word	0x08002af3
 8001a68:	20000000 	.word	0x20000000

08001a6c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a70:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a72:	6805      	ldr	r5, [r0, #0]
 8001a74:	68c2      	ldr	r2, [r0, #12]
 8001a76:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a78:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a82:	6883      	ldr	r3, [r0, #8]
 8001a84:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001a86:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a88:	4303      	orrs	r3, r0
 8001a8a:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001a8e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a92:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001a94:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a98:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a9e:	696b      	ldr	r3, [r5, #20]
 8001aa0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa8:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aaa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aae:	616b      	str	r3, [r5, #20]
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab2:	d17f      	bne.n	8001bb4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001ab4:	429d      	cmp	r5, r3
 8001ab6:	f04f 0419 	mov.w	r4, #25
 8001aba:	d147      	bne.n	8001b4c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001abc:	f7ff ffbe 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001ac0:	fb04 f300 	mul.w	r3, r4, r0
 8001ac4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001ac8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001acc:	007f      	lsls	r7, r7, #1
 8001ace:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ad2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ad6:	011f      	lsls	r7, r3, #4
 8001ad8:	f7ff ffb0 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001adc:	4360      	muls	r0, r4
 8001ade:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fbb0 f6f3 	udiv	r6, r0, r3
 8001ae8:	f7ff ffa8 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001aec:	4360      	muls	r0, r4
 8001aee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001afc:	fb08 6313 	mls	r3, r8, r3, r6
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	3332      	adds	r3, #50	; 0x32
 8001b04:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001b0e:	f7ff ff95 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001b12:	4360      	muls	r0, r4
 8001b14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	fbb0 faf2 	udiv	sl, r0, r2
 8001b1e:	f7ff ff8d 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b22:	4360      	muls	r0, r4
 8001b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b32:	fb08 a313 	mls	r3, r8, r3, sl
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	3332      	adds	r3, #50	; 0x32
 8001b3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b44:	4433      	add	r3, r6
 8001b46:	60ab      	str	r3, [r5, #8]
 8001b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b4c:	f7ff ff5e 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001b50:	fb04 f300 	mul.w	r3, r4, r0
 8001b54:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001b58:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b5c:	007f      	lsls	r7, r7, #1
 8001b5e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b62:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b66:	011f      	lsls	r7, r3, #4
 8001b68:	f7ff ff50 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001b6c:	4360      	muls	r0, r4
 8001b6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fbb0 f6f3 	udiv	r6, r0, r3
 8001b78:	f7ff ff48 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001b7c:	4360      	muls	r0, r4
 8001b7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b88:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b8c:	fb08 6313 	mls	r3, r8, r3, r6
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	3332      	adds	r3, #50	; 0x32
 8001b94:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001b9e:	f7ff ff35 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001ba2:	4360      	muls	r0, r4
 8001ba4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	fbb0 faf2 	udiv	sl, r0, r2
 8001bae:	f7ff ff2d 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001bb2:	e7b6      	b.n	8001b22 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001bb4:	429d      	cmp	r5, r3
 8001bb6:	f04f 0419 	mov.w	r4, #25
 8001bba:	d143      	bne.n	8001c44 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bbc:	f7ff ff3e 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001bc0:	fb04 f300 	mul.w	r3, r4, r0
 8001bc4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001bc8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001bcc:	00b6      	lsls	r6, r6, #2
 8001bce:	fbb3 f3f6 	udiv	r3, r3, r6
 8001bd2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bd6:	011e      	lsls	r6, r3, #4
 8001bd8:	f7ff ff30 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001bdc:	4360      	muls	r0, r4
 8001bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fbb0 f7f3 	udiv	r7, r0, r3
 8001be8:	f7ff ff28 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001bec:	4360      	muls	r0, r4
 8001bee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bfc:	fb08 7313 	mls	r3, r8, r3, r7
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	3332      	adds	r3, #50	; 0x32
 8001c04:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c08:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c0c:	f7ff ff16 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001c10:	4360      	muls	r0, r4
 8001c12:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	fbb0 faf2 	udiv	sl, r0, r2
 8001c1c:	f7ff ff0e 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c20:	4360      	muls	r0, r4
 8001c22:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c30:	fb08 a313 	mls	r3, r8, r3, sl
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	3332      	adds	r3, #50	; 0x32
 8001c38:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	433b      	orrs	r3, r7
 8001c42:	e77f      	b.n	8001b44 <UART_SetConfig+0xd8>
 8001c44:	f7ff fee2 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001c48:	fb04 f300 	mul.w	r3, r4, r0
 8001c4c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001c50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c54:	00b6      	lsls	r6, r6, #2
 8001c56:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c5e:	011e      	lsls	r6, r3, #4
 8001c60:	f7ff fed4 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001c64:	4360      	muls	r0, r4
 8001c66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c70:	f7ff fecc 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001c74:	4360      	muls	r0, r4
 8001c76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c80:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c84:	fb08 7313 	mls	r3, r8, r3, r7
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	3332      	adds	r3, #50	; 0x32
 8001c8c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c90:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c94:	f7ff feba 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001c98:	4360      	muls	r0, r4
 8001c9a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	fbb0 faf2 	udiv	sl, r0, r2
 8001ca4:	f7ff feb2 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8001ca8:	e7ba      	b.n	8001c20 <UART_SetConfig+0x1b4>
 8001caa:	bf00      	nop
 8001cac:	40013800 	.word	0x40013800

08001cb0 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	460e      	mov	r6, r1
 8001cb6:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8001cb8:	f7fe fe54 	bl	8000964 <HAL_GetTick>
 8001cbc:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8001cbe:	6822      	ldr	r2, [r4, #0]
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	ea36 0303 	bics.w	r3, r6, r3
 8001cc6:	d101      	bne.n	8001ccc <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8001cc8:	2000      	movs	r0, #0
}
 8001cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001ccc:	1c6b      	adds	r3, r5, #1
 8001cce:	d0f7      	beq.n	8001cc0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cd0:	b9c5      	cbnz	r5, 8001d04 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cd2:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8001cd4:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cdc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	f022 0220 	bic.w	r2, r2, #32
 8001ce4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cec:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d04:	f7fe fe2e 	bl	8000964 <HAL_GetTick>
 8001d08:	1bc0      	subs	r0, r0, r7
 8001d0a:	4285      	cmp	r5, r0
 8001d0c:	d2d7      	bcs.n	8001cbe <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001d0e:	e7e0      	b.n	8001cd2 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08001d10 <HAL_UART_Init>:
{
 8001d10:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001d12:	4604      	mov	r4, r0
 8001d14:	b330      	cbz	r0, 8001d64 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001d16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d1e:	b91b      	cbnz	r3, 8001d28 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d20:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d24:	f000 f9f0 	bl	8002108 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001d28:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001d2a:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001d2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d30:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d32:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d38:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d3a:	f7ff fe97 	bl	8001a6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d3e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d40:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d50:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d58:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001d5a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001d5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001d62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d64:	2001      	movs	r0, #1
}
 8001d66:	bd10      	pop	{r4, pc}

08001d68 <HAL_UART_Transmit>:
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001d6c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8001d70:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8001d72:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001d74:	2901      	cmp	r1, #1
{
 8001d76:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001d78:	d001      	beq.n	8001d7e <HAL_UART_Transmit+0x16>
 8001d7a:	2922      	cmp	r1, #34	; 0x22
 8001d7c:	d14d      	bne.n	8001e1a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 8001d7e:	2d00      	cmp	r5, #0
 8001d80:	d049      	beq.n	8001e16 <HAL_UART_Transmit+0xae>
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d047      	beq.n	8001e16 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001d86:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d045      	beq.n	8001e1a <HAL_UART_Transmit+0xb2>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001d98:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8001d9c:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001d9e:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001da0:	bf0c      	ite	eq
 8001da2:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001da4:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001da6:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001da8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8001dac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001dae:	b98a      	cbnz	r2, 8001dd4 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001db0:	4632      	mov	r2, r6
 8001db2:	2140      	movs	r1, #64	; 0x40
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ff7b 	bl	8001cb0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001dba:	b9c0      	cbnz	r0, 8001dee <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001dbc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001dc0:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8001dc6:	2301      	movne	r3, #1
 8001dc8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd4:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8001dd6:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8001ddc:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001dde:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001de2:	4632      	mov	r2, r6
 8001de4:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001de6:	d10d      	bne.n	8001e04 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001de8:	f7ff ff62 	bl	8001cb0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001dec:	b108      	cbz	r0, 8001df2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001dee:	2003      	movs	r0, #3
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001df2:	882b      	ldrh	r3, [r5, #0]
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001dfc:	6923      	ldr	r3, [r4, #16]
 8001dfe:	b943      	cbnz	r3, 8001e12 <HAL_UART_Transmit+0xaa>
          pData +=2;
 8001e00:	3502      	adds	r5, #2
 8001e02:	e7d3      	b.n	8001dac <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001e04:	f7ff ff54 	bl	8001cb0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	782a      	ldrb	r2, [r5, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	3501      	adds	r5, #1
 8001e14:	e7ca      	b.n	8001dac <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001e1a:	2002      	movs	r0, #2
}
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e20 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <SystemClock_Config+0x7c>)
{
 8001e22:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e24:	6813      	ldr	r3, [r2, #0]
{
 8001e26:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e28:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e30:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e32:	2302      	movs	r3, #2
 8001e34:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e36:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e40:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e42:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e44:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001e46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e4c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001e4e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001e50:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e52:	f7ff f95d 	bl	8001110 <HAL_RCC_OscConfig>
 8001e56:	b100      	cbz	r0, 8001e5a <SystemClock_Config+0x3a>
 8001e58:	e7fe      	b.n	8001e58 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e60:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e62:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e64:	4621      	mov	r1, r4
 8001e66:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e68:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e6c:	f7ff fcea 	bl	8001844 <HAL_RCC_ClockConfig>
 8001e70:	4604      	mov	r4, r0
 8001e72:	b100      	cbz	r0, 8001e76 <SystemClock_Config+0x56>
 8001e74:	e7fe      	b.n	8001e74 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e76:	f7ff fdc3 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e82:	f7ff f805 	bl	8000e90 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e86:	2004      	movs	r0, #4
 8001e88:	f7ff f818 	bl	8000ebc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	4621      	mov	r1, r4
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7fe ffc8 	bl	8000e28 <HAL_NVIC_SetPriority>
}
 8001e98:	b012      	add	sp, #72	; 0x48
 8001e9a:	bd10      	pop	{r4, pc}
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <main>:
{
 8001ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ea4:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001ea6:	f7fe fd49 	bl	800093c <HAL_Init>
  SystemClock_Config();
 8001eaa:	f7ff ffb9 	bl	8001e20 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <main+0x158>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001eb0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001eb4:	4851      	ldr	r0, [pc, #324]	; (8001ffc <main+0x15c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	f042 0204 	orr.w	r2, r2, #4
 8001eba:	61da      	str	r2, [r3, #28]
 8001ebc:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	f002 0204 	and.w	r2, r2, #4
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec8:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2501      	movs	r5, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ecc:	f042 0220 	orr.w	r2, r2, #32
 8001ed0:	61da      	str	r2, [r3, #28]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	f002 0220 	and.w	r2, r2, #32
 8001ed8:	9202      	str	r2, [sp, #8]
 8001eda:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	61da      	str	r2, [r3, #28]
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	f002 0201 	and.w	r2, r2, #1
 8001eea:	9203      	str	r2, [sp, #12]
 8001eec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	f042 0202 	orr.w	r2, r2, #2
 8001ef4:	61da      	str	r2, [r3, #28]
 8001ef6:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ef8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	9304      	str	r3, [sp, #16]
 8001f00:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f02:	f7ff f8bf 	bl	8001084 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f0c:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <main+0x160>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	a905      	add	r1, sp, #20
 8001f10:	483c      	ldr	r0, [pc, #240]	; (8002004 <main+0x164>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f12:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f7fe ffe3 	bl	8000ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f1a:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	4837      	ldr	r0, [pc, #220]	; (8001ffc <main+0x15c>)
 8001f1e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f7fe ffda 	bl	8000ee0 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8001f2c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <main+0x168>)
  huart2.Init.BaudRate = 115200;
 8001f32:	4a36      	ldr	r2, [pc, #216]	; (800200c <main+0x16c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f34:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001f36:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3a:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f40:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f46:	f7ff fee3 	bl	8001d10 <HAL_UART_Init>
 8001f4a:	b100      	cbz	r0, 8001f4e <main+0xae>
 8001f4c:	e7fe      	b.n	8001f4c <main+0xac>
  hadc.Instance = ADC1;
 8001f4e:	4c30      	ldr	r4, [pc, #192]	; (8002010 <main+0x170>)
 8001f50:	4b30      	ldr	r3, [pc, #192]	; (8002014 <main+0x174>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f52:	6060      	str	r0, [r4, #4]
  hadc.Instance = ADC1;
 8001f54:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f56:	2310      	movs	r3, #16
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f58:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f5a:	60e0      	str	r0, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f5c:	6120      	str	r0, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f5e:	6160      	str	r0, [r4, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001f60:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001f62:	61e0      	str	r0, [r4, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001f64:	6220      	str	r0, [r4, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001f66:	6260      	str	r0, [r4, #36]	; 0x24
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f68:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f6a:	63a0      	str	r0, [r4, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f6c:	63e0      	str	r0, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f6e:	4620      	mov	r0, r4
  hadc.Init.NbrOfConversion = 1;
 8001f70:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f72:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f74:	f7fe fd0a 	bl	800098c <HAL_ADC_Init>
 8001f78:	b100      	cbz	r0, 8001f7c <main+0xdc>
 8001f7a:	e7fe      	b.n	8001f7a <main+0xda>
  sConfig.Channel = ADC_CHANNEL_0;
 8001f7c:	9005      	str	r0, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001f7e:	9007      	str	r0, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f80:	a905      	add	r1, sp, #20
 8001f82:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f84:	9506      	str	r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f86:	f7fe fe15 	bl	8000bb4 <HAL_ADC_ConfigChannel>
 8001f8a:	b100      	cbz	r0, 8001f8e <main+0xee>
 8001f8c:	e7fe      	b.n	8001f8c <main+0xec>
  value = (double) (raw*3000/4096);
 8001f8e:	2600      	movs	r6, #0
 8001f90:	f20f 095c 	addw	r9, pc, #92	; 0x5c
 8001f94:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001f98:	4f1f      	ldr	r7, [pc, #124]	; (8002018 <main+0x178>)
  HAL_ADC_Start(&hadc);
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7fe fefa 	bl	8000d94 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 100);
 8001fa0:	2164      	movs	r1, #100	; 0x64
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7fe fdb0 	bl	8000b08 <HAL_ADC_PollForConversion>
  double raw = (double) HAL_ADC_GetValue(&hadc);
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7fe fdff 	bl	8000bac <HAL_ADC_GetValue>
 8001fae:	f7fe fa29 	bl	8000404 <__aeabi_ui2d>
  value = (double) (raw*3000/4096);
 8001fb2:	4642      	mov	r2, r8
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	f7fe fa9b 	bl	80004f0 <__aeabi_dmul>
 8001fba:	4632      	mov	r2, r6
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	f7fe fa97 	bl	80004f0 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4915      	ldr	r1, [pc, #84]	; (800201c <main+0x17c>)
  sprintf(msg, "%.2f\r\n", value);
 8001fc8:	4815      	ldr	r0, [pc, #84]	; (8002020 <main+0x180>)
  value = (double) (raw*3000/4096);
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(msg, "%.2f\r\n", value);
 8001fce:	4915      	ldr	r1, [pc, #84]	; (8002024 <main+0x184>)
 8001fd0:	f000 f93e 	bl	8002250 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, 20, 100);
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	2214      	movs	r2, #20
 8001fd8:	4911      	ldr	r1, [pc, #68]	; (8002020 <main+0x180>)
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <main+0x168>)
 8001fdc:	f7ff fec4 	bl	8001d68 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe4:	f7fe fcc4 	bl	8000970 <HAL_Delay>
 8001fe8:	e7d7      	b.n	8001f9a <main+0xfa>
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40a77000 	.word	0x40a77000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	10110000 	.word	0x10110000
 8002004:	40020800 	.word	0x40020800
 8002008:	200000a8 	.word	0x200000a8
 800200c:	40004400 	.word	0x40004400
 8002010:	200000e8 	.word	0x200000e8
 8002014:	40012400 	.word	0x40012400
 8002018:	3f300000 	.word	0x3f300000
 800201c:	20000140 	.word	0x20000140
 8002020:	20000084 	.word	0x20000084
 8002024:	08002adc 	.word	0x08002adc

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202c:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 800202e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002034:	625a      	str	r2, [r3, #36]	; 0x24
 8002036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002038:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800203c:	9201      	str	r2, [sp, #4]
 800203e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	6a1a      	ldr	r2, [r3, #32]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	621a      	str	r2, [r3, #32]
 8002048:	6a1a      	ldr	r2, [r3, #32]
 800204a:	f002 0201 	and.w	r2, r2, #1
 800204e:	9202      	str	r2, [sp, #8]
 8002050:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002064:	f7fe fece 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	f06f 000b 	mvn.w	r0, #11
 800206e:	4611      	mov	r1, r2
 8002070:	f7fe feda 	bl	8000e28 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	f06f 000a 	mvn.w	r0, #10
 800207a:	4611      	mov	r1, r2
 800207c:	f7fe fed4 	bl	8000e28 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	f06f 0009 	mvn.w	r0, #9
 8002086:	4611      	mov	r1, r2
 8002088:	f7fe fece 	bl	8000e28 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	f06f 0004 	mvn.w	r0, #4
 8002092:	4611      	mov	r1, r2
 8002094:	f7fe fec8 	bl	8000e28 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	f06f 0003 	mvn.w	r0, #3
 800209e:	4611      	mov	r1, r2
 80020a0:	f7fe fec2 	bl	8000e28 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f06f 0001 	mvn.w	r0, #1
 80020aa:	4611      	mov	r1, r2
 80020ac:	f7fe febc 	bl	8000e28 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
 80020b6:	4611      	mov	r1, r2
 80020b8:	f7fe feb6 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020bc:	b005      	add	sp, #20
 80020be:	f85d fb04 	ldr.w	pc, [sp], #4
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80020ca:	6802      	ldr	r2, [r0, #0]
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <HAL_ADC_MspInit+0x38>)
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d113      	bne.n	80020fa <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d2:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80020d6:	6a1a      	ldr	r2, [r3, #32]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	621a      	str	r2, [r3, #32]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	4808      	ldr	r0, [pc, #32]	; (8002104 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ec:	2303      	movs	r3, #3
 80020ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f7fe fef3 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020fa:	b007      	add	sp, #28
 80020fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002100:	40012400 	.word	0x40012400
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800210a:	6802      	ldr	r2, [r0, #0]
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_UART_MspInit+0x44>)
 800210e:	429a      	cmp	r2, r3
 8002110:	d118      	bne.n	8002144 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002112:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800211a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	480b      	ldr	r0, [pc, #44]	; (8002150 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212c:	230c      	movs	r3, #12
 800212e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213c:	2307      	movs	r3, #7
 800213e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f7fe fece 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002144:	b007      	add	sp, #28
 8002146:	f85d fb04 	ldr.w	pc, [sp], #4
 800214a:	bf00      	nop
 800214c:	40004400 	.word	0x40004400
 8002150:	40020000 	.word	0x40020000

08002154 <NMI_Handler>:
 8002154:	4770      	bx	lr

08002156 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler>

08002158 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002158:	e7fe      	b.n	8002158 <MemManage_Handler>

0800215a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800215a:	e7fe      	b.n	800215a <BusFault_Handler>

0800215c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800215c:	e7fe      	b.n	800215c <UsageFault_Handler>

0800215e <SVC_Handler>:
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002162:	4770      	bx	lr

08002164 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002164:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002166:	f7fe fbf5 	bl	8000954 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800216e:	f7fe beb2 	b.w	8000ed6 <HAL_SYSTICK_IRQHandler>
	...

08002174 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <SystemInit+0x3c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <SystemInit+0x40>)
 8002182:	400a      	ands	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800218c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002190:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002198:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80021a0:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021aa:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <SystemInit+0x44>)
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	4770      	bx	lr
 80021b0:	40023800 	.word	0x40023800
 80021b4:	88ffc00c 	.word	0x88ffc00c
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021be:	e003      	b.n	80021c8 <LoopCopyDataInit>

080021c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021c6:	3104      	adds	r1, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021c8:	480a      	ldr	r0, [pc, #40]	; (80021f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021d0:	d3f6      	bcc.n	80021c0 <CopyDataInit>
  ldr r2, =_sbss
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021d4:	e002      	b.n	80021dc <LoopFillZerobss>

080021d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021d8:	f842 3b04 	str.w	r3, [r2], #4

080021dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021e0:	d3f9      	bcc.n	80021d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021e2:	f7ff ffc7 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021e6:	f000 f80f 	bl	8002208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ea:	f7ff fe59 	bl	8001ea0 <main>
  bx lr
 80021ee:	4770      	bx	lr
  ldr r3, =_sidata
 80021f0:	08002b40 	.word	0x08002b40
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021f8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80021fc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8002200:	2000014c 	.word	0x2000014c

08002204 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC1_IRQHandler>
	...

08002208 <__libc_init_array>:
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	2500      	movs	r5, #0
 800220c:	4e0c      	ldr	r6, [pc, #48]	; (8002240 <__libc_init_array+0x38>)
 800220e:	4c0d      	ldr	r4, [pc, #52]	; (8002244 <__libc_init_array+0x3c>)
 8002210:	1ba4      	subs	r4, r4, r6
 8002212:	10a4      	asrs	r4, r4, #2
 8002214:	42a5      	cmp	r5, r4
 8002216:	d109      	bne.n	800222c <__libc_init_array+0x24>
 8002218:	f000 fc54 	bl	8002ac4 <_init>
 800221c:	2500      	movs	r5, #0
 800221e:	4e0a      	ldr	r6, [pc, #40]	; (8002248 <__libc_init_array+0x40>)
 8002220:	4c0a      	ldr	r4, [pc, #40]	; (800224c <__libc_init_array+0x44>)
 8002222:	1ba4      	subs	r4, r4, r6
 8002224:	10a4      	asrs	r4, r4, #2
 8002226:	42a5      	cmp	r5, r4
 8002228:	d105      	bne.n	8002236 <__libc_init_array+0x2e>
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002230:	4798      	blx	r3
 8002232:	3501      	adds	r5, #1
 8002234:	e7ee      	b.n	8002214 <__libc_init_array+0xc>
 8002236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800223a:	4798      	blx	r3
 800223c:	3501      	adds	r5, #1
 800223e:	e7f2      	b.n	8002226 <__libc_init_array+0x1e>
 8002240:	08002b38 	.word	0x08002b38
 8002244:	08002b38 	.word	0x08002b38
 8002248:	08002b38 	.word	0x08002b38
 800224c:	08002b3c 	.word	0x08002b3c

08002250 <siprintf>:
 8002250:	b40e      	push	{r1, r2, r3}
 8002252:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002256:	b500      	push	{lr}
 8002258:	b09c      	sub	sp, #112	; 0x70
 800225a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800225e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002262:	9104      	str	r1, [sp, #16]
 8002264:	9107      	str	r1, [sp, #28]
 8002266:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800226a:	ab1d      	add	r3, sp, #116	; 0x74
 800226c:	9002      	str	r0, [sp, #8]
 800226e:	9006      	str	r0, [sp, #24]
 8002270:	4808      	ldr	r0, [pc, #32]	; (8002294 <siprintf+0x44>)
 8002272:	f853 2b04 	ldr.w	r2, [r3], #4
 8002276:	f8ad 1016 	strh.w	r1, [sp, #22]
 800227a:	6800      	ldr	r0, [r0, #0]
 800227c:	a902      	add	r1, sp, #8
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f000 f866 	bl	8002350 <_svfiprintf_r>
 8002284:	2200      	movs	r2, #0
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	b01c      	add	sp, #112	; 0x70
 800228c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002290:	b003      	add	sp, #12
 8002292:	4770      	bx	lr
 8002294:	20000004 	.word	0x20000004

08002298 <__ssputs_r>:
 8002298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800229c:	688e      	ldr	r6, [r1, #8]
 800229e:	4682      	mov	sl, r0
 80022a0:	429e      	cmp	r6, r3
 80022a2:	460c      	mov	r4, r1
 80022a4:	4691      	mov	r9, r2
 80022a6:	4698      	mov	r8, r3
 80022a8:	d835      	bhi.n	8002316 <__ssputs_r+0x7e>
 80022aa:	898a      	ldrh	r2, [r1, #12]
 80022ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022b0:	d031      	beq.n	8002316 <__ssputs_r+0x7e>
 80022b2:	2302      	movs	r3, #2
 80022b4:	6825      	ldr	r5, [r4, #0]
 80022b6:	6909      	ldr	r1, [r1, #16]
 80022b8:	1a6f      	subs	r7, r5, r1
 80022ba:	6965      	ldr	r5, [r4, #20]
 80022bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80022c4:	f108 0301 	add.w	r3, r8, #1
 80022c8:	443b      	add	r3, r7
 80022ca:	429d      	cmp	r5, r3
 80022cc:	bf38      	it	cc
 80022ce:	461d      	movcc	r5, r3
 80022d0:	0553      	lsls	r3, r2, #21
 80022d2:	d531      	bpl.n	8002338 <__ssputs_r+0xa0>
 80022d4:	4629      	mov	r1, r5
 80022d6:	f000 fb47 	bl	8002968 <_malloc_r>
 80022da:	4606      	mov	r6, r0
 80022dc:	b950      	cbnz	r0, 80022f4 <__ssputs_r+0x5c>
 80022de:	230c      	movs	r3, #12
 80022e0:	f8ca 3000 	str.w	r3, [sl]
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ee:	81a3      	strh	r3, [r4, #12]
 80022f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022f4:	463a      	mov	r2, r7
 80022f6:	6921      	ldr	r1, [r4, #16]
 80022f8:	f000 fac4 	bl	8002884 <memcpy>
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002306:	81a3      	strh	r3, [r4, #12]
 8002308:	6126      	str	r6, [r4, #16]
 800230a:	443e      	add	r6, r7
 800230c:	6026      	str	r6, [r4, #0]
 800230e:	4646      	mov	r6, r8
 8002310:	6165      	str	r5, [r4, #20]
 8002312:	1bed      	subs	r5, r5, r7
 8002314:	60a5      	str	r5, [r4, #8]
 8002316:	4546      	cmp	r6, r8
 8002318:	bf28      	it	cs
 800231a:	4646      	movcs	r6, r8
 800231c:	4649      	mov	r1, r9
 800231e:	4632      	mov	r2, r6
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	f000 faba 	bl	800289a <memmove>
 8002326:	68a3      	ldr	r3, [r4, #8]
 8002328:	2000      	movs	r0, #0
 800232a:	1b9b      	subs	r3, r3, r6
 800232c:	60a3      	str	r3, [r4, #8]
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	441e      	add	r6, r3
 8002332:	6026      	str	r6, [r4, #0]
 8002334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002338:	462a      	mov	r2, r5
 800233a:	f000 fb73 	bl	8002a24 <_realloc_r>
 800233e:	4606      	mov	r6, r0
 8002340:	2800      	cmp	r0, #0
 8002342:	d1e1      	bne.n	8002308 <__ssputs_r+0x70>
 8002344:	6921      	ldr	r1, [r4, #16]
 8002346:	4650      	mov	r0, sl
 8002348:	f000 fac2 	bl	80028d0 <_free_r>
 800234c:	e7c7      	b.n	80022de <__ssputs_r+0x46>
	...

08002350 <_svfiprintf_r>:
 8002350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002354:	b09d      	sub	sp, #116	; 0x74
 8002356:	9303      	str	r3, [sp, #12]
 8002358:	898b      	ldrh	r3, [r1, #12]
 800235a:	4680      	mov	r8, r0
 800235c:	061c      	lsls	r4, r3, #24
 800235e:	460d      	mov	r5, r1
 8002360:	4616      	mov	r6, r2
 8002362:	d50f      	bpl.n	8002384 <_svfiprintf_r+0x34>
 8002364:	690b      	ldr	r3, [r1, #16]
 8002366:	b96b      	cbnz	r3, 8002384 <_svfiprintf_r+0x34>
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	f000 fafd 	bl	8002968 <_malloc_r>
 800236e:	6028      	str	r0, [r5, #0]
 8002370:	6128      	str	r0, [r5, #16]
 8002372:	b928      	cbnz	r0, 8002380 <_svfiprintf_r+0x30>
 8002374:	230c      	movs	r3, #12
 8002376:	f8c8 3000 	str.w	r3, [r8]
 800237a:	f04f 30ff 	mov.w	r0, #4294967295
 800237e:	e0c4      	b.n	800250a <_svfiprintf_r+0x1ba>
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	616b      	str	r3, [r5, #20]
 8002384:	2300      	movs	r3, #0
 8002386:	9309      	str	r3, [sp, #36]	; 0x24
 8002388:	2320      	movs	r3, #32
 800238a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800238e:	2330      	movs	r3, #48	; 0x30
 8002390:	f04f 0b01 	mov.w	fp, #1
 8002394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002398:	4637      	mov	r7, r6
 800239a:	463c      	mov	r4, r7
 800239c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d13c      	bne.n	800241e <_svfiprintf_r+0xce>
 80023a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80023a8:	d00b      	beq.n	80023c2 <_svfiprintf_r+0x72>
 80023aa:	4653      	mov	r3, sl
 80023ac:	4632      	mov	r2, r6
 80023ae:	4629      	mov	r1, r5
 80023b0:	4640      	mov	r0, r8
 80023b2:	f7ff ff71 	bl	8002298 <__ssputs_r>
 80023b6:	3001      	adds	r0, #1
 80023b8:	f000 80a2 	beq.w	8002500 <_svfiprintf_r+0x1b0>
 80023bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023be:	4453      	add	r3, sl
 80023c0:	9309      	str	r3, [sp, #36]	; 0x24
 80023c2:	783b      	ldrb	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 809b 	beq.w	8002500 <_svfiprintf_r+0x1b0>
 80023ca:	2300      	movs	r3, #0
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	9304      	str	r3, [sp, #16]
 80023d2:	9307      	str	r3, [sp, #28]
 80023d4:	9205      	str	r2, [sp, #20]
 80023d6:	9306      	str	r3, [sp, #24]
 80023d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023dc:	931a      	str	r3, [sp, #104]	; 0x68
 80023de:	2205      	movs	r2, #5
 80023e0:	7821      	ldrb	r1, [r4, #0]
 80023e2:	4850      	ldr	r0, [pc, #320]	; (8002524 <_svfiprintf_r+0x1d4>)
 80023e4:	f000 fa40 	bl	8002868 <memchr>
 80023e8:	1c67      	adds	r7, r4, #1
 80023ea:	9b04      	ldr	r3, [sp, #16]
 80023ec:	b9d8      	cbnz	r0, 8002426 <_svfiprintf_r+0xd6>
 80023ee:	06d9      	lsls	r1, r3, #27
 80023f0:	bf44      	itt	mi
 80023f2:	2220      	movmi	r2, #32
 80023f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023f8:	071a      	lsls	r2, r3, #28
 80023fa:	bf44      	itt	mi
 80023fc:	222b      	movmi	r2, #43	; 0x2b
 80023fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002402:	7822      	ldrb	r2, [r4, #0]
 8002404:	2a2a      	cmp	r2, #42	; 0x2a
 8002406:	d016      	beq.n	8002436 <_svfiprintf_r+0xe6>
 8002408:	2100      	movs	r1, #0
 800240a:	200a      	movs	r0, #10
 800240c:	9a07      	ldr	r2, [sp, #28]
 800240e:	4627      	mov	r7, r4
 8002410:	783b      	ldrb	r3, [r7, #0]
 8002412:	3401      	adds	r4, #1
 8002414:	3b30      	subs	r3, #48	; 0x30
 8002416:	2b09      	cmp	r3, #9
 8002418:	d950      	bls.n	80024bc <_svfiprintf_r+0x16c>
 800241a:	b1c9      	cbz	r1, 8002450 <_svfiprintf_r+0x100>
 800241c:	e011      	b.n	8002442 <_svfiprintf_r+0xf2>
 800241e:	2b25      	cmp	r3, #37	; 0x25
 8002420:	d0c0      	beq.n	80023a4 <_svfiprintf_r+0x54>
 8002422:	4627      	mov	r7, r4
 8002424:	e7b9      	b.n	800239a <_svfiprintf_r+0x4a>
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <_svfiprintf_r+0x1d4>)
 8002428:	463c      	mov	r4, r7
 800242a:	1a80      	subs	r0, r0, r2
 800242c:	fa0b f000 	lsl.w	r0, fp, r0
 8002430:	4318      	orrs	r0, r3
 8002432:	9004      	str	r0, [sp, #16]
 8002434:	e7d3      	b.n	80023de <_svfiprintf_r+0x8e>
 8002436:	9a03      	ldr	r2, [sp, #12]
 8002438:	1d11      	adds	r1, r2, #4
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	9103      	str	r1, [sp, #12]
 800243e:	2a00      	cmp	r2, #0
 8002440:	db01      	blt.n	8002446 <_svfiprintf_r+0xf6>
 8002442:	9207      	str	r2, [sp, #28]
 8002444:	e004      	b.n	8002450 <_svfiprintf_r+0x100>
 8002446:	4252      	negs	r2, r2
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	9207      	str	r2, [sp, #28]
 800244e:	9304      	str	r3, [sp, #16]
 8002450:	783b      	ldrb	r3, [r7, #0]
 8002452:	2b2e      	cmp	r3, #46	; 0x2e
 8002454:	d10d      	bne.n	8002472 <_svfiprintf_r+0x122>
 8002456:	787b      	ldrb	r3, [r7, #1]
 8002458:	1c79      	adds	r1, r7, #1
 800245a:	2b2a      	cmp	r3, #42	; 0x2a
 800245c:	d132      	bne.n	80024c4 <_svfiprintf_r+0x174>
 800245e:	9b03      	ldr	r3, [sp, #12]
 8002460:	3702      	adds	r7, #2
 8002462:	1d1a      	adds	r2, r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	9203      	str	r2, [sp, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	bfb8      	it	lt
 800246c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002470:	9305      	str	r3, [sp, #20]
 8002472:	4c2d      	ldr	r4, [pc, #180]	; (8002528 <_svfiprintf_r+0x1d8>)
 8002474:	2203      	movs	r2, #3
 8002476:	7839      	ldrb	r1, [r7, #0]
 8002478:	4620      	mov	r0, r4
 800247a:	f000 f9f5 	bl	8002868 <memchr>
 800247e:	b138      	cbz	r0, 8002490 <_svfiprintf_r+0x140>
 8002480:	2340      	movs	r3, #64	; 0x40
 8002482:	1b00      	subs	r0, r0, r4
 8002484:	fa03 f000 	lsl.w	r0, r3, r0
 8002488:	9b04      	ldr	r3, [sp, #16]
 800248a:	3701      	adds	r7, #1
 800248c:	4303      	orrs	r3, r0
 800248e:	9304      	str	r3, [sp, #16]
 8002490:	7839      	ldrb	r1, [r7, #0]
 8002492:	2206      	movs	r2, #6
 8002494:	4825      	ldr	r0, [pc, #148]	; (800252c <_svfiprintf_r+0x1dc>)
 8002496:	1c7e      	adds	r6, r7, #1
 8002498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800249c:	f000 f9e4 	bl	8002868 <memchr>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d035      	beq.n	8002510 <_svfiprintf_r+0x1c0>
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <_svfiprintf_r+0x1e0>)
 80024a6:	b9fb      	cbnz	r3, 80024e8 <_svfiprintf_r+0x198>
 80024a8:	9b03      	ldr	r3, [sp, #12]
 80024aa:	3307      	adds	r3, #7
 80024ac:	f023 0307 	bic.w	r3, r3, #7
 80024b0:	3308      	adds	r3, #8
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024b6:	444b      	add	r3, r9
 80024b8:	9309      	str	r3, [sp, #36]	; 0x24
 80024ba:	e76d      	b.n	8002398 <_svfiprintf_r+0x48>
 80024bc:	fb00 3202 	mla	r2, r0, r2, r3
 80024c0:	2101      	movs	r1, #1
 80024c2:	e7a4      	b.n	800240e <_svfiprintf_r+0xbe>
 80024c4:	2300      	movs	r3, #0
 80024c6:	240a      	movs	r4, #10
 80024c8:	4618      	mov	r0, r3
 80024ca:	9305      	str	r3, [sp, #20]
 80024cc:	460f      	mov	r7, r1
 80024ce:	783a      	ldrb	r2, [r7, #0]
 80024d0:	3101      	adds	r1, #1
 80024d2:	3a30      	subs	r2, #48	; 0x30
 80024d4:	2a09      	cmp	r2, #9
 80024d6:	d903      	bls.n	80024e0 <_svfiprintf_r+0x190>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ca      	beq.n	8002472 <_svfiprintf_r+0x122>
 80024dc:	9005      	str	r0, [sp, #20]
 80024de:	e7c8      	b.n	8002472 <_svfiprintf_r+0x122>
 80024e0:	fb04 2000 	mla	r0, r4, r0, r2
 80024e4:	2301      	movs	r3, #1
 80024e6:	e7f1      	b.n	80024cc <_svfiprintf_r+0x17c>
 80024e8:	ab03      	add	r3, sp, #12
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	462a      	mov	r2, r5
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_svfiprintf_r+0x1e4>)
 80024f0:	a904      	add	r1, sp, #16
 80024f2:	4640      	mov	r0, r8
 80024f4:	f3af 8000 	nop.w
 80024f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80024fc:	4681      	mov	r9, r0
 80024fe:	d1d9      	bne.n	80024b4 <_svfiprintf_r+0x164>
 8002500:	89ab      	ldrh	r3, [r5, #12]
 8002502:	065b      	lsls	r3, r3, #25
 8002504:	f53f af39 	bmi.w	800237a <_svfiprintf_r+0x2a>
 8002508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800250a:	b01d      	add	sp, #116	; 0x74
 800250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002510:	ab03      	add	r3, sp, #12
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	462a      	mov	r2, r5
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <_svfiprintf_r+0x1e4>)
 8002518:	a904      	add	r1, sp, #16
 800251a:	4640      	mov	r0, r8
 800251c:	f000 f884 	bl	8002628 <_printf_i>
 8002520:	e7ea      	b.n	80024f8 <_svfiprintf_r+0x1a8>
 8002522:	bf00      	nop
 8002524:	08002b04 	.word	0x08002b04
 8002528:	08002b0a 	.word	0x08002b0a
 800252c:	08002b0e 	.word	0x08002b0e
 8002530:	00000000 	.word	0x00000000
 8002534:	08002299 	.word	0x08002299

08002538 <_printf_common>:
 8002538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800253c:	4691      	mov	r9, r2
 800253e:	461f      	mov	r7, r3
 8002540:	688a      	ldr	r2, [r1, #8]
 8002542:	690b      	ldr	r3, [r1, #16]
 8002544:	4606      	mov	r6, r0
 8002546:	4293      	cmp	r3, r2
 8002548:	bfb8      	it	lt
 800254a:	4613      	movlt	r3, r2
 800254c:	f8c9 3000 	str.w	r3, [r9]
 8002550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002554:	460c      	mov	r4, r1
 8002556:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800255a:	b112      	cbz	r2, 8002562 <_printf_common+0x2a>
 800255c:	3301      	adds	r3, #1
 800255e:	f8c9 3000 	str.w	r3, [r9]
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	0699      	lsls	r1, r3, #26
 8002566:	bf42      	ittt	mi
 8002568:	f8d9 3000 	ldrmi.w	r3, [r9]
 800256c:	3302      	addmi	r3, #2
 800256e:	f8c9 3000 	strmi.w	r3, [r9]
 8002572:	6825      	ldr	r5, [r4, #0]
 8002574:	f015 0506 	ands.w	r5, r5, #6
 8002578:	d107      	bne.n	800258a <_printf_common+0x52>
 800257a:	f104 0a19 	add.w	sl, r4, #25
 800257e:	68e3      	ldr	r3, [r4, #12]
 8002580:	f8d9 2000 	ldr.w	r2, [r9]
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	429d      	cmp	r5, r3
 8002588:	db2a      	blt.n	80025e0 <_printf_common+0xa8>
 800258a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	3300      	adds	r3, #0
 8002592:	bf18      	it	ne
 8002594:	2301      	movne	r3, #1
 8002596:	0692      	lsls	r2, r2, #26
 8002598:	d42f      	bmi.n	80025fa <_printf_common+0xc2>
 800259a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800259e:	4639      	mov	r1, r7
 80025a0:	4630      	mov	r0, r6
 80025a2:	47c0      	blx	r8
 80025a4:	3001      	adds	r0, #1
 80025a6:	d022      	beq.n	80025ee <_printf_common+0xb6>
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	68e5      	ldr	r5, [r4, #12]
 80025ac:	f003 0306 	and.w	r3, r3, #6
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	bf18      	it	ne
 80025b4:	2500      	movne	r5, #0
 80025b6:	f8d9 2000 	ldr.w	r2, [r9]
 80025ba:	f04f 0900 	mov.w	r9, #0
 80025be:	bf08      	it	eq
 80025c0:	1aad      	subeq	r5, r5, r2
 80025c2:	68a3      	ldr	r3, [r4, #8]
 80025c4:	6922      	ldr	r2, [r4, #16]
 80025c6:	bf08      	it	eq
 80025c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025cc:	4293      	cmp	r3, r2
 80025ce:	bfc4      	itt	gt
 80025d0:	1a9b      	subgt	r3, r3, r2
 80025d2:	18ed      	addgt	r5, r5, r3
 80025d4:	341a      	adds	r4, #26
 80025d6:	454d      	cmp	r5, r9
 80025d8:	d11b      	bne.n	8002612 <_printf_common+0xda>
 80025da:	2000      	movs	r0, #0
 80025dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e0:	2301      	movs	r3, #1
 80025e2:	4652      	mov	r2, sl
 80025e4:	4639      	mov	r1, r7
 80025e6:	4630      	mov	r0, r6
 80025e8:	47c0      	blx	r8
 80025ea:	3001      	adds	r0, #1
 80025ec:	d103      	bne.n	80025f6 <_printf_common+0xbe>
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295
 80025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f6:	3501      	adds	r5, #1
 80025f8:	e7c1      	b.n	800257e <_printf_common+0x46>
 80025fa:	2030      	movs	r0, #48	; 0x30
 80025fc:	18e1      	adds	r1, r4, r3
 80025fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002608:	4422      	add	r2, r4
 800260a:	3302      	adds	r3, #2
 800260c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002610:	e7c3      	b.n	800259a <_printf_common+0x62>
 8002612:	2301      	movs	r3, #1
 8002614:	4622      	mov	r2, r4
 8002616:	4639      	mov	r1, r7
 8002618:	4630      	mov	r0, r6
 800261a:	47c0      	blx	r8
 800261c:	3001      	adds	r0, #1
 800261e:	d0e6      	beq.n	80025ee <_printf_common+0xb6>
 8002620:	f109 0901 	add.w	r9, r9, #1
 8002624:	e7d7      	b.n	80025d6 <_printf_common+0x9e>
	...

08002628 <_printf_i>:
 8002628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800262c:	4617      	mov	r7, r2
 800262e:	7e0a      	ldrb	r2, [r1, #24]
 8002630:	b085      	sub	sp, #20
 8002632:	2a6e      	cmp	r2, #110	; 0x6e
 8002634:	4698      	mov	r8, r3
 8002636:	4606      	mov	r6, r0
 8002638:	460c      	mov	r4, r1
 800263a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800263c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002640:	f000 80bc 	beq.w	80027bc <_printf_i+0x194>
 8002644:	d81a      	bhi.n	800267c <_printf_i+0x54>
 8002646:	2a63      	cmp	r2, #99	; 0x63
 8002648:	d02e      	beq.n	80026a8 <_printf_i+0x80>
 800264a:	d80a      	bhi.n	8002662 <_printf_i+0x3a>
 800264c:	2a00      	cmp	r2, #0
 800264e:	f000 80c8 	beq.w	80027e2 <_printf_i+0x1ba>
 8002652:	2a58      	cmp	r2, #88	; 0x58
 8002654:	f000 808a 	beq.w	800276c <_printf_i+0x144>
 8002658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800265c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002660:	e02a      	b.n	80026b8 <_printf_i+0x90>
 8002662:	2a64      	cmp	r2, #100	; 0x64
 8002664:	d001      	beq.n	800266a <_printf_i+0x42>
 8002666:	2a69      	cmp	r2, #105	; 0x69
 8002668:	d1f6      	bne.n	8002658 <_printf_i+0x30>
 800266a:	6821      	ldr	r1, [r4, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002672:	d023      	beq.n	80026bc <_printf_i+0x94>
 8002674:	1d11      	adds	r1, r2, #4
 8002676:	6019      	str	r1, [r3, #0]
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	e027      	b.n	80026cc <_printf_i+0xa4>
 800267c:	2a73      	cmp	r2, #115	; 0x73
 800267e:	f000 80b4 	beq.w	80027ea <_printf_i+0x1c2>
 8002682:	d808      	bhi.n	8002696 <_printf_i+0x6e>
 8002684:	2a6f      	cmp	r2, #111	; 0x6f
 8002686:	d02a      	beq.n	80026de <_printf_i+0xb6>
 8002688:	2a70      	cmp	r2, #112	; 0x70
 800268a:	d1e5      	bne.n	8002658 <_printf_i+0x30>
 800268c:	680a      	ldr	r2, [r1, #0]
 800268e:	f042 0220 	orr.w	r2, r2, #32
 8002692:	600a      	str	r2, [r1, #0]
 8002694:	e003      	b.n	800269e <_printf_i+0x76>
 8002696:	2a75      	cmp	r2, #117	; 0x75
 8002698:	d021      	beq.n	80026de <_printf_i+0xb6>
 800269a:	2a78      	cmp	r2, #120	; 0x78
 800269c:	d1dc      	bne.n	8002658 <_printf_i+0x30>
 800269e:	2278      	movs	r2, #120	; 0x78
 80026a0:	496f      	ldr	r1, [pc, #444]	; (8002860 <_printf_i+0x238>)
 80026a2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80026a6:	e064      	b.n	8002772 <_printf_i+0x14a>
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80026ae:	1d11      	adds	r1, r2, #4
 80026b0:	6019      	str	r1, [r3, #0]
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0a3      	b.n	8002804 <_printf_i+0x1dc>
 80026bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80026c0:	f102 0104 	add.w	r1, r2, #4
 80026c4:	6019      	str	r1, [r3, #0]
 80026c6:	d0d7      	beq.n	8002678 <_printf_i+0x50>
 80026c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da03      	bge.n	80026d8 <_printf_i+0xb0>
 80026d0:	222d      	movs	r2, #45	; 0x2d
 80026d2:	425b      	negs	r3, r3
 80026d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80026d8:	4962      	ldr	r1, [pc, #392]	; (8002864 <_printf_i+0x23c>)
 80026da:	220a      	movs	r2, #10
 80026dc:	e017      	b.n	800270e <_printf_i+0xe6>
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80026e6:	d003      	beq.n	80026f0 <_printf_i+0xc8>
 80026e8:	1d08      	adds	r0, r1, #4
 80026ea:	6018      	str	r0, [r3, #0]
 80026ec:	680b      	ldr	r3, [r1, #0]
 80026ee:	e006      	b.n	80026fe <_printf_i+0xd6>
 80026f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026f4:	f101 0004 	add.w	r0, r1, #4
 80026f8:	6018      	str	r0, [r3, #0]
 80026fa:	d0f7      	beq.n	80026ec <_printf_i+0xc4>
 80026fc:	880b      	ldrh	r3, [r1, #0]
 80026fe:	2a6f      	cmp	r2, #111	; 0x6f
 8002700:	bf14      	ite	ne
 8002702:	220a      	movne	r2, #10
 8002704:	2208      	moveq	r2, #8
 8002706:	4957      	ldr	r1, [pc, #348]	; (8002864 <_printf_i+0x23c>)
 8002708:	2000      	movs	r0, #0
 800270a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800270e:	6865      	ldr	r5, [r4, #4]
 8002710:	2d00      	cmp	r5, #0
 8002712:	60a5      	str	r5, [r4, #8]
 8002714:	f2c0 809c 	blt.w	8002850 <_printf_i+0x228>
 8002718:	6820      	ldr	r0, [r4, #0]
 800271a:	f020 0004 	bic.w	r0, r0, #4
 800271e:	6020      	str	r0, [r4, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d13f      	bne.n	80027a4 <_printf_i+0x17c>
 8002724:	2d00      	cmp	r5, #0
 8002726:	f040 8095 	bne.w	8002854 <_printf_i+0x22c>
 800272a:	4675      	mov	r5, lr
 800272c:	2a08      	cmp	r2, #8
 800272e:	d10b      	bne.n	8002748 <_printf_i+0x120>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	07da      	lsls	r2, r3, #31
 8002734:	d508      	bpl.n	8002748 <_printf_i+0x120>
 8002736:	6923      	ldr	r3, [r4, #16]
 8002738:	6862      	ldr	r2, [r4, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	bfde      	ittt	le
 800273e:	2330      	movle	r3, #48	; 0x30
 8002740:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002744:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002748:	ebae 0305 	sub.w	r3, lr, r5
 800274c:	6123      	str	r3, [r4, #16]
 800274e:	f8cd 8000 	str.w	r8, [sp]
 8002752:	463b      	mov	r3, r7
 8002754:	aa03      	add	r2, sp, #12
 8002756:	4621      	mov	r1, r4
 8002758:	4630      	mov	r0, r6
 800275a:	f7ff feed 	bl	8002538 <_printf_common>
 800275e:	3001      	adds	r0, #1
 8002760:	d155      	bne.n	800280e <_printf_i+0x1e6>
 8002762:	f04f 30ff 	mov.w	r0, #4294967295
 8002766:	b005      	add	sp, #20
 8002768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800276c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002770:	493c      	ldr	r1, [pc, #240]	; (8002864 <_printf_i+0x23c>)
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	f012 0f80 	tst.w	r2, #128	; 0x80
 800277a:	f100 0504 	add.w	r5, r0, #4
 800277e:	601d      	str	r5, [r3, #0]
 8002780:	d001      	beq.n	8002786 <_printf_i+0x15e>
 8002782:	6803      	ldr	r3, [r0, #0]
 8002784:	e002      	b.n	800278c <_printf_i+0x164>
 8002786:	0655      	lsls	r5, r2, #25
 8002788:	d5fb      	bpl.n	8002782 <_printf_i+0x15a>
 800278a:	8803      	ldrh	r3, [r0, #0]
 800278c:	07d0      	lsls	r0, r2, #31
 800278e:	bf44      	itt	mi
 8002790:	f042 0220 	orrmi.w	r2, r2, #32
 8002794:	6022      	strmi	r2, [r4, #0]
 8002796:	b91b      	cbnz	r3, 80027a0 <_printf_i+0x178>
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	f022 0220 	bic.w	r2, r2, #32
 800279e:	6022      	str	r2, [r4, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	e7b1      	b.n	8002708 <_printf_i+0xe0>
 80027a4:	4675      	mov	r5, lr
 80027a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80027aa:	fb02 3310 	mls	r3, r2, r0, r3
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80027b4:	4603      	mov	r3, r0
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d1f5      	bne.n	80027a6 <_printf_i+0x17e>
 80027ba:	e7b7      	b.n	800272c <_printf_i+0x104>
 80027bc:	6808      	ldr	r0, [r1, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027c4:	6949      	ldr	r1, [r1, #20]
 80027c6:	d004      	beq.n	80027d2 <_printf_i+0x1aa>
 80027c8:	1d10      	adds	r0, r2, #4
 80027ca:	6018      	str	r0, [r3, #0]
 80027cc:	6813      	ldr	r3, [r2, #0]
 80027ce:	6019      	str	r1, [r3, #0]
 80027d0:	e007      	b.n	80027e2 <_printf_i+0x1ba>
 80027d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027d6:	f102 0004 	add.w	r0, r2, #4
 80027da:	6018      	str	r0, [r3, #0]
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	d0f6      	beq.n	80027ce <_printf_i+0x1a6>
 80027e0:	8019      	strh	r1, [r3, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	4675      	mov	r5, lr
 80027e6:	6123      	str	r3, [r4, #16]
 80027e8:	e7b1      	b.n	800274e <_printf_i+0x126>
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	1d11      	adds	r1, r2, #4
 80027ee:	6019      	str	r1, [r3, #0]
 80027f0:	6815      	ldr	r5, [r2, #0]
 80027f2:	2100      	movs	r1, #0
 80027f4:	6862      	ldr	r2, [r4, #4]
 80027f6:	4628      	mov	r0, r5
 80027f8:	f000 f836 	bl	8002868 <memchr>
 80027fc:	b108      	cbz	r0, 8002802 <_printf_i+0x1da>
 80027fe:	1b40      	subs	r0, r0, r5
 8002800:	6060      	str	r0, [r4, #4]
 8002802:	6863      	ldr	r3, [r4, #4]
 8002804:	6123      	str	r3, [r4, #16]
 8002806:	2300      	movs	r3, #0
 8002808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800280c:	e79f      	b.n	800274e <_printf_i+0x126>
 800280e:	6923      	ldr	r3, [r4, #16]
 8002810:	462a      	mov	r2, r5
 8002812:	4639      	mov	r1, r7
 8002814:	4630      	mov	r0, r6
 8002816:	47c0      	blx	r8
 8002818:	3001      	adds	r0, #1
 800281a:	d0a2      	beq.n	8002762 <_printf_i+0x13a>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	079b      	lsls	r3, r3, #30
 8002820:	d507      	bpl.n	8002832 <_printf_i+0x20a>
 8002822:	2500      	movs	r5, #0
 8002824:	f104 0919 	add.w	r9, r4, #25
 8002828:	68e3      	ldr	r3, [r4, #12]
 800282a:	9a03      	ldr	r2, [sp, #12]
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	429d      	cmp	r5, r3
 8002830:	db05      	blt.n	800283e <_printf_i+0x216>
 8002832:	68e0      	ldr	r0, [r4, #12]
 8002834:	9b03      	ldr	r3, [sp, #12]
 8002836:	4298      	cmp	r0, r3
 8002838:	bfb8      	it	lt
 800283a:	4618      	movlt	r0, r3
 800283c:	e793      	b.n	8002766 <_printf_i+0x13e>
 800283e:	2301      	movs	r3, #1
 8002840:	464a      	mov	r2, r9
 8002842:	4639      	mov	r1, r7
 8002844:	4630      	mov	r0, r6
 8002846:	47c0      	blx	r8
 8002848:	3001      	adds	r0, #1
 800284a:	d08a      	beq.n	8002762 <_printf_i+0x13a>
 800284c:	3501      	adds	r5, #1
 800284e:	e7eb      	b.n	8002828 <_printf_i+0x200>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1a7      	bne.n	80027a4 <_printf_i+0x17c>
 8002854:	780b      	ldrb	r3, [r1, #0]
 8002856:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800285a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800285e:	e765      	b.n	800272c <_printf_i+0x104>
 8002860:	08002b26 	.word	0x08002b26
 8002864:	08002b15 	.word	0x08002b15

08002868 <memchr>:
 8002868:	b510      	push	{r4, lr}
 800286a:	b2c9      	uxtb	r1, r1
 800286c:	4402      	add	r2, r0
 800286e:	4290      	cmp	r0, r2
 8002870:	4603      	mov	r3, r0
 8002872:	d101      	bne.n	8002878 <memchr+0x10>
 8002874:	2000      	movs	r0, #0
 8002876:	bd10      	pop	{r4, pc}
 8002878:	781c      	ldrb	r4, [r3, #0]
 800287a:	3001      	adds	r0, #1
 800287c:	428c      	cmp	r4, r1
 800287e:	d1f6      	bne.n	800286e <memchr+0x6>
 8002880:	4618      	mov	r0, r3
 8002882:	bd10      	pop	{r4, pc}

08002884 <memcpy>:
 8002884:	b510      	push	{r4, lr}
 8002886:	1e43      	subs	r3, r0, #1
 8002888:	440a      	add	r2, r1
 800288a:	4291      	cmp	r1, r2
 800288c:	d100      	bne.n	8002890 <memcpy+0xc>
 800288e:	bd10      	pop	{r4, pc}
 8002890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002898:	e7f7      	b.n	800288a <memcpy+0x6>

0800289a <memmove>:
 800289a:	4288      	cmp	r0, r1
 800289c:	b510      	push	{r4, lr}
 800289e:	eb01 0302 	add.w	r3, r1, r2
 80028a2:	d803      	bhi.n	80028ac <memmove+0x12>
 80028a4:	1e42      	subs	r2, r0, #1
 80028a6:	4299      	cmp	r1, r3
 80028a8:	d10c      	bne.n	80028c4 <memmove+0x2a>
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	4298      	cmp	r0, r3
 80028ae:	d2f9      	bcs.n	80028a4 <memmove+0xa>
 80028b0:	1881      	adds	r1, r0, r2
 80028b2:	1ad2      	subs	r2, r2, r3
 80028b4:	42d3      	cmn	r3, r2
 80028b6:	d100      	bne.n	80028ba <memmove+0x20>
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80028c2:	e7f7      	b.n	80028b4 <memmove+0x1a>
 80028c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80028cc:	e7eb      	b.n	80028a6 <memmove+0xc>
	...

080028d0 <_free_r>:
 80028d0:	b538      	push	{r3, r4, r5, lr}
 80028d2:	4605      	mov	r5, r0
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d043      	beq.n	8002960 <_free_r+0x90>
 80028d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028dc:	1f0c      	subs	r4, r1, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bfb8      	it	lt
 80028e2:	18e4      	addlt	r4, r4, r3
 80028e4:	f000 f8d4 	bl	8002a90 <__malloc_lock>
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <_free_r+0x94>)
 80028ea:	6813      	ldr	r3, [r2, #0]
 80028ec:	4610      	mov	r0, r2
 80028ee:	b933      	cbnz	r3, 80028fe <_free_r+0x2e>
 80028f0:	6063      	str	r3, [r4, #4]
 80028f2:	6014      	str	r4, [r2, #0]
 80028f4:	4628      	mov	r0, r5
 80028f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028fa:	f000 b8ca 	b.w	8002a92 <__malloc_unlock>
 80028fe:	42a3      	cmp	r3, r4
 8002900:	d90b      	bls.n	800291a <_free_r+0x4a>
 8002902:	6821      	ldr	r1, [r4, #0]
 8002904:	1862      	adds	r2, r4, r1
 8002906:	4293      	cmp	r3, r2
 8002908:	bf01      	itttt	eq
 800290a:	681a      	ldreq	r2, [r3, #0]
 800290c:	685b      	ldreq	r3, [r3, #4]
 800290e:	1852      	addeq	r2, r2, r1
 8002910:	6022      	streq	r2, [r4, #0]
 8002912:	6063      	str	r3, [r4, #4]
 8002914:	6004      	str	r4, [r0, #0]
 8002916:	e7ed      	b.n	80028f4 <_free_r+0x24>
 8002918:	4613      	mov	r3, r2
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	b10a      	cbz	r2, 8002922 <_free_r+0x52>
 800291e:	42a2      	cmp	r2, r4
 8002920:	d9fa      	bls.n	8002918 <_free_r+0x48>
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	1858      	adds	r0, r3, r1
 8002926:	42a0      	cmp	r0, r4
 8002928:	d10b      	bne.n	8002942 <_free_r+0x72>
 800292a:	6820      	ldr	r0, [r4, #0]
 800292c:	4401      	add	r1, r0
 800292e:	1858      	adds	r0, r3, r1
 8002930:	4282      	cmp	r2, r0
 8002932:	6019      	str	r1, [r3, #0]
 8002934:	d1de      	bne.n	80028f4 <_free_r+0x24>
 8002936:	6810      	ldr	r0, [r2, #0]
 8002938:	6852      	ldr	r2, [r2, #4]
 800293a:	4401      	add	r1, r0
 800293c:	6019      	str	r1, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	e7d8      	b.n	80028f4 <_free_r+0x24>
 8002942:	d902      	bls.n	800294a <_free_r+0x7a>
 8002944:	230c      	movs	r3, #12
 8002946:	602b      	str	r3, [r5, #0]
 8002948:	e7d4      	b.n	80028f4 <_free_r+0x24>
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	1821      	adds	r1, r4, r0
 800294e:	428a      	cmp	r2, r1
 8002950:	bf01      	itttt	eq
 8002952:	6811      	ldreq	r1, [r2, #0]
 8002954:	6852      	ldreq	r2, [r2, #4]
 8002956:	1809      	addeq	r1, r1, r0
 8002958:	6021      	streq	r1, [r4, #0]
 800295a:	6062      	str	r2, [r4, #4]
 800295c:	605c      	str	r4, [r3, #4]
 800295e:	e7c9      	b.n	80028f4 <_free_r+0x24>
 8002960:	bd38      	pop	{r3, r4, r5, pc}
 8002962:	bf00      	nop
 8002964:	20000098 	.word	0x20000098

08002968 <_malloc_r>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	1ccd      	adds	r5, r1, #3
 800296c:	f025 0503 	bic.w	r5, r5, #3
 8002970:	3508      	adds	r5, #8
 8002972:	2d0c      	cmp	r5, #12
 8002974:	bf38      	it	cc
 8002976:	250c      	movcc	r5, #12
 8002978:	2d00      	cmp	r5, #0
 800297a:	4606      	mov	r6, r0
 800297c:	db01      	blt.n	8002982 <_malloc_r+0x1a>
 800297e:	42a9      	cmp	r1, r5
 8002980:	d903      	bls.n	800298a <_malloc_r+0x22>
 8002982:	230c      	movs	r3, #12
 8002984:	6033      	str	r3, [r6, #0]
 8002986:	2000      	movs	r0, #0
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	f000 f881 	bl	8002a90 <__malloc_lock>
 800298e:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <_malloc_r+0xb4>)
 8002990:	6814      	ldr	r4, [r2, #0]
 8002992:	4621      	mov	r1, r4
 8002994:	b991      	cbnz	r1, 80029bc <_malloc_r+0x54>
 8002996:	4c22      	ldr	r4, [pc, #136]	; (8002a20 <_malloc_r+0xb8>)
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	b91b      	cbnz	r3, 80029a4 <_malloc_r+0x3c>
 800299c:	4630      	mov	r0, r6
 800299e:	f000 f867 	bl	8002a70 <_sbrk_r>
 80029a2:	6020      	str	r0, [r4, #0]
 80029a4:	4629      	mov	r1, r5
 80029a6:	4630      	mov	r0, r6
 80029a8:	f000 f862 	bl	8002a70 <_sbrk_r>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d126      	bne.n	80029fe <_malloc_r+0x96>
 80029b0:	230c      	movs	r3, #12
 80029b2:	4630      	mov	r0, r6
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	f000 f86c 	bl	8002a92 <__malloc_unlock>
 80029ba:	e7e4      	b.n	8002986 <_malloc_r+0x1e>
 80029bc:	680b      	ldr	r3, [r1, #0]
 80029be:	1b5b      	subs	r3, r3, r5
 80029c0:	d41a      	bmi.n	80029f8 <_malloc_r+0x90>
 80029c2:	2b0b      	cmp	r3, #11
 80029c4:	d90f      	bls.n	80029e6 <_malloc_r+0x7e>
 80029c6:	600b      	str	r3, [r1, #0]
 80029c8:	18cc      	adds	r4, r1, r3
 80029ca:	50cd      	str	r5, [r1, r3]
 80029cc:	4630      	mov	r0, r6
 80029ce:	f000 f860 	bl	8002a92 <__malloc_unlock>
 80029d2:	f104 000b 	add.w	r0, r4, #11
 80029d6:	1d23      	adds	r3, r4, #4
 80029d8:	f020 0007 	bic.w	r0, r0, #7
 80029dc:	1ac3      	subs	r3, r0, r3
 80029de:	d01b      	beq.n	8002a18 <_malloc_r+0xb0>
 80029e0:	425a      	negs	r2, r3
 80029e2:	50e2      	str	r2, [r4, r3]
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	428c      	cmp	r4, r1
 80029e8:	bf0b      	itete	eq
 80029ea:	6863      	ldreq	r3, [r4, #4]
 80029ec:	684b      	ldrne	r3, [r1, #4]
 80029ee:	6013      	streq	r3, [r2, #0]
 80029f0:	6063      	strne	r3, [r4, #4]
 80029f2:	bf18      	it	ne
 80029f4:	460c      	movne	r4, r1
 80029f6:	e7e9      	b.n	80029cc <_malloc_r+0x64>
 80029f8:	460c      	mov	r4, r1
 80029fa:	6849      	ldr	r1, [r1, #4]
 80029fc:	e7ca      	b.n	8002994 <_malloc_r+0x2c>
 80029fe:	1cc4      	adds	r4, r0, #3
 8002a00:	f024 0403 	bic.w	r4, r4, #3
 8002a04:	42a0      	cmp	r0, r4
 8002a06:	d005      	beq.n	8002a14 <_malloc_r+0xac>
 8002a08:	1a21      	subs	r1, r4, r0
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f000 f830 	bl	8002a70 <_sbrk_r>
 8002a10:	3001      	adds	r0, #1
 8002a12:	d0cd      	beq.n	80029b0 <_malloc_r+0x48>
 8002a14:	6025      	str	r5, [r4, #0]
 8002a16:	e7d9      	b.n	80029cc <_malloc_r+0x64>
 8002a18:	bd70      	pop	{r4, r5, r6, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000098 	.word	0x20000098
 8002a20:	2000009c 	.word	0x2000009c

08002a24 <_realloc_r>:
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	4607      	mov	r7, r0
 8002a28:	4614      	mov	r4, r2
 8002a2a:	460e      	mov	r6, r1
 8002a2c:	b921      	cbnz	r1, 8002a38 <_realloc_r+0x14>
 8002a2e:	4611      	mov	r1, r2
 8002a30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a34:	f7ff bf98 	b.w	8002968 <_malloc_r>
 8002a38:	b922      	cbnz	r2, 8002a44 <_realloc_r+0x20>
 8002a3a:	f7ff ff49 	bl	80028d0 <_free_r>
 8002a3e:	4625      	mov	r5, r4
 8002a40:	4628      	mov	r0, r5
 8002a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a44:	f000 f826 	bl	8002a94 <_malloc_usable_size_r>
 8002a48:	4284      	cmp	r4, r0
 8002a4a:	d90f      	bls.n	8002a6c <_realloc_r+0x48>
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	4638      	mov	r0, r7
 8002a50:	f7ff ff8a 	bl	8002968 <_malloc_r>
 8002a54:	4605      	mov	r5, r0
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d0f2      	beq.n	8002a40 <_realloc_r+0x1c>
 8002a5a:	4631      	mov	r1, r6
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	f7ff ff11 	bl	8002884 <memcpy>
 8002a62:	4631      	mov	r1, r6
 8002a64:	4638      	mov	r0, r7
 8002a66:	f7ff ff33 	bl	80028d0 <_free_r>
 8002a6a:	e7e9      	b.n	8002a40 <_realloc_r+0x1c>
 8002a6c:	4635      	mov	r5, r6
 8002a6e:	e7e7      	b.n	8002a40 <_realloc_r+0x1c>

08002a70 <_sbrk_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	2300      	movs	r3, #0
 8002a74:	4c05      	ldr	r4, [pc, #20]	; (8002a8c <_sbrk_r+0x1c>)
 8002a76:	4605      	mov	r5, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	6023      	str	r3, [r4, #0]
 8002a7c:	f000 f814 	bl	8002aa8 <_sbrk>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_sbrk_r+0x1a>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_sbrk_r+0x1a>
 8002a88:	602b      	str	r3, [r5, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000148 	.word	0x20000148

08002a90 <__malloc_lock>:
 8002a90:	4770      	bx	lr

08002a92 <__malloc_unlock>:
 8002a92:	4770      	bx	lr

08002a94 <_malloc_usable_size_r>:
 8002a94:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	f1a0 0004 	sub.w	r0, r0, #4
 8002a9e:	bfbc      	itt	lt
 8002aa0:	580b      	ldrlt	r3, [r1, r0]
 8002aa2:	18c0      	addlt	r0, r0, r3
 8002aa4:	4770      	bx	lr
	...

08002aa8 <_sbrk>:
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <_sbrk+0x14>)
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6819      	ldr	r1, [r3, #0]
 8002aae:	b909      	cbnz	r1, 8002ab4 <_sbrk+0xc>
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <_sbrk+0x18>)
 8002ab2:	6019      	str	r1, [r3, #0]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	4402      	add	r2, r0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	4770      	bx	lr
 8002abc:	200000a0 	.word	0x200000a0
 8002ac0:	2000014c 	.word	0x2000014c

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
