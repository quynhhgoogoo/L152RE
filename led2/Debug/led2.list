
led2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000132c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001468  08001468  00011468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800148c  0800148c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  20000004  08001498  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000064  08001498  00020064  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000abbf  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000183f  00000000  00000000  0002abec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002267  00000000  00000000  0002c42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000438  00000000  00000000  0002e698  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000750  00000000  00000000  0002ead0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002b74  00000000  00000000  0002f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d85  00000000  00000000  00031d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033b19  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000009d0  00000000  00000000  00033b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08001450 	.word	0x08001450

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08001450 	.word	0x08001450

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f878 	bl	8000280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 f83e 	bl	8000218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f824 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 f859 	bl	8001268 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001d8:	b513      	push	{r0, r1, r4, lr}
 80001da:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001dc:	f7ff fff6 	bl	80001cc <HAL_GetTick>
 80001e0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001e2:	f7ff fff3 	bl	80001cc <HAL_GetTick>
 80001e6:	9b01      	ldr	r3, [sp, #4]
 80001e8:	1b00      	subs	r0, r0, r4
 80001ea:	4298      	cmp	r0, r3
 80001ec:	d3f9      	bcc.n	80001e2 <HAL_Delay+0xa>
  {
  }
}
 80001ee:	b002      	add	sp, #8
 80001f0:	bd10      	pop	{r4, pc}
	...

080001f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000202:	041b      	lsls	r3, r3, #16
 8000204:	0c1b      	lsrs	r3, r3, #16
 8000206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800020a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800020e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000210:	60d3      	str	r3, [r2, #12]
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800021a:	b530      	push	{r4, r5, lr}
 800021c:	68dc      	ldr	r4, [r3, #12]
 800021e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000228:	2b04      	cmp	r3, #4
 800022a:	bf28      	it	cs
 800022c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	bf98      	it	ls
 8000236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	fa05 f303 	lsl.w	r3, r5, r3
 800023c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf88      	it	hi
 8000242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	4019      	ands	r1, r3
 8000246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	3c01      	subs	r4, #1
 800024e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000252:	ea42 0201 	orr.w	r2, r2, r1
 8000256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	bfaf      	iteee	ge
 800025c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	4b06      	ldrlt	r3, [pc, #24]	; (800027c <HAL_NVIC_SetPriority+0x64>)
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	bfa5      	ittet	ge
 800026a:	b2d2      	uxtbge	r2, r2
 800026c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000276:	bd30      	pop	{r4, r5, pc}
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	e000ed14 	.word	0xe000ed14

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002d0:	2300      	movs	r3, #0
{ 
 80002d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80002d6:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002da:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000470 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002de:	4a62      	ldr	r2, [pc, #392]	; (8000468 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002e0:	fa38 f403 	lsrs.w	r4, r8, r3
 80002e4:	d102      	bne.n	80002ec <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 80002e6:	b003      	add	sp, #12
 80002e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002ec:	f04f 0e01 	mov.w	lr, #1
 80002f0:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80002f4:	ea18 060e 	ands.w	r6, r8, lr
 80002f8:	f000 80a8 	beq.w	800044c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002fc:	684c      	ldr	r4, [r1, #4]
 80002fe:	f024 0710 	bic.w	r7, r4, #16
 8000302:	2f02      	cmp	r7, #2
 8000304:	d116      	bne.n	8000334 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000306:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 800030a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800030e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000312:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000316:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800031a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800031e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000322:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000326:	690d      	ldr	r5, [r1, #16]
 8000328:	fa05 f50b 	lsl.w	r5, r5, fp
 800032c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000330:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000334:	2503      	movs	r5, #3
 8000336:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800033a:	fa05 f50a 	lsl.w	r5, r5, sl
 800033e:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000340:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000344:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000348:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800034c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000350:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000352:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000356:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000358:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800035c:	d811      	bhi.n	8000382 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 800035e:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000360:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000364:	68cf      	ldr	r7, [r1, #12]
 8000366:	fa07 fc0a 	lsl.w	ip, r7, sl
 800036a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800036e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000370:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000372:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000376:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800037a:	409f      	lsls	r7, r3
 800037c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000380:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000382:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000384:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000386:	688f      	ldr	r7, [r1, #8]
 8000388:	fa07 f70a 	lsl.w	r7, r7, sl
 800038c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800038e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000390:	00e5      	lsls	r5, r4, #3
 8000392:	d55b      	bpl.n	800044c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000394:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000398:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800039c:	f023 0703 	bic.w	r7, r3, #3
 80003a0:	f045 0501 	orr.w	r5, r5, #1
 80003a4:	f8c9 5020 	str.w	r5, [r9, #32]
 80003a8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003b0:	f005 0501 	and.w	r5, r5, #1
 80003b4:	9501      	str	r5, [sp, #4]
 80003b6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003ba:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003be:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003c8:	fa0c f50e 	lsl.w	r5, ip, lr
 80003cc:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003d0:	4d26      	ldr	r5, [pc, #152]	; (800046c <HAL_GPIO_Init+0x19c>)
 80003d2:	42a8      	cmp	r0, r5
 80003d4:	d03c      	beq.n	8000450 <HAL_GPIO_Init+0x180>
 80003d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003da:	42a8      	cmp	r0, r5
 80003dc:	d03a      	beq.n	8000454 <HAL_GPIO_Init+0x184>
 80003de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e2:	42a8      	cmp	r0, r5
 80003e4:	d038      	beq.n	8000458 <HAL_GPIO_Init+0x188>
 80003e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ea:	42a8      	cmp	r0, r5
 80003ec:	d036      	beq.n	800045c <HAL_GPIO_Init+0x18c>
 80003ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f2:	42a8      	cmp	r0, r5
 80003f4:	d034      	beq.n	8000460 <HAL_GPIO_Init+0x190>
 80003f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fa:	42a8      	cmp	r0, r5
 80003fc:	d032      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 80003fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000402:	42a8      	cmp	r0, r5
 8000404:	bf14      	ite	ne
 8000406:	2507      	movne	r5, #7
 8000408:	2506      	moveq	r5, #6
 800040a:	fa05 f50e 	lsl.w	r5, r5, lr
 800040e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000412:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000414:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000416:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000418:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800041c:	bf0c      	ite	eq
 800041e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000420:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000422:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000424:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000426:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800042a:	bf0c      	ite	eq
 800042c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800042e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000430:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000432:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000434:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000438:	bf0c      	ite	eq
 800043a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800043c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800043e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000440:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000442:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000444:	bf54      	ite	pl
 8000446:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000448:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800044a:	60d5      	str	r5, [r2, #12]
    position++;
 800044c:	3301      	adds	r3, #1
 800044e:	e747      	b.n	80002e0 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000450:	2500      	movs	r5, #0
 8000452:	e7da      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000454:	2501      	movs	r5, #1
 8000456:	e7d8      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000458:	2502      	movs	r5, #2
 800045a:	e7d6      	b.n	800040a <HAL_GPIO_Init+0x13a>
 800045c:	2503      	movs	r5, #3
 800045e:	e7d4      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000460:	2504      	movs	r5, #4
 8000462:	e7d2      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000464:	2505      	movs	r5, #5
 8000466:	e7d0      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000468:	40010400 	.word	0x40010400
 800046c:	40020000 	.word	0x40020000
 8000470:	40023800 	.word	0x40023800

08000474 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000474:	b10a      	cbz	r2, 800047a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000476:	6181      	str	r1, [r0, #24]
 8000478:	4770      	bx	lr
 800047a:	0409      	lsls	r1, r1, #16
 800047c:	e7fb      	b.n	8000476 <HAL_GPIO_WritePin+0x2>

0800047e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800047e:	6943      	ldr	r3, [r0, #20]
 8000480:	4059      	eors	r1, r3
 8000482:	6141      	str	r1, [r0, #20]
 8000484:	4770      	bx	lr
	...

08000488 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800048a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000492:	d00c      	beq.n	80004ae <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000494:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000496:	491a      	ldr	r1, [pc, #104]	; (8000500 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000498:	680b      	ldr	r3, [r1, #0]
 800049a:	f023 0301 	bic.w	r3, r3, #1
 800049e:	4313      	orrs	r3, r2
 80004a0:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80004a2:	6808      	ldr	r0, [r1, #0]
 80004a4:	f000 0001 	and.w	r0, r0, #1
 80004a8:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80004aa:	b002      	add	sp, #8
 80004ac:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80004ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b0:	4914      	ldr	r1, [pc, #80]	; (8000504 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80004b2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80004b6:	d00f      	beq.n	80004d8 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004b8:	680a      	ldr	r2, [r1, #0]
 80004ba:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80004be:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80004c2:	d1e7      	bne.n	8000494 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80004c4:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80004c8:	d1e4      	bne.n	8000494 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 80004ca:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004cc:	6813      	ldr	r3, [r2, #0]
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80004d4:	2201      	movs	r2, #1
 80004d6:	e7de      	b.n	8000496 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80004d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004de:	625a      	str	r2, [r3, #36]	; 0x24
 80004e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004e6:	9201      	str	r2, [sp, #4]
 80004e8:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004ea:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004ee:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004f2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004f6:	6259      	str	r1, [r3, #36]	; 0x24
 80004f8:	e7e1      	b.n	80004be <RCC_SetFlashLatencyFromMSIRange+0x36>
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800
 8000500:	40023c00 	.word	0x40023c00
 8000504:	40007000 	.word	0x40007000

08000508 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000508:	6803      	ldr	r3, [r0, #0]
{
 800050a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050e:	07d9      	lsls	r1, r3, #31
{
 8000510:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000512:	d46a      	bmi.n	80005ea <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	079a      	lsls	r2, r3, #30
 8000518:	f100 80e6 	bmi.w	80006e8 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800051c:	6823      	ldr	r3, [r4, #0]
 800051e:	06de      	lsls	r6, r3, #27
 8000520:	d555      	bpl.n	80005ce <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000522:	4dc1      	ldr	r5, [pc, #772]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 8000524:	68ab      	ldr	r3, [r5, #8]
 8000526:	f013 0f0c 	tst.w	r3, #12
 800052a:	f040 8183 	bne.w	8000834 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000532:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000536:	6829      	ldr	r1, [r5, #0]
 8000538:	fa93 f3a3 	rbit	r3, r3
 800053c:	fab3 f383 	clz	r3, r3
 8000540:	2201      	movs	r2, #1
 8000542:	f003 031f 	and.w	r3, r3, #31
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	420b      	tst	r3, r1
 800054c:	d002      	beq.n	8000554 <HAL_RCC_OscConfig+0x4c>
 800054e:	69a3      	ldr	r3, [r4, #24]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d06e      	beq.n	8000632 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000554:	4db4      	ldr	r5, [pc, #720]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 8000556:	6a20      	ldr	r0, [r4, #32]
 8000558:	686b      	ldr	r3, [r5, #4]
 800055a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800055e:	4298      	cmp	r0, r3
 8000560:	f240 814a 	bls.w	80007f8 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000564:	f7ff ff90 	bl	8000488 <RCC_SetFlashLatencyFromMSIRange>
 8000568:	2800      	cmp	r0, #0
 800056a:	d162      	bne.n	8000632 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800056c:	686b      	ldr	r3, [r5, #4]
 800056e:	6a22      	ldr	r2, [r4, #32]
 8000570:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000574:	4313      	orrs	r3, r2
 8000576:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000578:	6869      	ldr	r1, [r5, #4]
 800057a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800057e:	fa93 f3a3 	rbit	r3, r3
 8000582:	fab3 f283 	clz	r2, r3
 8000586:	69e3      	ldr	r3, [r4, #28]
 8000588:	4093      	lsls	r3, r2
 800058a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800058e:	4313      	orrs	r3, r2
 8000590:	606b      	str	r3, [r5, #4]
 8000592:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000596:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800059a:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800059e:	4ba2      	ldr	r3, [pc, #648]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 80005a0:	21f0      	movs	r1, #240	; 0xf0
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	fa91 f1a1 	rbit	r1, r1
 80005a8:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005ac:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005b2:	40c3      	lsrs	r3, r0
 80005b4:	1c58      	adds	r0, r3, #1
 80005b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005ba:	40ca      	lsrs	r2, r1
 80005bc:	499b      	ldr	r1, [pc, #620]	; (800082c <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005be:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005c0:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80005c2:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80005c4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80005c6:	4a9a      	ldr	r2, [pc, #616]	; (8000830 <HAL_RCC_OscConfig+0x328>)
 80005c8:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80005ca:	f7ff fdd7 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005ce:	6823      	ldr	r3, [r4, #0]
 80005d0:	071d      	lsls	r5, r3, #28
 80005d2:	f100 8191 	bmi.w	80008f8 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005d6:	6823      	ldr	r3, [r4, #0]
 80005d8:	0758      	lsls	r0, r3, #29
 80005da:	f100 81d3 	bmi.w	8000984 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	f040 8257 	bne.w	8000a94 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80005e6:	2000      	movs	r0, #0
 80005e8:	e024      	b.n	8000634 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ea:	4b8f      	ldr	r3, [pc, #572]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	f002 020c 	and.w	r2, r2, #12
 80005f2:	2a08      	cmp	r2, #8
 80005f4:	d007      	beq.n	8000606 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	f002 020c 	and.w	r2, r2, #12
 80005fc:	2a0c      	cmp	r2, #12
 80005fe:	d11c      	bne.n	800063a <HAL_RCC_OscConfig+0x132>
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	03db      	lsls	r3, r3, #15
 8000604:	d519      	bpl.n	800063a <HAL_RCC_OscConfig+0x132>
 8000606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800060a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800060e:	4a86      	ldr	r2, [pc, #536]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	fab3 f383 	clz	r3, r3
 800061a:	2201      	movs	r2, #1
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	420b      	tst	r3, r1
 8000626:	f43f af75 	beq.w	8000514 <HAL_RCC_OscConfig+0xc>
 800062a:	6863      	ldr	r3, [r4, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	f47f af71 	bne.w	8000514 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
}
 8000634:	b003      	add	sp, #12
 8000636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063a:	6863      	ldr	r3, [r4, #4]
 800063c:	4d7a      	ldr	r5, [pc, #488]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 800063e:	2b01      	cmp	r3, #1
 8000640:	d120      	bne.n	8000684 <HAL_RCC_OscConfig+0x17c>
 8000642:	682b      	ldr	r3, [r5, #0]
 8000644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000648:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800064a:	f7ff fdbf 	bl	80001cc <HAL_GetTick>
 800064e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000652:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000654:	2601      	movs	r6, #1
 8000656:	4f74      	ldr	r7, [pc, #464]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 8000658:	fa95 f3a5 	rbit	r3, r5
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	fa95 f3a5 	rbit	r3, r5
 8000662:	fab3 f383 	clz	r3, r3
 8000666:	f003 031f 	and.w	r3, r3, #31
 800066a:	fa06 f303 	lsl.w	r3, r6, r3
 800066e:	4213      	tst	r3, r2
 8000670:	f47f af50 	bne.w	8000514 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000674:	f7ff fdaa 	bl	80001cc <HAL_GetTick>
 8000678:	eba0 0008 	sub.w	r0, r0, r8
 800067c:	2864      	cmp	r0, #100	; 0x64
 800067e:	d9eb      	bls.n	8000658 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000680:	2003      	movs	r0, #3
 8000682:	e7d7      	b.n	8000634 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000684:	bb13      	cbnz	r3, 80006cc <HAL_RCC_OscConfig+0x1c4>
 8000686:	682b      	ldr	r3, [r5, #0]
 8000688:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800068c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000690:	602b      	str	r3, [r5, #0]
 8000692:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000694:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800069c:	f7ff fd96 	bl	80001cc <HAL_GetTick>
 80006a0:	4680      	mov	r8, r0
 80006a2:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006a6:	682a      	ldr	r2, [r5, #0]
 80006a8:	fa96 f3a6 	rbit	r3, r6
 80006ac:	fab3 f383 	clz	r3, r3
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	fa07 f303 	lsl.w	r3, r7, r3
 80006b8:	4213      	tst	r3, r2
 80006ba:	f43f af2b 	beq.w	8000514 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006be:	f7ff fd85 	bl	80001cc <HAL_GetTick>
 80006c2:	eba0 0008 	sub.w	r0, r0, r8
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9eb      	bls.n	80006a2 <HAL_RCC_OscConfig+0x19a>
 80006ca:	e7d9      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006cc:	2b05      	cmp	r3, #5
 80006ce:	682b      	ldr	r3, [r5, #0]
 80006d0:	d103      	bne.n	80006da <HAL_RCC_OscConfig+0x1d2>
 80006d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d6:	602b      	str	r3, [r5, #0]
 80006d8:	e7b3      	b.n	8000642 <HAL_RCC_OscConfig+0x13a>
 80006da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006de:	602b      	str	r3, [r5, #0]
 80006e0:	682b      	ldr	r3, [r5, #0]
 80006e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e6:	e7af      	b.n	8000648 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	f002 020c 	and.w	r2, r2, #12
 80006f0:	2a04      	cmp	r2, #4
 80006f2:	d007      	beq.n	8000704 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	f002 020c 	and.w	r2, r2, #12
 80006fa:	2a0c      	cmp	r2, #12
 80006fc:	d124      	bne.n	8000748 <HAL_RCC_OscConfig+0x240>
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	03df      	lsls	r7, r3, #15
 8000702:	d421      	bmi.n	8000748 <HAL_RCC_OscConfig+0x240>
 8000704:	2302      	movs	r3, #2
 8000706:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800070a:	4a47      	ldr	r2, [pc, #284]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 800070c:	6810      	ldr	r0, [r2, #0]
 800070e:	fa93 f3a3 	rbit	r3, r3
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	2101      	movs	r1, #1
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	4203      	tst	r3, r0
 8000722:	4613      	mov	r3, r2
 8000724:	d002      	beq.n	800072c <HAL_RCC_OscConfig+0x224>
 8000726:	68e2      	ldr	r2, [r4, #12]
 8000728:	428a      	cmp	r2, r1
 800072a:	d182      	bne.n	8000632 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800072c:	6858      	ldr	r0, [r3, #4]
 800072e:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000732:	fa92 f2a2 	rbit	r2, r2
 8000736:	fab2 f182 	clz	r1, r2
 800073a:	6922      	ldr	r2, [r4, #16]
 800073c:	408a      	lsls	r2, r1
 800073e:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000742:	430a      	orrs	r2, r1
 8000744:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000746:	e6e9      	b.n	800051c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000748:	68e2      	ldr	r2, [r4, #12]
 800074a:	2501      	movs	r5, #1
 800074c:	b382      	cbz	r2, 80007b0 <HAL_RCC_OscConfig+0x2a8>
 800074e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000752:	fab3 f383 	clz	r3, r3
 8000756:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800075a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000762:	f7ff fd33 	bl	80001cc <HAL_GetTick>
 8000766:	2702      	movs	r7, #2
 8000768:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800076a:	4e2f      	ldr	r6, [pc, #188]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 800076c:	fa97 f3a7 	rbit	r3, r7
 8000770:	6832      	ldr	r2, [r6, #0]
 8000772:	fa97 f3a7 	rbit	r3, r7
 8000776:	fab3 f383 	clz	r3, r3
 800077a:	f003 031f 	and.w	r3, r3, #31
 800077e:	fa05 f303 	lsl.w	r3, r5, r3
 8000782:	4213      	tst	r3, r2
 8000784:	d00d      	beq.n	80007a2 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000786:	6871      	ldr	r1, [r6, #4]
 8000788:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800078c:	fa93 f3a3 	rbit	r3, r3
 8000790:	fab3 f283 	clz	r2, r3
 8000794:	6923      	ldr	r3, [r4, #16]
 8000796:	4093      	lsls	r3, r2
 8000798:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 800079c:	4313      	orrs	r3, r2
 800079e:	6073      	str	r3, [r6, #4]
 80007a0:	e6bc      	b.n	800051c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007a2:	f7ff fd13 	bl	80001cc <HAL_GetTick>
 80007a6:	eba0 0008 	sub.w	r0, r0, r8
 80007aa:	2802      	cmp	r0, #2
 80007ac:	d9de      	bls.n	800076c <HAL_RCC_OscConfig+0x264>
 80007ae:	e767      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
 80007b0:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80007b4:	fab3 f383 	clz	r3, r3
 80007b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007bc:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007c4:	f7ff fd02 	bl	80001cc <HAL_GetTick>
 80007c8:	2602      	movs	r6, #2
 80007ca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007cc:	4f16      	ldr	r7, [pc, #88]	; (8000828 <HAL_RCC_OscConfig+0x320>)
 80007ce:	fa96 f3a6 	rbit	r3, r6
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	fa96 f3a6 	rbit	r3, r6
 80007d8:	fab3 f383 	clz	r3, r3
 80007dc:	f003 031f 	and.w	r3, r3, #31
 80007e0:	fa05 f303 	lsl.w	r3, r5, r3
 80007e4:	4213      	tst	r3, r2
 80007e6:	f43f ae99 	beq.w	800051c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007ea:	f7ff fcef 	bl	80001cc <HAL_GetTick>
 80007ee:	eba0 0008 	sub.w	r0, r0, r8
 80007f2:	2802      	cmp	r0, #2
 80007f4:	d9eb      	bls.n	80007ce <HAL_RCC_OscConfig+0x2c6>
 80007f6:	e743      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007f8:	686b      	ldr	r3, [r5, #4]
 80007fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007fe:	4303      	orrs	r3, r0
 8000800:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000802:	6869      	ldr	r1, [r5, #4]
 8000804:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000808:	fa93 f3a3 	rbit	r3, r3
 800080c:	fab3 f283 	clz	r2, r3
 8000810:	69e3      	ldr	r3, [r4, #28]
 8000812:	4093      	lsls	r3, r2
 8000814:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000818:	4313      	orrs	r3, r2
 800081a:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800081c:	f7ff fe34 	bl	8000488 <RCC_SetFlashLatencyFromMSIRange>
 8000820:	2800      	cmp	r0, #0
 8000822:	f43f aeb6 	beq.w	8000592 <HAL_RCC_OscConfig+0x8a>
 8000826:	e704      	b.n	8000632 <HAL_RCC_OscConfig+0x12a>
 8000828:	40023800 	.word	0x40023800
 800082c:	08001468 	.word	0x08001468
 8000830:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000834:	69a2      	ldr	r2, [r4, #24]
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	2a00      	cmp	r2, #0
 800083c:	d037      	beq.n	80008ae <HAL_RCC_OscConfig+0x3a6>
 800083e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000842:	fab3 f383 	clz	r3, r3
 8000846:	2601      	movs	r6, #1
 8000848:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800084c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000854:	f7ff fcba 	bl	80001cc <HAL_GetTick>
 8000858:	f44f 7700 	mov.w	r7, #512	; 0x200
 800085c:	4680      	mov	r8, r0
 800085e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000862:	682a      	ldr	r2, [r5, #0]
 8000864:	fa97 f3a7 	rbit	r3, r7
 8000868:	fab3 f383 	clz	r3, r3
 800086c:	f003 031f 	and.w	r3, r3, #31
 8000870:	fa06 f303 	lsl.w	r3, r6, r3
 8000874:	4213      	tst	r3, r2
 8000876:	d013      	beq.n	80008a0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000878:	686b      	ldr	r3, [r5, #4]
 800087a:	6a22      	ldr	r2, [r4, #32]
 800087c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000880:	4313      	orrs	r3, r2
 8000882:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000884:	6869      	ldr	r1, [r5, #4]
 8000886:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800088a:	fa93 f3a3 	rbit	r3, r3
 800088e:	fab3 f283 	clz	r2, r3
 8000892:	69e3      	ldr	r3, [r4, #28]
 8000894:	4093      	lsls	r3, r2
 8000896:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800089a:	4313      	orrs	r3, r2
 800089c:	606b      	str	r3, [r5, #4]
 800089e:	e696      	b.n	80005ce <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008a0:	f7ff fc94 	bl	80001cc <HAL_GetTick>
 80008a4:	eba0 0008 	sub.w	r0, r0, r8
 80008a8:	2802      	cmp	r0, #2
 80008aa:	d9d8      	bls.n	800085e <HAL_RCC_OscConfig+0x356>
 80008ac:	e6e8      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
 80008ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008ba:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c2:	f7ff fc83 	bl	80001cc <HAL_GetTick>
 80008c6:	f44f 7600 	mov.w	r6, #512	; 0x200
 80008ca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80008cc:	2701      	movs	r7, #1
 80008ce:	fa96 f3a6 	rbit	r3, r6
 80008d2:	682a      	ldr	r2, [r5, #0]
 80008d4:	fa96 f3a6 	rbit	r3, r6
 80008d8:	fab3 f383 	clz	r3, r3
 80008dc:	f003 031f 	and.w	r3, r3, #31
 80008e0:	fa07 f303 	lsl.w	r3, r7, r3
 80008e4:	4213      	tst	r3, r2
 80008e6:	f43f ae72 	beq.w	80005ce <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008ea:	f7ff fc6f 	bl	80001cc <HAL_GetTick>
 80008ee:	eba0 0008 	sub.w	r0, r0, r8
 80008f2:	2802      	cmp	r0, #2
 80008f4:	d9eb      	bls.n	80008ce <HAL_RCC_OscConfig+0x3c6>
 80008f6:	e6c3      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008f8:	6962      	ldr	r2, [r4, #20]
 80008fa:	2501      	movs	r5, #1
 80008fc:	49a9      	ldr	r1, [pc, #676]	; (8000ba4 <HAL_RCC_OscConfig+0x69c>)
 80008fe:	b302      	cbz	r2, 8000942 <HAL_RCC_OscConfig+0x43a>
 8000900:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000904:	fab3 f383 	clz	r3, r3
 8000908:	440b      	add	r3, r1
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800090e:	f7ff fc5d 	bl	80001cc <HAL_GetTick>
 8000912:	2602      	movs	r6, #2
 8000914:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000916:	4fa4      	ldr	r7, [pc, #656]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 8000918:	fa96 f3a6 	rbit	r3, r6
 800091c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800091e:	fa96 f3a6 	rbit	r3, r6
 8000922:	fab3 f383 	clz	r3, r3
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	fa05 f303 	lsl.w	r3, r5, r3
 800092e:	4213      	tst	r3, r2
 8000930:	f47f ae51 	bne.w	80005d6 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000934:	f7ff fc4a 	bl	80001cc <HAL_GetTick>
 8000938:	eba0 0008 	sub.w	r0, r0, r8
 800093c:	2802      	cmp	r0, #2
 800093e:	d9eb      	bls.n	8000918 <HAL_RCC_OscConfig+0x410>
 8000940:	e69e      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
 8000942:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	440b      	add	r3, r1
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000950:	f7ff fc3c 	bl	80001cc <HAL_GetTick>
 8000954:	2602      	movs	r6, #2
 8000956:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000958:	4f93      	ldr	r7, [pc, #588]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 800095a:	fa96 f3a6 	rbit	r3, r6
 800095e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000960:	fa96 f3a6 	rbit	r3, r6
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	fa05 f303 	lsl.w	r3, r5, r3
 8000970:	4213      	tst	r3, r2
 8000972:	f43f ae30 	beq.w	80005d6 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000976:	f7ff fc29 	bl	80001cc <HAL_GetTick>
 800097a:	eba0 0008 	sub.w	r0, r0, r8
 800097e:	2802      	cmp	r0, #2
 8000980:	d9eb      	bls.n	800095a <HAL_RCC_OscConfig+0x452>
 8000982:	e67d      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000984:	4b88      	ldr	r3, [pc, #544]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 8000986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000988:	00d1      	lsls	r1, r2, #3
 800098a:	d434      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 800098c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000990:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
 8000996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a0:	4d82      	ldr	r5, [pc, #520]	; (8000bac <HAL_RCC_OscConfig+0x6a4>)
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	05da      	lsls	r2, r3, #23
 80009a6:	d528      	bpl.n	80009fa <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a8:	68a3      	ldr	r3, [r4, #8]
 80009aa:	4d7f      	ldr	r5, [pc, #508]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d134      	bne.n	8000a1a <HAL_RCC_OscConfig+0x512>
 80009b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009b8:	f7ff fc08 	bl	80001cc <HAL_GetTick>
 80009bc:	f44f 7500 	mov.w	r5, #512	; 0x200
 80009c0:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c2:	2701      	movs	r7, #1
 80009c4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000ba8 <HAL_RCC_OscConfig+0x6a0>
 80009c8:	fa95 f3a5 	rbit	r3, r5
 80009cc:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80009d0:	fa95 f3a5 	rbit	r3, r5
 80009d4:	fab3 f383 	clz	r3, r3
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	fa07 f303 	lsl.w	r3, r7, r3
 80009e0:	4213      	tst	r3, r2
 80009e2:	d04e      	beq.n	8000a82 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	f43f adfa 	beq.w	80005de <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ea:	4a6f      	ldr	r2, [pc, #444]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 80009ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6253      	str	r3, [r2, #36]	; 0x24
 80009f4:	e5f3      	b.n	80005de <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80009f6:	2600      	movs	r6, #0
 80009f8:	e7d2      	b.n	80009a0 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a00:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a02:	f7ff fbe3 	bl	80001cc <HAL_GetTick>
 8000a06:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	05db      	lsls	r3, r3, #23
 8000a0c:	d4cc      	bmi.n	80009a8 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a0e:	f7ff fbdd 	bl	80001cc <HAL_GetTick>
 8000a12:	1bc0      	subs	r0, r0, r7
 8000a14:	2864      	cmp	r0, #100	; 0x64
 8000a16:	d9f7      	bls.n	8000a08 <HAL_RCC_OscConfig+0x500>
 8000a18:	e632      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1a:	bb23      	cbnz	r3, 8000a66 <HAL_RCC_OscConfig+0x55e>
 8000a1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a1e:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000a22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a26:	636b      	str	r3, [r5, #52]	; 0x34
 8000a28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a2a:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a32:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a34:	f7ff fbca 	bl	80001cc <HAL_GetTick>
 8000a38:	4681      	mov	r9, r0
 8000a3a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a3e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a40:	fa97 f3a7 	rbit	r3, r7
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	f003 031f 	and.w	r3, r3, #31
 8000a4c:	fa08 f303 	lsl.w	r3, r8, r3
 8000a50:	4213      	tst	r3, r2
 8000a52:	d0c7      	beq.n	80009e4 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a54:	f7ff fbba 	bl	80001cc <HAL_GetTick>
 8000a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a5c:	eba0 0009 	sub.w	r0, r0, r9
 8000a60:	4298      	cmp	r0, r3
 8000a62:	d9ea      	bls.n	8000a3a <HAL_RCC_OscConfig+0x532>
 8000a64:	e60c      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a6a:	d103      	bne.n	8000a74 <HAL_RCC_OscConfig+0x56c>
 8000a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a70:	636b      	str	r3, [r5, #52]	; 0x34
 8000a72:	e79d      	b.n	80009b0 <HAL_RCC_OscConfig+0x4a8>
 8000a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a78:	636b      	str	r3, [r5, #52]	; 0x34
 8000a7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a80:	e799      	b.n	80009b6 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a82:	f7ff fba3 	bl	80001cc <HAL_GetTick>
 8000a86:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a8a:	eba0 0009 	sub.w	r0, r0, r9
 8000a8e:	4298      	cmp	r0, r3
 8000a90:	d99a      	bls.n	80009c8 <HAL_RCC_OscConfig+0x4c0>
 8000a92:	e5f5      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a94:	4d44      	ldr	r5, [pc, #272]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 8000a96:	68ab      	ldr	r3, [r5, #8]
 8000a98:	f003 030c 	and.w	r3, r3, #12
 8000a9c:	2b0c      	cmp	r3, #12
 8000a9e:	f43f adc8 	beq.w	8000632 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa2:	2a02      	cmp	r2, #2
 8000aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa8:	d156      	bne.n	8000b58 <HAL_RCC_OscConfig+0x650>
 8000aaa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000aae:	fab3 f383 	clz	r3, r3
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ab8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fb84 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ac4:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000ac6:	4680      	mov	r8, r0
 8000ac8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000acc:	2501      	movs	r5, #1
 8000ace:	fa97 f3a7 	rbit	r3, r7
 8000ad2:	6832      	ldr	r2, [r6, #0]
 8000ad4:	fa97 f3a7 	rbit	r3, r7
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	f003 031f 	and.w	r3, r3, #31
 8000ae0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ae4:	4213      	tst	r3, r2
 8000ae6:	d130      	bne.n	8000b4a <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ae8:	68b2      	ldr	r2, [r6, #8]
 8000aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000aee:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000af2:	430b      	orrs	r3, r1
 8000af4:	4313      	orrs	r3, r2
 8000af6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60b3      	str	r3, [r6, #8]
 8000afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b00:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000b04:	fab3 f383 	clz	r3, r3
 8000b08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b0c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000b14:	f7ff fb5a 	bl	80001cc <HAL_GetTick>
 8000b18:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b1e:	2501      	movs	r5, #1
 8000b20:	4e21      	ldr	r6, [pc, #132]	; (8000ba8 <HAL_RCC_OscConfig+0x6a0>)
 8000b22:	fa94 f3a4 	rbit	r3, r4
 8000b26:	6832      	ldr	r2, [r6, #0]
 8000b28:	fa94 f3a4 	rbit	r3, r4
 8000b2c:	fab3 f383 	clz	r3, r3
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	fa05 f303 	lsl.w	r3, r5, r3
 8000b38:	4213      	tst	r3, r2
 8000b3a:	f47f ad54 	bne.w	80005e6 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3e:	f7ff fb45 	bl	80001cc <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	2802      	cmp	r0, #2
 8000b46:	d9ec      	bls.n	8000b22 <HAL_RCC_OscConfig+0x61a>
 8000b48:	e59a      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fb3f 	bl	80001cc <HAL_GetTick>
 8000b4e:	eba0 0008 	sub.w	r0, r0, r8
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9bb      	bls.n	8000ace <HAL_RCC_OscConfig+0x5c6>
 8000b56:	e593      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
 8000b58:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b5c:	fab3 f383 	clz	r3, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b66:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fb2d 	bl	80001cc <HAL_GetTick>
 8000b72:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b76:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b78:	2601      	movs	r6, #1
 8000b7a:	fa94 f3a4 	rbit	r3, r4
 8000b7e:	682a      	ldr	r2, [r5, #0]
 8000b80:	fa94 f3a4 	rbit	r3, r4
 8000b84:	fab3 f383 	clz	r3, r3
 8000b88:	f003 031f 	and.w	r3, r3, #31
 8000b8c:	fa06 f303 	lsl.w	r3, r6, r3
 8000b90:	4213      	tst	r3, r2
 8000b92:	f43f ad28 	beq.w	80005e6 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fb19 	bl	80001cc <HAL_GetTick>
 8000b9a:	1bc0      	subs	r0, r0, r7
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9ec      	bls.n	8000b7a <HAL_RCC_OscConfig+0x672>
 8000ba0:	e56e      	b.n	8000680 <HAL_RCC_OscConfig+0x178>
 8000ba2:	bf00      	nop
 8000ba4:	1091c1a0 	.word	0x1091c1a0
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000bb0:	491e      	ldr	r1, [pc, #120]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000bb2:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000bb4:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000bb6:	f003 020c 	and.w	r2, r3, #12
 8000bba:	2a08      	cmp	r2, #8
 8000bbc:	d005      	beq.n	8000bca <HAL_RCC_GetSysClockFreq+0x1a>
 8000bbe:	2a0c      	cmp	r2, #12
 8000bc0:	d005      	beq.n	8000bce <HAL_RCC_GetSysClockFreq+0x1e>
 8000bc2:	2a04      	cmp	r2, #4
 8000bc4:	d122      	bne.n	8000c0c <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000bc6:	481a      	ldr	r0, [pc, #104]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000bc8:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000bca:	481a      	ldr	r0, [pc, #104]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x84>)
 8000bcc:	bd10      	pop	{r4, pc}
 8000bce:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000bd2:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000bde:	fa20 f202 	lsr.w	r2, r0, r2
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <HAL_RCC_GetSysClockFreq+0x88>)
 8000be4:	5c84      	ldrb	r4, [r0, r2]
 8000be6:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000bea:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bee:	fab0 f280 	clz	r2, r0
 8000bf2:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf6:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bf8:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bfa:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000bfc:	bf4c      	ite	mi
 8000bfe:	4b0d      	ldrmi	r3, [pc, #52]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000c00:	4b0b      	ldrpl	r3, [pc, #44]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000c02:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000c04:	4363      	muls	r3, r4
 8000c06:	fbb3 f0f0 	udiv	r0, r3, r0
 8000c0a:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000c0c:	6848      	ldr	r0, [r1, #4]
 8000c0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c12:	fa93 f3a3 	rbit	r3, r3
 8000c16:	fab3 f383 	clz	r3, r3
 8000c1a:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000c1e:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000c20:	1c43      	adds	r3, r0, #1
 8000c22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c26:	4098      	lsls	r0, r3
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	007a1200 	.word	0x007a1200
 8000c38:	08001480 	.word	0x08001480

08000c3c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c3c:	4b6a      	ldr	r3, [pc, #424]	; (8000de8 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c42:	681a      	ldr	r2, [r3, #0]
{
 8000c44:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c46:	f002 0201 	and.w	r2, r2, #1
 8000c4a:	428a      	cmp	r2, r1
{
 8000c4c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c4e:	d330      	bcc.n	8000cb2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c50:	6832      	ldr	r2, [r6, #0]
 8000c52:	0794      	lsls	r4, r2, #30
 8000c54:	d440      	bmi.n	8000cd8 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c56:	07d0      	lsls	r0, r2, #31
 8000c58:	d446      	bmi.n	8000ce8 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c5a:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <HAL_RCC_ClockConfig+0x1ac>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f002 0201 	and.w	r2, r2, #1
 8000c62:	4295      	cmp	r5, r2
 8000c64:	f0c0 80ae 	bcc.w	8000dc4 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c68:	6832      	ldr	r2, [r6, #0]
 8000c6a:	0751      	lsls	r1, r2, #29
 8000c6c:	f100 80b3 	bmi.w	8000dd6 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c70:	0713      	lsls	r3, r2, #28
 8000c72:	d507      	bpl.n	8000c84 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c74:	4a5d      	ldr	r2, [pc, #372]	; (8000dec <HAL_RCC_ClockConfig+0x1b0>)
 8000c76:	6931      	ldr	r1, [r6, #16]
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c84:	f7ff ff94 	bl	8000bb0 <HAL_RCC_GetSysClockFreq>
 8000c88:	4b58      	ldr	r3, [pc, #352]	; (8000dec <HAL_RCC_ClockConfig+0x1b0>)
 8000c8a:	22f0      	movs	r2, #240	; 0xf0
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	fa92 f2a2 	rbit	r2, r2
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	4a54      	ldr	r2, [pc, #336]	; (8000df0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	40d8      	lsrs	r0, r3
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <HAL_RCC_ClockConfig+0x1b8>)
 8000ca4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fa68 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8000cac:	2000      	movs	r0, #0
}
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb2:	2901      	cmp	r1, #1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	681a      	ldreq	r2, [r3, #0]
 8000cb8:	f042 0204 	orreq.w	r2, r2, #4
 8000cbc:	601a      	streq	r2, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d0be      	beq.n	8000c50 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd8:	4944      	ldr	r1, [pc, #272]	; (8000dec <HAL_RCC_ClockConfig+0x1b0>)
 8000cda:	68b0      	ldr	r0, [r6, #8]
 8000cdc:	688b      	ldr	r3, [r1, #8]
 8000cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	608b      	str	r3, [r1, #8]
 8000ce6:	e7b6      	b.n	8000c56 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce8:	6872      	ldr	r2, [r6, #4]
 8000cea:	4940      	ldr	r1, [pc, #256]	; (8000dec <HAL_RCC_ClockConfig+0x1b0>)
 8000cec:	2a02      	cmp	r2, #2
 8000cee:	d10f      	bne.n	8000d10 <HAL_RCC_ClockConfig+0xd4>
 8000cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000cf8:	6808      	ldr	r0, [r1, #0]
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	2101      	movs	r1, #1
 8000d04:	f003 031f 	and.w	r3, r3, #31
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	4203      	tst	r3, r0
 8000d0e:	e013      	b.n	8000d38 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d10:	2a03      	cmp	r2, #3
 8000d12:	d102      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xde>
 8000d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d18:	e7ec      	b.n	8000cf4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d1a:	2a01      	cmp	r2, #1
 8000d1c:	d129      	bne.n	8000d72 <HAL_RCC_ClockConfig+0x136>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d24:	6809      	ldr	r1, [r1, #0]
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	fab3 f383 	clz	r3, r3
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000d38:	d0cb      	beq.n	8000cd2 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d3a:	4c2c      	ldr	r4, [pc, #176]	; (8000dec <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d40:	68a3      	ldr	r3, [r4, #8]
 8000d42:	f023 0303 	bic.w	r3, r3, #3
 8000d46:	431a      	orrs	r2, r3
 8000d48:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000d4a:	f7ff fa3f 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4e:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d50:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d110      	bne.n	8000d78 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d56:	68a3      	ldr	r3, [r4, #8]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	f43f af7c 	beq.w	8000c5a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d62:	f7ff fa33 	bl	80001cc <HAL_GetTick>
 8000d66:	1bc0      	subs	r0, r0, r7
 8000d68:	4540      	cmp	r0, r8
 8000d6a:	d9f4      	bls.n	8000d56 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d76:	e7bd      	b.n	8000cf4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d10b      	bne.n	8000d94 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7c:	68a3      	ldr	r3, [r4, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b0c      	cmp	r3, #12
 8000d84:	f43f af69 	beq.w	8000c5a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d88:	f7ff fa20 	bl	80001cc <HAL_GetTick>
 8000d8c:	1bc0      	subs	r0, r0, r7
 8000d8e:	4540      	cmp	r0, r8
 8000d90:	d9f4      	bls.n	8000d7c <HAL_RCC_ClockConfig+0x140>
 8000d92:	e7eb      	b.n	8000d6c <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d110      	bne.n	8000dba <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d98:	68a3      	ldr	r3, [r4, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	f43f af5b 	beq.w	8000c5a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da4:	f7ff fa12 	bl	80001cc <HAL_GetTick>
 8000da8:	1bc0      	subs	r0, r0, r7
 8000daa:	4540      	cmp	r0, r8
 8000dac:	d9f4      	bls.n	8000d98 <HAL_RCC_ClockConfig+0x15c>
 8000dae:	e7dd      	b.n	8000d6c <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db0:	f7ff fa0c 	bl	80001cc <HAL_GetTick>
 8000db4:	1bc0      	subs	r0, r0, r7
 8000db6:	4540      	cmp	r0, r8
 8000db8:	d8d8      	bhi.n	8000d6c <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000dba:	68a3      	ldr	r3, [r4, #8]
 8000dbc:	f013 0f0c 	tst.w	r3, #12
 8000dc0:	d1f6      	bne.n	8000db0 <HAL_RCC_ClockConfig+0x174>
 8000dc2:	e74a      	b.n	8000c5a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f022 0201 	bic.w	r2, r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	07da      	lsls	r2, r3, #31
 8000dd0:	f53f af7f 	bmi.w	8000cd2 <HAL_RCC_ClockConfig+0x96>
 8000dd4:	e748      	b.n	8000c68 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dd6:	4905      	ldr	r1, [pc, #20]	; (8000dec <HAL_RCC_ClockConfig+0x1b0>)
 8000dd8:	68f0      	ldr	r0, [r6, #12]
 8000dda:	688b      	ldr	r3, [r1, #8]
 8000ddc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000de0:	4303      	orrs	r3, r0
 8000de2:	608b      	str	r3, [r1, #8]
 8000de4:	e744      	b.n	8000c70 <HAL_RCC_ClockConfig+0x34>
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00
 8000dec:	40023800 	.word	0x40023800
 8000df0:	08001468 	.word	0x08001468
 8000df4:	20000000 	.word	0x20000000

08000df8 <HAL_RCC_GetHCLKFreq>:
}
 8000df8:	4b01      	ldr	r3, [pc, #4]	; (8000e00 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000

08000e04 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	fa92 f2a2 	rbit	r2, r2
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e18:	40d3      	lsrs	r3, r2
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000e20:	6810      	ldr	r0, [r2, #0]
}    
 8000e22:	40d8      	lsrs	r0, r3
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	08001478 	.word	0x08001478
 8000e30:	20000000 	.word	0x20000000

08000e34 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	fa92 f2a2 	rbit	r2, r2
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e48:	40d3      	lsrs	r3, r2
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e4c:	5cd3      	ldrb	r3, [r2, r3]
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e50:	6810      	ldr	r0, [r2, #0]
} 
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	08001478 	.word	0x08001478
 8000e60:	20000000 	.word	0x20000000

08000e64 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e6a:	6805      	ldr	r5, [r0, #0]
 8000e6c:	68c2      	ldr	r2, [r0, #12]
 8000e6e:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e70:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e76:	4313      	orrs	r3, r2
 8000e78:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e7a:	6883      	ldr	r3, [r0, #8]
 8000e7c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8000e7e:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e80:	4303      	orrs	r3, r0
 8000e82:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000e86:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e8a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8000e8c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e90:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e96:	696b      	ldr	r3, [r5, #20]
 8000e98:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8000e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ea0:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ea2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ea6:	616b      	str	r3, [r5, #20]
 8000ea8:	4b7e      	ldr	r3, [pc, #504]	; (80010a4 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000eaa:	d17f      	bne.n	8000fac <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8000eac:	429d      	cmp	r5, r3
 8000eae:	f04f 0419 	mov.w	r4, #25
 8000eb2:	d147      	bne.n	8000f44 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000eb4:	f7ff ffbe 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000eb8:	fb04 f300 	mul.w	r3, r4, r0
 8000ebc:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000ec0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ec4:	007f      	lsls	r7, r7, #1
 8000ec6:	fbb3 f3f7 	udiv	r3, r3, r7
 8000eca:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ece:	011f      	lsls	r7, r3, #4
 8000ed0:	f7ff ffb0 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000ed4:	4360      	muls	r0, r4
 8000ed6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fbb0 f6f3 	udiv	r6, r0, r3
 8000ee0:	f7ff ffa8 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000ee4:	4360      	muls	r0, r4
 8000ee6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ef0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ef4:	fb08 6313 	mls	r3, r8, r3, r6
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	3332      	adds	r3, #50	; 0x32
 8000efc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000f06:	f7ff ff95 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000f0a:	4360      	muls	r0, r4
 8000f0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	fbb0 faf2 	udiv	sl, r0, r2
 8000f16:	f7ff ff8d 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f1a:	4360      	muls	r0, r4
 8000f1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f26:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f2a:	fb08 a313 	mls	r3, r8, r3, sl
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	3332      	adds	r3, #50	; 0x32
 8000f32:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f3c:	4433      	add	r3, r6
 8000f3e:	60ab      	str	r3, [r5, #8]
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f44:	f7ff ff5e 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8000f48:	fb04 f300 	mul.w	r3, r4, r0
 8000f4c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000f50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f54:	007f      	lsls	r7, r7, #1
 8000f56:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f5a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f5e:	011f      	lsls	r7, r3, #4
 8000f60:	f7ff ff50 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8000f64:	4360      	muls	r0, r4
 8000f66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fbb0 f6f3 	udiv	r6, r0, r3
 8000f70:	f7ff ff48 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8000f74:	4360      	muls	r0, r4
 8000f76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f80:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f84:	fb08 6313 	mls	r3, r8, r3, r6
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	3332      	adds	r3, #50	; 0x32
 8000f8c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000f96:	f7ff ff35 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8000f9a:	4360      	muls	r0, r4
 8000f9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fa0:	0052      	lsls	r2, r2, #1
 8000fa2:	fbb0 faf2 	udiv	sl, r0, r2
 8000fa6:	f7ff ff2d 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8000faa:	e7b6      	b.n	8000f1a <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8000fac:	429d      	cmp	r5, r3
 8000fae:	f04f 0419 	mov.w	r4, #25
 8000fb2:	d143      	bne.n	800103c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fb4:	f7ff ff3e 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000fb8:	fb04 f300 	mul.w	r3, r4, r0
 8000fbc:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000fc0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000fc4:	00b6      	lsls	r6, r6, #2
 8000fc6:	fbb3 f3f6 	udiv	r3, r3, r6
 8000fca:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fce:	011e      	lsls	r6, r3, #4
 8000fd0:	f7ff ff30 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000fd4:	4360      	muls	r0, r4
 8000fd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fe0:	f7ff ff28 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8000fe4:	4360      	muls	r0, r4
 8000fe6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ff4:	fb08 7313 	mls	r3, r8, r3, r7
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	3332      	adds	r3, #50	; 0x32
 8000ffc:	fbb3 f3f8 	udiv	r3, r3, r8
 8001000:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001004:	f7ff ff16 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
 8001008:	4360      	muls	r0, r4
 800100a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	fbb0 faf2 	udiv	sl, r0, r2
 8001014:	f7ff ff0e 	bl	8000e34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001018:	4360      	muls	r0, r4
 800101a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fbb0 f3f3 	udiv	r3, r0, r3
 8001024:	fbb3 f3f8 	udiv	r3, r3, r8
 8001028:	fb08 a313 	mls	r3, r8, r3, sl
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	3332      	adds	r3, #50	; 0x32
 8001030:	fbb3 f3f8 	udiv	r3, r3, r8
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	433b      	orrs	r3, r7
 800103a:	e77f      	b.n	8000f3c <UART_SetConfig+0xd8>
 800103c:	f7ff fee2 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8001040:	fb04 f300 	mul.w	r3, r4, r0
 8001044:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001048:	f04f 0864 	mov.w	r8, #100	; 0x64
 800104c:	00b6      	lsls	r6, r6, #2
 800104e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001052:	fbb3 f3f8 	udiv	r3, r3, r8
 8001056:	011e      	lsls	r6, r3, #4
 8001058:	f7ff fed4 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 800105c:	4360      	muls	r0, r4
 800105e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	fbb0 f7f3 	udiv	r7, r0, r3
 8001068:	f7ff fecc 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 800106c:	4360      	muls	r0, r4
 800106e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fbb0 f3f3 	udiv	r3, r0, r3
 8001078:	fbb3 f3f8 	udiv	r3, r3, r8
 800107c:	fb08 7313 	mls	r3, r8, r3, r7
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	3332      	adds	r3, #50	; 0x32
 8001084:	fbb3 f3f8 	udiv	r3, r3, r8
 8001088:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800108c:	f7ff feba 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 8001090:	4360      	muls	r0, r4
 8001092:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	fbb0 faf2 	udiv	sl, r0, r2
 800109c:	f7ff feb2 	bl	8000e04 <HAL_RCC_GetPCLK1Freq>
 80010a0:	e7ba      	b.n	8001018 <UART_SetConfig+0x1b4>
 80010a2:	bf00      	nop
 80010a4:	40013800 	.word	0x40013800

080010a8 <HAL_UART_Init>:
{
 80010a8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80010aa:	4604      	mov	r4, r0
 80010ac:	b330      	cbz	r0, 80010fc <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 80010ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010b6:	b91b      	cbnz	r3, 80010c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80010b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80010bc:	f000 f924 	bl	8001308 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 80010c0:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 80010c2:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80010c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80010c8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80010ca:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80010cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010d2:	f7ff fec7 	bl	8000e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010d6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010d8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010e8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010f0:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 80010f2:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80010f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80010fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010fc:	2001      	movs	r0, #1
}
 80010fe:	bd10      	pop	{r4, pc}

08001100 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <SystemClock_Config+0x7c>)
{
 8001102:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	6813      	ldr	r3, [r2, #0]
{
 8001106:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800110c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001110:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001118:	2300      	movs	r3, #0
 800111a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800111c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001120:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001122:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001124:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001126:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800112e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001130:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f7ff f9e9 	bl	8000508 <HAL_RCC_OscConfig>
 8001136:	b100      	cbz	r0, 800113a <SystemClock_Config+0x3a>
 8001138:	e7fe      	b.n	8001138 <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	220f      	movs	r2, #15
 800113c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001140:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001144:	4621      	mov	r1, r4
 8001146:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114c:	f7ff fd76 	bl	8000c3c <HAL_RCC_ClockConfig>
 8001150:	4604      	mov	r4, r0
 8001152:	b100      	cbz	r0, 8001156 <SystemClock_Config+0x56>
 8001154:	e7fe      	b.n	8001154 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001156:	f7ff fe4f 	bl	8000df8 <HAL_RCC_GetHCLKFreq>
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001162:	f7ff f88d 	bl	8000280 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff f8a0 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800116c:	4622      	mov	r2, r4
 800116e:	4621      	mov	r1, r4
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff f850 	bl	8000218 <HAL_NVIC_SetPriority>
}
 8001178:	b012      	add	sp, #72	; 0x48
 800117a:	bd10      	pop	{r4, pc}
 800117c:	40007000 	.word	0x40007000

08001180 <main>:
{
 8001180:	b510      	push	{r4, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001184:	f7ff f80e 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001188:	f7ff ffba 	bl	8001100 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <main+0xd0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800118e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001190:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001192:	4830      	ldr	r0, [pc, #192]	; (8001254 <main+0xd4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	f042 0204 	orr.w	r2, r2, #4
 8001198:	61da      	str	r2, [r3, #28]
 800119a:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	f002 0204 	and.w	r2, r2, #4
 80011a2:	9201      	str	r2, [sp, #4]
 80011a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	69da      	ldr	r2, [r3, #28]
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	61da      	str	r2, [r3, #28]
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	f002 0220 	and.w	r2, r2, #32
 80011b4:	9202      	str	r2, [sp, #8]
 80011b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	61da      	str	r2, [r3, #28]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	f002 0201 	and.w	r2, r2, #1
 80011c6:	9203      	str	r2, [sp, #12]
 80011c8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	f042 0202 	orr.w	r2, r2, #2
 80011d0:	61da      	str	r2, [r3, #28]
 80011d2:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	9304      	str	r3, [sp, #16]
 80011dc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011de:	f7ff f949 	bl	8000474 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80011e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <main+0xd8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ea:	a905      	add	r1, sp, #20
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <main+0xdc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f7ff f86d 	bl	80002d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f6:	2320      	movs	r3, #32
 80011f8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011fc:	4815      	ldr	r0, [pc, #84]	; (8001254 <main+0xd4>)
 80011fe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001206:	f7ff f863 	bl	80002d0 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 800120a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <main+0xe0>)
  huart2.Init.BaudRate = 115200;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <main+0xe4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001214:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121e:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001220:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001222:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001224:	f7ff ff40 	bl	80010a8 <HAL_UART_Init>
 8001228:	b988      	cbnz	r0, 800124e <main+0xce>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800122a:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <main+0xd4>)
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800122c:	2120      	movs	r1, #32
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff f925 	bl	800047e <HAL_GPIO_TogglePin>
	  HAL_Delay(BLINK_TICKS1);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f7fe ffce 	bl	80001d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800123c:	4620      	mov	r0, r4
 800123e:	2120      	movs	r1, #32
 8001240:	f7ff f91d 	bl	800047e <HAL_GPIO_TogglePin>
	  HAL_Delay(BLINK_TICKS2);
 8001244:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001248:	f7fe ffc6 	bl	80001d8 <HAL_Delay>
 800124c:	e7ee      	b.n	800122c <main+0xac>
 800124e:	e7fe      	b.n	800124e <main+0xce>
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	10110000 	.word	0x10110000
 800125c:	40020800 	.word	0x40020800
 8001260:	20000024 	.word	0x20000024
 8001264:	40004400 	.word	0x40004400

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126c:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 800126e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001270:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
 8001276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001278:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	f042 0201 	orr.w	r2, r2, #1
 8001286:	621a      	str	r2, [r3, #32]
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	f002 0201 	and.w	r2, r2, #1
 800128e:	9202      	str	r2, [sp, #8]
 8001290:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001294:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a4:	f7fe ffa6 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f06f 000b 	mvn.w	r0, #11
 80012ae:	4611      	mov	r1, r2
 80012b0:	f7fe ffb2 	bl	8000218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f06f 000a 	mvn.w	r0, #10
 80012ba:	4611      	mov	r1, r2
 80012bc:	f7fe ffac 	bl	8000218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f06f 0009 	mvn.w	r0, #9
 80012c6:	4611      	mov	r1, r2
 80012c8:	f7fe ffa6 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f06f 0004 	mvn.w	r0, #4
 80012d2:	4611      	mov	r1, r2
 80012d4:	f7fe ffa0 	bl	8000218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	f06f 0003 	mvn.w	r0, #3
 80012de:	4611      	mov	r1, r2
 80012e0:	f7fe ff9a 	bl	8000218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f06f 0001 	mvn.w	r0, #1
 80012ea:	4611      	mov	r1, r2
 80012ec:	f7fe ff94 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f04f 30ff 	mov.w	r0, #4294967295
 80012f6:	4611      	mov	r1, r2
 80012f8:	f7fe ff8e 	bl	8000218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	b005      	add	sp, #20
 80012fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800130a:	6802      	ldr	r2, [r0, #0]
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_UART_MspInit+0x44>)
 800130e:	429a      	cmp	r2, r3
 8001310:	d118      	bne.n	8001344 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001312:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800131a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800132c:	230c      	movs	r3, #12
 800132e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800133c:	2307      	movs	r3, #7
 800133e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f7fe ffc6 	bl	80002d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001344:	b007      	add	sp, #28
 8001346:	f85d fb04 	ldr.w	pc, [sp], #4
 800134a:	bf00      	nop
 800134c:	40004400 	.word	0x40004400
 8001350:	40020000 	.word	0x40020000

08001354 <NMI_Handler>:
 8001354:	4770      	bx	lr

08001356 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler>

08001358 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler>

0800135a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800135a:	e7fe      	b.n	800135a <BusFault_Handler>

0800135c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler>

0800135e <SVC_Handler>:
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001364:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f7fe ff29 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800136e:	f7fe bfaa 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>
	...

08001374 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <SystemInit+0x3c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800137c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800137e:	6899      	ldr	r1, [r3, #8]
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <SystemInit+0x40>)
 8001382:	400a      	ands	r2, r1
 8001384:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800138c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001390:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001398:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80013a0:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <SystemInit+0x44>)
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	4770      	bx	lr
 80013b0:	40023800 	.word	0x40023800
 80013b4:	88ffc00c 	.word	0x88ffc00c
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013be:	e003      	b.n	80013c8 <LoopCopyDataInit>

080013c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013c6:	3104      	adds	r1, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013d0:	d3f6      	bcc.n	80013c0 <CopyDataInit>
  ldr r2, =_sbss
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013d4:	e002      	b.n	80013dc <LoopFillZerobss>

080013d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013d8:	f842 3b04 	str.w	r3, [r2], #4

080013dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013e0:	d3f9      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e2:	f7ff ffc7 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f000 f80f 	bl	8001408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ea:	f7ff fec9 	bl	8001180 <main>
  bx lr
 80013ee:	4770      	bx	lr
  ldr r3, =_sidata
 80013f0:	08001494 	.word	0x08001494
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013f8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80013fc:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001400:	20000064 	.word	0x20000064

08001404 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC1_IRQHandler>
	...

08001408 <__libc_init_array>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	2500      	movs	r5, #0
 800140c:	4e0c      	ldr	r6, [pc, #48]	; (8001440 <__libc_init_array+0x38>)
 800140e:	4c0d      	ldr	r4, [pc, #52]	; (8001444 <__libc_init_array+0x3c>)
 8001410:	1ba4      	subs	r4, r4, r6
 8001412:	10a4      	asrs	r4, r4, #2
 8001414:	42a5      	cmp	r5, r4
 8001416:	d109      	bne.n	800142c <__libc_init_array+0x24>
 8001418:	f000 f81a 	bl	8001450 <_init>
 800141c:	2500      	movs	r5, #0
 800141e:	4e0a      	ldr	r6, [pc, #40]	; (8001448 <__libc_init_array+0x40>)
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <__libc_init_array+0x44>)
 8001422:	1ba4      	subs	r4, r4, r6
 8001424:	10a4      	asrs	r4, r4, #2
 8001426:	42a5      	cmp	r5, r4
 8001428:	d105      	bne.n	8001436 <__libc_init_array+0x2e>
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001430:	4798      	blx	r3
 8001432:	3501      	adds	r5, #1
 8001434:	e7ee      	b.n	8001414 <__libc_init_array+0xc>
 8001436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800143a:	4798      	blx	r3
 800143c:	3501      	adds	r5, #1
 800143e:	e7f2      	b.n	8001426 <__libc_init_array+0x1e>
 8001440:	0800148c 	.word	0x0800148c
 8001444:	0800148c 	.word	0x0800148c
 8001448:	0800148c 	.word	0x0800148c
 800144c:	08001490 	.word	0x08001490

08001450 <_init>:
 8001450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001452:	bf00      	nop
 8001454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001456:	bc08      	pop	{r3}
 8001458:	469e      	mov	lr, r3
 800145a:	4770      	bx	lr

0800145c <_fini>:
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	bf00      	nop
 8001460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001462:	bc08      	pop	{r3}
 8001464:	469e      	mov	lr, r3
 8001466:	4770      	bx	lr
