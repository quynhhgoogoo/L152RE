
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000259c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080026d8  080026d8  000126d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  20000068  080027a8  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000012c  080027a8  0002012c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e8f2  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bcb  00000000  00000000  0002e983  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004892  00000000  00000000  0003054e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005b8  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b70  00000000  00000000  00035398  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000048fe  00000000  00000000  00035f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002771  00000000  00000000  0003a806  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003cf77  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001384  00000000  00000000  0003cff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	080026c0 	.word	0x080026c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	080026c0 	.word	0x080026c0

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f878 	bl	8000280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 f83e 	bl	8000218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f824 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 fd37 	bl	8001c24 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000090 	.word	0x20000090

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000090 	.word	0x20000090

080001d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001d8:	b513      	push	{r0, r1, r4, lr}
 80001da:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001dc:	f7ff fff6 	bl	80001cc <HAL_GetTick>
 80001e0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001e2:	f7ff fff3 	bl	80001cc <HAL_GetTick>
 80001e6:	9b01      	ldr	r3, [sp, #4]
 80001e8:	1b00      	subs	r0, r0, r4
 80001ea:	4298      	cmp	r0, r3
 80001ec:	d3f9      	bcc.n	80001e2 <HAL_Delay+0xa>
  {
  }
}
 80001ee:	b002      	add	sp, #8
 80001f0:	bd10      	pop	{r4, pc}
	...

080001f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000202:	041b      	lsls	r3, r3, #16
 8000204:	0c1b      	lsrs	r3, r3, #16
 8000206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800020a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800020e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000210:	60d3      	str	r3, [r2, #12]
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800021a:	b530      	push	{r4, r5, lr}
 800021c:	68dc      	ldr	r4, [r3, #12]
 800021e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000228:	2b04      	cmp	r3, #4
 800022a:	bf28      	it	cs
 800022c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	bf98      	it	ls
 8000236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	fa05 f303 	lsl.w	r3, r5, r3
 800023c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf88      	it	hi
 8000242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	4019      	ands	r1, r3
 8000246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	3c01      	subs	r4, #1
 800024e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000252:	ea42 0201 	orr.w	r2, r2, r1
 8000256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	bfaf      	iteee	ge
 800025c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	4b06      	ldrlt	r3, [pc, #24]	; (800027c <HAL_NVIC_SetPriority+0x64>)
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	bfa5      	ittet	ge
 800026a:	b2d2      	uxtbge	r2, r2
 800026c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000276:	bd30      	pop	{r4, r5, pc}
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	e000ed14 	.word	0xe000ed14

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002ac:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ae:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	bf0c      	ite	eq
 80002b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b8:	f022 0204 	bicne.w	r2, r2, #4
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002c4:	4770      	bx	lr

080002c6 <HAL_SYSTICK_IRQHandler>:
{
 80002c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c8:	f7ff fffc 	bl	80002c4 <HAL_SYSTICK_Callback>
 80002cc:	bd08      	pop	{r3, pc}
	...

080002d0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002d0:	2300      	movs	r3, #0
{ 
 80002d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80002d6:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002da:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000470 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002de:	4a62      	ldr	r2, [pc, #392]	; (8000468 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002e0:	fa38 f403 	lsrs.w	r4, r8, r3
 80002e4:	d102      	bne.n	80002ec <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 80002e6:	b003      	add	sp, #12
 80002e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002ec:	f04f 0e01 	mov.w	lr, #1
 80002f0:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80002f4:	ea18 060e 	ands.w	r6, r8, lr
 80002f8:	f000 80a8 	beq.w	800044c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002fc:	684c      	ldr	r4, [r1, #4]
 80002fe:	f024 0710 	bic.w	r7, r4, #16
 8000302:	2f02      	cmp	r7, #2
 8000304:	d116      	bne.n	8000334 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000306:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 800030a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800030e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000312:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000316:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800031a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800031e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000322:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000326:	690d      	ldr	r5, [r1, #16]
 8000328:	fa05 f50b 	lsl.w	r5, r5, fp
 800032c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000330:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000334:	2503      	movs	r5, #3
 8000336:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800033a:	fa05 f50a 	lsl.w	r5, r5, sl
 800033e:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000340:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000344:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000348:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800034c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000350:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000352:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000356:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000358:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800035c:	d811      	bhi.n	8000382 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 800035e:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000360:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000364:	68cf      	ldr	r7, [r1, #12]
 8000366:	fa07 fc0a 	lsl.w	ip, r7, sl
 800036a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800036e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000370:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000372:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000376:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800037a:	409f      	lsls	r7, r3
 800037c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000380:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000382:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000384:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000386:	688f      	ldr	r7, [r1, #8]
 8000388:	fa07 f70a 	lsl.w	r7, r7, sl
 800038c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800038e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000390:	00e5      	lsls	r5, r4, #3
 8000392:	d55b      	bpl.n	800044c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000394:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000398:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800039c:	f023 0703 	bic.w	r7, r3, #3
 80003a0:	f045 0501 	orr.w	r5, r5, #1
 80003a4:	f8c9 5020 	str.w	r5, [r9, #32]
 80003a8:	f8d9 5020 	ldr.w	r5, [r9, #32]
 80003ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003b0:	f005 0501 	and.w	r5, r5, #1
 80003b4:	9501      	str	r5, [sp, #4]
 80003b6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003ba:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003be:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003c8:	fa0c f50e 	lsl.w	r5, ip, lr
 80003cc:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003d0:	4d26      	ldr	r5, [pc, #152]	; (800046c <HAL_GPIO_Init+0x19c>)
 80003d2:	42a8      	cmp	r0, r5
 80003d4:	d03c      	beq.n	8000450 <HAL_GPIO_Init+0x180>
 80003d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003da:	42a8      	cmp	r0, r5
 80003dc:	d03a      	beq.n	8000454 <HAL_GPIO_Init+0x184>
 80003de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e2:	42a8      	cmp	r0, r5
 80003e4:	d038      	beq.n	8000458 <HAL_GPIO_Init+0x188>
 80003e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ea:	42a8      	cmp	r0, r5
 80003ec:	d036      	beq.n	800045c <HAL_GPIO_Init+0x18c>
 80003ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f2:	42a8      	cmp	r0, r5
 80003f4:	d034      	beq.n	8000460 <HAL_GPIO_Init+0x190>
 80003f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fa:	42a8      	cmp	r0, r5
 80003fc:	d032      	beq.n	8000464 <HAL_GPIO_Init+0x194>
 80003fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000402:	42a8      	cmp	r0, r5
 8000404:	bf14      	ite	ne
 8000406:	2507      	movne	r5, #7
 8000408:	2506      	moveq	r5, #6
 800040a:	fa05 f50e 	lsl.w	r5, r5, lr
 800040e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000412:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000414:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000416:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000418:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800041c:	bf0c      	ite	eq
 800041e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000420:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000422:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000424:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000426:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800042a:	bf0c      	ite	eq
 800042c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800042e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000430:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000432:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000434:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000438:	bf0c      	ite	eq
 800043a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800043c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800043e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000440:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000442:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000444:	bf54      	ite	pl
 8000446:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000448:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800044a:	60d5      	str	r5, [r2, #12]
    position++;
 800044c:	3301      	adds	r3, #1
 800044e:	e747      	b.n	80002e0 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000450:	2500      	movs	r5, #0
 8000452:	e7da      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000454:	2501      	movs	r5, #1
 8000456:	e7d8      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000458:	2502      	movs	r5, #2
 800045a:	e7d6      	b.n	800040a <HAL_GPIO_Init+0x13a>
 800045c:	2503      	movs	r5, #3
 800045e:	e7d4      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000460:	2504      	movs	r5, #4
 8000462:	e7d2      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000464:	2505      	movs	r5, #5
 8000466:	e7d0      	b.n	800040a <HAL_GPIO_Init+0x13a>
 8000468:	40010400 	.word	0x40010400
 800046c:	40020000 	.word	0x40020000
 8000470:	40023800 	.word	0x40023800

08000474 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000474:	b10a      	cbz	r2, 800047a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000476:	6181      	str	r1, [r0, #24]
 8000478:	4770      	bx	lr
 800047a:	0409      	lsls	r1, r1, #16
 800047c:	e7fb      	b.n	8000476 <HAL_GPIO_WritePin+0x2>

0800047e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800047e:	6802      	ldr	r2, [r0, #0]
 8000480:	6953      	ldr	r3, [r2, #20]
 8000482:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000486:	d00d      	beq.n	80004a4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000488:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800048c:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800048e:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000490:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000492:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000494:	2300      	movs	r3, #0
 8000496:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000498:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800049c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80004a0:	2001      	movs	r0, #1
 80004a2:	4770      	bx	lr
  }
  return HAL_OK;
 80004a4:	4618      	mov	r0, r3
}
 80004a6:	4770      	bx	lr

080004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004ac:	4604      	mov	r4, r0
 80004ae:	4617      	mov	r7, r2
 80004b0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004b2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004b6:	b28e      	uxth	r6, r1
 80004b8:	6825      	ldr	r5, [r4, #0]
 80004ba:	f1b8 0f01 	cmp.w	r8, #1
 80004be:	bf0c      	ite	eq
 80004c0:	696b      	ldreq	r3, [r5, #20]
 80004c2:	69ab      	ldrne	r3, [r5, #24]
 80004c4:	ea36 0303 	bics.w	r3, r6, r3
 80004c8:	bf14      	ite	ne
 80004ca:	2001      	movne	r0, #1
 80004cc:	2000      	moveq	r0, #0
 80004ce:	b908      	cbnz	r0, 80004d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004d4:	696b      	ldr	r3, [r5, #20]
 80004d6:	055a      	lsls	r2, r3, #21
 80004d8:	d512      	bpl.n	8000500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80004da:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80004dc:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004e4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004e8:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004ea:	2304      	movs	r3, #4
 80004ec:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80004ee:	2300      	movs	r3, #0
      return HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80004f2:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80004f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80004f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80004fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000500:	1c7b      	adds	r3, r7, #1
 8000502:	d0d9      	beq.n	80004b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000504:	b94f      	cbnz	r7, 800051a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000506:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000508:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800050a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800050c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000510:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000514:	2003      	movs	r0, #3
 8000516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800051a:	f7ff fe57 	bl	80001cc <HAL_GetTick>
 800051e:	eba0 0009 	sub.w	r0, r0, r9
 8000522:	4287      	cmp	r7, r0
 8000524:	d2c8      	bcs.n	80004b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000526:	e7ee      	b.n	8000506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000528 <I2C_WaitOnFlagUntilTimeout>:
{
 8000528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800052c:	4604      	mov	r4, r0
 800052e:	4690      	mov	r8, r2
 8000530:	461f      	mov	r7, r3
 8000532:	9e08      	ldr	r6, [sp, #32]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000534:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000538:	b28d      	uxth	r5, r1
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f1b9 0f01 	cmp.w	r9, #1
 8000540:	bf0c      	ite	eq
 8000542:	695b      	ldreq	r3, [r3, #20]
 8000544:	699b      	ldrne	r3, [r3, #24]
 8000546:	ea35 0303 	bics.w	r3, r5, r3
 800054a:	bf0c      	ite	eq
 800054c:	2301      	moveq	r3, #1
 800054e:	2300      	movne	r3, #0
 8000550:	4543      	cmp	r3, r8
 8000552:	d002      	beq.n	800055a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000554:	2000      	movs	r0, #0
}
 8000556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800055a:	1c7b      	adds	r3, r7, #1
 800055c:	d0ed      	beq.n	800053a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800055e:	b95f      	cbnz	r7, 8000578 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000560:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000562:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000564:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000566:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800056a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800056e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000570:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000578:	f7ff fe28 	bl	80001cc <HAL_GetTick>
 800057c:	1b80      	subs	r0, r0, r6
 800057e:	4287      	cmp	r7, r0
 8000580:	d2db      	bcs.n	800053a <I2C_WaitOnFlagUntilTimeout+0x12>
 8000582:	e7ed      	b.n	8000560 <I2C_WaitOnFlagUntilTimeout+0x38>

08000584 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	460d      	mov	r5, r1
 800058a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	061b      	lsls	r3, r3, #24
 8000592:	d501      	bpl.n	8000598 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000594:	2000      	movs	r0, #0
 8000596:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000598:	4620      	mov	r0, r4
 800059a:	f7ff ff70 	bl	800047e <I2C_IsAcknowledgeFailed>
 800059e:	b9a8      	cbnz	r0, 80005cc <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005a0:	1c6a      	adds	r2, r5, #1
 80005a2:	d0f3      	beq.n	800058c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005a4:	b965      	cbnz	r5, 80005c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005a8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b0:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005b2:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005be:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005c0:	f7ff fe04 	bl	80001cc <HAL_GetTick>
 80005c4:	1b80      	subs	r0, r0, r6
 80005c6:	4285      	cmp	r5, r0
 80005c8:	d2e0      	bcs.n	800058c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005ca:	e7ec      	b.n	80005a6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005cc:	2001      	movs	r0, #1
}
 80005ce:	bd70      	pop	{r4, r5, r6, pc}

080005d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	4604      	mov	r4, r0
 80005d4:	460d      	mov	r5, r1
 80005d6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80005d8:	6820      	ldr	r0, [r4, #0]
 80005da:	6943      	ldr	r3, [r0, #20]
 80005dc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80005e0:	d001      	beq.n	80005e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80005e2:	2000      	movs	r0, #0
}
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80005e6:	6942      	ldr	r2, [r0, #20]
 80005e8:	06d2      	lsls	r2, r2, #27
 80005ea:	d50b      	bpl.n	8000604 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005ec:	f06f 0210 	mvn.w	r2, #16
 80005f0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 80005f2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80005f4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80005f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80005fa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80005fc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80005fe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000602:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000604:	b95d      	cbnz	r5, 800061e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000606:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000608:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000610:	2320      	movs	r3, #32
 8000612:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000616:	2300      	movs	r3, #0
 8000618:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800061c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800061e:	f7ff fdd5 	bl	80001cc <HAL_GetTick>
 8000622:	1b80      	subs	r0, r0, r6
 8000624:	4285      	cmp	r5, r0
 8000626:	d2d7      	bcs.n	80005d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000628:	e7ed      	b.n	8000606 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800062a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800062a:	b570      	push	{r4, r5, r6, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	460d      	mov	r5, r1
 8000630:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	075b      	lsls	r3, r3, #29
 8000638:	d501      	bpl.n	800063e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800063a:	2000      	movs	r0, #0
 800063c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800063e:	4620      	mov	r0, r4
 8000640:	f7ff ff1d 	bl	800047e <I2C_IsAcknowledgeFailed>
 8000644:	b9a8      	cbnz	r0, 8000672 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000646:	1c6a      	adds	r2, r5, #1
 8000648:	d0f3      	beq.n	8000632 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800064a:	b965      	cbnz	r5, 8000666 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800064c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800064e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000650:	f043 0320 	orr.w	r3, r3, #32
 8000654:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000656:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000658:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800065a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800065c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000660:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000664:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000666:	f7ff fdb1 	bl	80001cc <HAL_GetTick>
 800066a:	1b80      	subs	r0, r0, r6
 800066c:	4285      	cmp	r5, r0
 800066e:	d2e0      	bcs.n	8000632 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000670:	e7ec      	b.n	800064c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
}
 8000674:	bd70      	pop	{r4, r5, r6, pc}
	...

08000678 <HAL_I2C_Init>:
{
 8000678:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800067a:	4604      	mov	r4, r0
 800067c:	b908      	cbnz	r0, 8000682 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800067e:	2001      	movs	r0, #1
 8000680:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800068a:	b91b      	cbnz	r3, 8000694 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800068c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000690:	f001 fb18 	bl	8001cc4 <HAL_I2C_MspInit>
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000694:	f000 ff8a 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
  if(pclk1 < I2C_MIN_PCLK_FREQ)
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <HAL_I2C_Init+0x110>)
 800069a:	4298      	cmp	r0, r3
 800069c:	d9ef      	bls.n	800067e <HAL_I2C_Init+0x6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800069e:	2324      	movs	r3, #36	; 0x24
  freqrange = I2C_FREQ_RANGE(pclk1);
 80006a0:	4d3a      	ldr	r5, [pc, #232]	; (800078c <HAL_I2C_Init+0x114>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  freqrange = I2C_FREQ_RANGE(pclk1);
 80006a6:	fbb0 f5f5 	udiv	r5, r0, r5
  __HAL_I2C_DISABLE(hi2c);
 80006aa:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80006ac:	4938      	ldr	r1, [pc, #224]	; (8000790 <HAL_I2C_Init+0x118>)
  __HAL_I2C_DISABLE(hi2c);
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	f022 0201 	bic.w	r2, r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80006bc:	432a      	orrs	r2, r5
 80006be:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80006c0:	6862      	ldr	r2, [r4, #4]
 80006c2:	6a1e      	ldr	r6, [r3, #32]
 80006c4:	428a      	cmp	r2, r1
 80006c6:	bf81      	itttt	hi
 80006c8:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80006cc:	4369      	mulhi	r1, r5
 80006ce:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80006d2:	fbb1 f1f5 	udivhi	r1, r1, r5
 80006d6:	bf94      	ite	ls
 80006d8:	1c69      	addls	r1, r5, #1
 80006da:	3101      	addhi	r1, #1
 80006dc:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80006e0:	4331      	orrs	r1, r6
 80006e2:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80006e4:	69dd      	ldr	r5, [r3, #28]
 80006e6:	492a      	ldr	r1, [pc, #168]	; (8000790 <HAL_I2C_Init+0x118>)
 80006e8:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80006ec:	428a      	cmp	r2, r1
 80006ee:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80006f2:	d830      	bhi.n	8000756 <HAL_I2C_Init+0xde>
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	fbb0 f0f2 	udiv	r0, r0, r2
 80006fa:	f3c0 020b 	ubfx	r2, r0, #0, #12
 80006fe:	2a03      	cmp	r2, #3
 8000700:	bf98      	it	ls
 8000702:	2004      	movls	r0, #4
 8000704:	4328      	orrs	r0, r5
 8000706:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	6a20      	ldr	r0, [r4, #32]
 800070c:	69e2      	ldr	r2, [r4, #28]
 800070e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000712:	4302      	orrs	r2, r0
 8000714:	430a      	orrs	r2, r1
 8000716:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000718:	6899      	ldr	r1, [r3, #8]
 800071a:	68e0      	ldr	r0, [r4, #12]
 800071c:	6922      	ldr	r2, [r4, #16]
 800071e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000722:	4302      	orrs	r2, r0
 8000724:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000728:	430a      	orrs	r2, r1
 800072a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800072c:	68d9      	ldr	r1, [r3, #12]
 800072e:	69a0      	ldr	r0, [r4, #24]
 8000730:	6962      	ldr	r2, [r4, #20]
 8000732:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000736:	4302      	orrs	r2, r0
 8000738:	430a      	orrs	r2, r1
 800073a:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 800073c:	681a      	ldr	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800073e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000740:	f042 0201 	orr.w	r2, r2, #1
 8000744:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000746:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000748:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800074a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800074e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000750:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8000754:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000756:	68a1      	ldr	r1, [r4, #8]
 8000758:	b949      	cbnz	r1, 800076e <HAL_I2C_Init+0xf6>
 800075a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800075e:	fbb0 f0f2 	udiv	r0, r0, r2
 8000762:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8000766:	b162      	cbz	r2, 8000782 <HAL_I2C_Init+0x10a>
 8000768:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800076c:	e7ca      	b.n	8000704 <HAL_I2C_Init+0x8c>
 800076e:	2119      	movs	r1, #25
 8000770:	434a      	muls	r2, r1
 8000772:	fbb0 f0f2 	udiv	r0, r0, r2
 8000776:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800077a:	b112      	cbz	r2, 8000782 <HAL_I2C_Init+0x10a>
 800077c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000780:	e7c0      	b.n	8000704 <HAL_I2C_Init+0x8c>
 8000782:	2001      	movs	r0, #1
 8000784:	e7be      	b.n	8000704 <HAL_I2C_Init+0x8c>
 8000786:	bf00      	nop
 8000788:	001e847f 	.word	0x001e847f
 800078c:	000f4240 	.word	0x000f4240
 8000790:	000186a0 	.word	0x000186a0

08000794 <HAL_I2C_Master_Transmit>:
{
 8000794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000798:	4604      	mov	r4, r0
 800079a:	461f      	mov	r7, r3
 800079c:	460d      	mov	r5, r1
 800079e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80007a0:	f7ff fd14 	bl	80001cc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80007a8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d004      	beq.n	80007b8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY; 
 80007ae:	2502      	movs	r5, #2
}
 80007b0:	4628      	mov	r0, r5
 80007b2:	b004      	add	sp, #16
 80007b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	2319      	movs	r3, #25
 80007bc:	2201      	movs	r2, #1
 80007be:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 80007c2:	4620      	mov	r0, r4
 80007c4:	f7ff feb0 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d1f0      	bne.n	80007ae <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80007cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d0ec      	beq.n	80007ae <HAL_I2C_Master_Transmit+0x1a>
 80007d4:	2301      	movs	r3, #1
 80007d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80007e0:	bf5e      	ittt	pl
 80007e2:	681a      	ldrpl	r2, [r3, #0]
 80007e4:	f042 0201 	orrpl.w	r2, r2, #1
 80007e8:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007f0:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80007f2:	2221      	movs	r2, #33	; 0x21
 80007f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80007f8:	2210      	movs	r2, #16
 80007fa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80007fe:	2200      	movs	r2, #0
 8000800:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000802:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000806:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000808:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800080a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800080c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000810:	8522      	strh	r2, [r4, #40]	; 0x28
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME) || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 8000812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000814:	2a04      	cmp	r2, #4
 8000816:	d006      	beq.n	8000826 <HAL_I2C_Master_Transmit+0x92>
 8000818:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800081a:	2a01      	cmp	r2, #1
 800081c:	d003      	beq.n	8000826 <HAL_I2C_Master_Transmit+0x92>
 800081e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000820:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000824:	d104      	bne.n	8000830 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	e002      	b.n	8000836 <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000830:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000832:	2a12      	cmp	r2, #18
 8000834:	d0f7      	beq.n	8000826 <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000836:	9600      	str	r6, [sp, #0]
 8000838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000840:	4620      	mov	r0, r4
 8000842:	f7ff fe71 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 8000846:	bb28      	cbnz	r0, 8000894 <HAL_I2C_Master_Transmit+0x100>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000848:	6923      	ldr	r3, [r4, #16]
 800084a:	6822      	ldr	r2, [r4, #0]
 800084c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000850:	d112      	bne.n	8000878 <HAL_I2C_Master_Transmit+0xe4>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000852:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000856:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000858:	4633      	mov	r3, r6
 800085a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800085c:	4936      	ldr	r1, [pc, #216]	; (8000938 <HAL_I2C_Master_Transmit+0x1a4>)
 800085e:	4620      	mov	r0, r4
 8000860:	f7ff fe22 	bl	80004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000864:	4605      	mov	r5, r0
 8000866:	b9a0      	cbnz	r0, 8000892 <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	9003      	str	r0, [sp, #12]
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	9203      	str	r2, [sp, #12]
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	9303      	str	r3, [sp, #12]
 8000874:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000876:	e04f      	b.n	8000918 <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000878:	11eb      	asrs	r3, r5, #7
 800087a:	f003 0306 	and.w	r3, r3, #6
 800087e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000882:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000884:	492d      	ldr	r1, [pc, #180]	; (800093c <HAL_I2C_Master_Transmit+0x1a8>)
 8000886:	4633      	mov	r3, r6
 8000888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff fe0c 	bl	80004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000890:	b148      	cbz	r0, 80008a6 <HAL_I2C_Master_Transmit+0x112>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000892:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000896:	2b04      	cmp	r3, #4
 8000898:	f04f 0300 	mov.w	r3, #0
 800089c:	d107      	bne.n	80008ae <HAL_I2C_Master_Transmit+0x11a>
        __HAL_UNLOCK(hi2c);
 800089e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80008a2:	2501      	movs	r5, #1
 80008a4:	e784      	b.n	80007b0 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	b2ed      	uxtb	r5, r5
 80008aa:	611d      	str	r5, [r3, #16]
 80008ac:	e7d4      	b.n	8000858 <HAL_I2C_Master_Transmit+0xc4>
        __HAL_UNLOCK(hi2c);
 80008ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80008b2:	2503      	movs	r5, #3
 80008b4:	e77c      	b.n	80007b0 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008b6:	4632      	mov	r2, r6
 80008b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008ba:	4620      	mov	r0, r4
 80008bc:	f7ff fe62 	bl	8000584 <I2C_WaitOnTXEFlagUntilTimeout>
 80008c0:	b140      	cbz	r0, 80008d4 <HAL_I2C_Master_Transmit+0x140>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d1f4      	bne.n	80008b2 <HAL_I2C_Master_Transmit+0x11e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80008c8:	6822      	ldr	r2, [r4, #0]
 80008ca:	6813      	ldr	r3, [r2, #0]
 80008cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e7e6      	b.n	80008a2 <HAL_I2C_Master_Transmit+0x10e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008d6:	6820      	ldr	r0, [r4, #0]
 80008d8:	1c4b      	adds	r3, r1, #1
 80008da:	6263      	str	r3, [r4, #36]	; 0x24
 80008dc:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80008de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008e0:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80008e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80008e4:	3b01      	subs	r3, #1
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008ea:	1e53      	subs	r3, r2, #1
 80008ec:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 80008ee:	6943      	ldr	r3, [r0, #20]
 80008f0:	075b      	lsls	r3, r3, #29
 80008f2:	d50a      	bpl.n	800090a <HAL_I2C_Master_Transmit+0x176>
 80008f4:	b14f      	cbz	r7, 800090a <HAL_I2C_Master_Transmit+0x176>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008f6:	1c8b      	adds	r3, r1, #2
 80008f8:	6263      	str	r3, [r4, #36]	; 0x24
 80008fa:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80008fc:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008fe:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000900:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000902:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000904:	3b01      	subs	r3, #1
 8000906:	b29b      	uxth	r3, r3
 8000908:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800090a:	4632      	mov	r2, r6
 800090c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800090e:	4620      	mov	r0, r4
 8000910:	f7ff fe8b 	bl	800062a <I2C_WaitOnBTFFlagUntilTimeout>
 8000914:	2800      	cmp	r0, #0
 8000916:	d1d4      	bne.n	80008c2 <HAL_I2C_Master_Transmit+0x12e>
    while(hi2c->XferSize > 0U)
 8000918:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1cb      	bne.n	80008b6 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800091e:	6821      	ldr	r1, [r4, #0]
 8000920:	680a      	ldr	r2, [r1, #0]
 8000922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000926:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000928:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800092a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800092e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000932:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000936:	e73b      	b.n	80007b0 <HAL_I2C_Master_Transmit+0x1c>
 8000938:	00010002 	.word	0x00010002
 800093c:	00010008 	.word	0x00010008

08000940 <HAL_I2C_Master_Receive>:
{
 8000940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000944:	4604      	mov	r4, r0
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	4698      	mov	r8, r3
 800094a:	460d      	mov	r5, r1
 800094c:	4691      	mov	r9, r2
 800094e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8000950:	f7ff fc3c 	bl	80001cc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000954:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000958:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800095a:	2b20      	cmp	r3, #32
 800095c:	d004      	beq.n	8000968 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY; 
 800095e:	2502      	movs	r5, #2
}
 8000960:	4628      	mov	r0, r5
 8000962:	b009      	add	sp, #36	; 0x24
 8000964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000968:	9000      	str	r0, [sp, #0]
 800096a:	2319      	movs	r3, #25
 800096c:	2201      	movs	r2, #1
 800096e:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8000972:	4620      	mov	r0, r4
 8000974:	f7ff fdd8 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 8000978:	2800      	cmp	r0, #0
 800097a:	d1f0      	bne.n	800095e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800097c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000980:	2b01      	cmp	r3, #1
 8000982:	d0ec      	beq.n	800095e <HAL_I2C_Master_Receive+0x1e>
 8000984:	2301      	movs	r3, #1
 8000986:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800098a:	6823      	ldr	r3, [r4, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000990:	bf5e      	ittt	pl
 8000992:	681a      	ldrpl	r2, [r3, #0]
 8000994:	f042 0201 	orrpl.w	r2, r2, #1
 8000998:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a0:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80009a2:	2222      	movs	r2, #34	; 0x22
 80009a4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80009a8:	2210      	movs	r2, #16
 80009aa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80009ae:	2200      	movs	r2, #0
 80009b0:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009b2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80009b6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009ba:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80009bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80009be:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80009c2:	8522      	strh	r2, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009ca:	601a      	str	r2, [r3, #0]
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME)  || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 80009cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009ce:	2a04      	cmp	r2, #4
 80009d0:	d006      	beq.n	80009e0 <HAL_I2C_Master_Receive+0xa0>
 80009d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009d4:	2a01      	cmp	r2, #1
 80009d6:	d003      	beq.n	80009e0 <HAL_I2C_Master_Receive+0xa0>
 80009d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009da:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80009de:	d104      	bne.n	80009ea <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e002      	b.n	80009f0 <HAL_I2C_Master_Receive+0xb0>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80009ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80009ec:	2a11      	cmp	r2, #17
 80009ee:	d0f7      	beq.n	80009e0 <HAL_I2C_Master_Receive+0xa0>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80009f0:	9600      	str	r6, [sp, #0]
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80009fa:	4620      	mov	r0, r4
 80009fc:	f7ff fd94 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d14a      	bne.n	8000a9a <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a04:	6923      	ldr	r3, [r4, #16]
 8000a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	d136      	bne.n	8000a7c <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000a0e:	f045 0501 	orr.w	r5, r5, #1
 8000a12:	b2ed      	uxtb	r5, r5
 8000a14:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a16:	4633      	mov	r3, r6
 8000a18:	463a      	mov	r2, r7
 8000a1a:	4982      	ldr	r1, [pc, #520]	; (8000c24 <HAL_I2C_Master_Receive+0x2e4>)
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f7ff fd43 	bl	80004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a22:	4605      	mov	r5, r0
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d137      	bne.n	8000a98 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8000a28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d066      	beq.n	8000afe <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8000a30:	2a01      	cmp	r2, #1
 8000a32:	d177      	bne.n	8000b24 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a3a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a3c:	9504      	str	r5, [sp, #16]
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	9204      	str	r2, [sp, #16]
 8000a42:	699a      	ldr	r2, [r3, #24]
 8000a44:	9204      	str	r2, [sp, #16]
 8000a46:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a4e:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000a50:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8000c2c <HAL_I2C_Master_Receive+0x2ec>
    while(hi2c->XferSize > 0U)
 8000a54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d05b      	beq.n	8000b12 <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	f200 80c3 	bhi.w	8000be6 <HAL_I2C_Master_Receive+0x2a6>
        if(hi2c->XferSize == 1U)
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d17a      	bne.n	8000b5a <HAL_I2C_Master_Receive+0x21a>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000a64:	4632      	mov	r2, r6
 8000a66:	4639      	mov	r1, r7
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f7ff fdb1 	bl	80005d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	f000 8090 	beq.w	8000b94 <HAL_I2C_Master_Receive+0x254>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a76:	2b20      	cmp	r3, #32
 8000a78:	d116      	bne.n	8000aa8 <HAL_I2C_Master_Receive+0x168>
 8000a7a:	e03e      	b.n	8000afa <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000a7c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000a80:	f008 0806 	and.w	r8, r8, #6
 8000a84:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000a88:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000a8a:	4967      	ldr	r1, [pc, #412]	; (8000c28 <HAL_I2C_Master_Receive+0x2e8>)
 8000a8c:	4633      	mov	r3, r6
 8000a8e:	463a      	mov	r2, r7
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff fd09 	bl	80004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a96:	b148      	cbz	r0, 8000aac <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	d128      	bne.n	8000af6 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8000aa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8000aa8:	2501      	movs	r5, #1
 8000aaa:	e759      	b.n	8000960 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	b2ed      	uxtb	r5, r5
 8000ab0:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ab2:	463a      	mov	r2, r7
 8000ab4:	4633      	mov	r3, r6
 8000ab6:	495b      	ldr	r1, [pc, #364]	; (8000c24 <HAL_I2C_Master_Receive+0x2e4>)
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f7ff fcf5 	bl	80004a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d1e9      	bne.n	8000a98 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	9007      	str	r0, [sp, #28]
 8000ac8:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000aca:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000acc:	9107      	str	r1, [sp, #28]
 8000ace:	6999      	ldr	r1, [r3, #24]
 8000ad0:	9107      	str	r1, [sp, #28]
 8000ad2:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ad4:	6819      	ldr	r1, [r3, #0]
 8000ad6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000ada:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000adc:	9600      	str	r6, [sp, #0]
 8000ade:	463b      	mov	r3, r7
 8000ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ae4:	f7ff fd20 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d1d6      	bne.n	8000a9a <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000aec:	6822      	ldr	r2, [r4, #0]
 8000aee:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000af2:	6113      	str	r3, [r2, #16]
 8000af4:	e78f      	b.n	8000a16 <HAL_I2C_Master_Receive+0xd6>
        __HAL_UNLOCK(hi2c);
 8000af6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8000afa:	2503      	movs	r5, #3
 8000afc:	e730      	b.n	8000960 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000afe:	9503      	str	r5, [sp, #12]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	9203      	str	r2, [sp, #12]
 8000b04:	699a      	ldr	r2, [r3, #24]
 8000b06:	9203      	str	r2, [sp, #12]
 8000b08:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b10:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b12:	2320      	movs	r3, #32
 8000b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000b1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000b22:	e71d      	b.n	8000960 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8000b24:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b26:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8000b28:	d10d      	bne.n	8000b46 <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b36:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b38:	9505      	str	r5, [sp, #20]
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	9205      	str	r2, [sp, #20]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	9305      	str	r3, [sp, #20]
 8000b42:	9b05      	ldr	r3, [sp, #20]
 8000b44:	e784      	b.n	8000a50 <HAL_I2C_Master_Receive+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b4a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b4c:	9506      	str	r5, [sp, #24]
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	9206      	str	r2, [sp, #24]
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	9306      	str	r3, [sp, #24]
 8000b56:	9b06      	ldr	r3, [sp, #24]
 8000b58:	e77a      	b.n	8000a50 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8000b5a:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000b5c:	9600      	str	r6, [sp, #0]
 8000b5e:	463b      	mov	r3, r7
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	4641      	mov	r1, r8
 8000b66:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000b68:	d122      	bne.n	8000bb0 <HAL_I2C_Master_Receive+0x270>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000b6a:	f7ff fcdd 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d1c3      	bne.n	8000afa <HAL_I2C_Master_Receive+0x1ba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b7a:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	1c51      	adds	r1, r2, #1
 8000b82:	6261      	str	r1, [r4, #36]	; 0x24
 8000b84:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8000b86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000b8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	6262      	str	r2, [r4, #36]	; 0x24
 8000b9a:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b9c:	6912      	ldr	r2, [r2, #16]
 8000b9e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8000ba0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000ba6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000bae:	e751      	b.n	8000a54 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bb0:	f7ff fcba 	bl	8000528 <I2C_WaitOnFlagUntilTimeout>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d19f      	bne.n	8000afa <HAL_I2C_Master_Receive+0x1ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	6819      	ldr	r1, [r3, #0]
 8000bbe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000bc2:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	1c48      	adds	r0, r1, #1
 8000bca:	6260      	str	r0, [r4, #36]	; 0x24
 8000bcc:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8000bce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bd0:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bd8:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000be0:	4620      	mov	r0, r4
 8000be2:	463b      	mov	r3, r7
 8000be4:	e7c1      	b.n	8000b6a <HAL_I2C_Master_Receive+0x22a>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000be6:	4632      	mov	r2, r6
 8000be8:	4639      	mov	r1, r7
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff fcf0 	bl	80005d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	f47f af3f 	bne.w	8000a74 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	6262      	str	r2, [r4, #36]	; 0x24
 8000bfc:	6822      	ldr	r2, [r4, #0]
 8000bfe:	6912      	ldr	r2, [r2, #16]
 8000c00:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8000c02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c04:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8000c06:	3b01      	subs	r3, #1
 8000c08:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000c0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c12:	6953      	ldr	r3, [r2, #20]
 8000c14:	075b      	lsls	r3, r3, #29
 8000c16:	f57f af1d 	bpl.w	8000a54 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c1c:	1c59      	adds	r1, r3, #1
 8000c1e:	6261      	str	r1, [r4, #36]	; 0x24
 8000c20:	e7bc      	b.n	8000b9c <HAL_I2C_Master_Receive+0x25c>
 8000c22:	bf00      	nop
 8000c24:	00010002 	.word	0x00010002
 8000c28:	00010008 	.word	0x00010008
 8000c2c:	00010004 	.word	0x00010004

08000c30 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000c32:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000c3a:	d00c      	beq.n	8000c56 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000c3c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000c3e:	491a      	ldr	r1, [pc, #104]	; (8000ca8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000c40:	680b      	ldr	r3, [r1, #0]
 8000c42:	f023 0301 	bic.w	r3, r3, #1
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000c4a:	6808      	ldr	r0, [r1, #0]
 8000c4c:	f000 0001 	and.w	r0, r0, #1
 8000c50:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000c52:	b002      	add	sp, #8
 8000c54:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c58:	4914      	ldr	r1, [pc, #80]	; (8000cac <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000c5a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c5e:	d00f      	beq.n	8000c80 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c60:	680a      	ldr	r2, [r1, #0]
 8000c62:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000c66:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000c6a:	d1e7      	bne.n	8000c3c <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000c6c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000c70:	d1e4      	bne.n	8000c3c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000c72:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000c74:	6813      	ldr	r3, [r2, #0]
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	e7de      	b.n	8000c3e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
 8000c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c8a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c92:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c94:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000c96:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c9a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000c9e:	6259      	str	r1, [r3, #36]	; 0x24
 8000ca0:	e7e1      	b.n	8000c66 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40023c00 	.word	0x40023c00
 8000cac:	40007000 	.word	0x40007000

08000cb0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb0:	6803      	ldr	r3, [r0, #0]
{
 8000cb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	07d9      	lsls	r1, r3, #31
{
 8000cb8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	d46a      	bmi.n	8000d92 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	079a      	lsls	r2, r3, #30
 8000cc0:	f100 80e6 	bmi.w	8000e90 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	06de      	lsls	r6, r3, #27
 8000cc8:	d555      	bpl.n	8000d76 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000cca:	4dc1      	ldr	r5, [pc, #772]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000ccc:	68ab      	ldr	r3, [r5, #8]
 8000cce:	f013 0f0c 	tst.w	r3, #12
 8000cd2:	f040 8183 	bne.w	8000fdc <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cda:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cde:	6829      	ldr	r1, [r5, #0]
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	420b      	tst	r3, r1
 8000cf4:	d002      	beq.n	8000cfc <HAL_RCC_OscConfig+0x4c>
 8000cf6:	69a3      	ldr	r3, [r4, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d06e      	beq.n	8000dda <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cfc:	4db4      	ldr	r5, [pc, #720]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000cfe:	6a20      	ldr	r0, [r4, #32]
 8000d00:	686b      	ldr	r3, [r5, #4]
 8000d02:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d06:	4298      	cmp	r0, r3
 8000d08:	f240 814a 	bls.w	8000fa0 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d0c:	f7ff ff90 	bl	8000c30 <RCC_SetFlashLatencyFromMSIRange>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d162      	bne.n	8000dda <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d14:	686b      	ldr	r3, [r5, #4]
 8000d16:	6a22      	ldr	r2, [r4, #32]
 8000d18:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d20:	6869      	ldr	r1, [r5, #4]
 8000d22:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	fab3 f283 	clz	r2, r3
 8000d2e:	69e3      	ldr	r3, [r4, #28]
 8000d30:	4093      	lsls	r3, r2
 8000d32:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000d36:	4313      	orrs	r3, r2
 8000d38:	606b      	str	r3, [r5, #4]
 8000d3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d3e:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d42:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d46:	4ba2      	ldr	r3, [pc, #648]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000d48:	21f0      	movs	r1, #240	; 0xf0
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	fa91 f1a1 	rbit	r1, r1
 8000d50:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d54:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d56:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d5a:	40c3      	lsrs	r3, r0
 8000d5c:	1c58      	adds	r0, r3, #1
 8000d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d62:	40ca      	lsrs	r2, r1
 8000d64:	499b      	ldr	r1, [pc, #620]	; (8000fd4 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d66:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d68:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000d6c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000d6e:	4a9a      	ldr	r2, [pc, #616]	; (8000fd8 <HAL_RCC_OscConfig+0x328>)
 8000d70:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000d72:	f7ff fa03 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	071d      	lsls	r5, r3, #28
 8000d7a:	f100 8191 	bmi.w	80010a0 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	0758      	lsls	r0, r3, #29
 8000d82:	f100 81d3 	bmi.w	800112c <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d86:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8257 	bne.w	800123c <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000d8e:	2000      	movs	r0, #0
 8000d90:	e024      	b.n	8000ddc <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d92:	4b8f      	ldr	r3, [pc, #572]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	f002 020c 	and.w	r2, r2, #12
 8000d9a:	2a08      	cmp	r2, #8
 8000d9c:	d007      	beq.n	8000dae <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	f002 020c 	and.w	r2, r2, #12
 8000da4:	2a0c      	cmp	r2, #12
 8000da6:	d11c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x132>
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	03db      	lsls	r3, r3, #15
 8000dac:	d519      	bpl.n	8000de2 <HAL_RCC_OscConfig+0x132>
 8000dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	4a86      	ldr	r2, [pc, #536]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000db8:	6811      	ldr	r1, [r2, #0]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	420b      	tst	r3, r1
 8000dce:	f43f af75 	beq.w	8000cbc <HAL_RCC_OscConfig+0xc>
 8000dd2:	6863      	ldr	r3, [r4, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f47f af71 	bne.w	8000cbc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000dda:	2001      	movs	r0, #1
}
 8000ddc:	b003      	add	sp, #12
 8000dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de2:	6863      	ldr	r3, [r4, #4]
 8000de4:	4d7a      	ldr	r5, [pc, #488]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d120      	bne.n	8000e2c <HAL_RCC_OscConfig+0x17c>
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000df2:	f7ff f9eb 	bl	80001cc <HAL_GetTick>
 8000df6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000dfa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfc:	2601      	movs	r6, #1
 8000dfe:	4f74      	ldr	r7, [pc, #464]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000e00:	fa95 f3a5 	rbit	r3, r5
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	fa95 f3a5 	rbit	r3, r5
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	fa06 f303 	lsl.w	r3, r6, r3
 8000e16:	4213      	tst	r3, r2
 8000e18:	f47f af50 	bne.w	8000cbc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff f9d6 	bl	80001cc <HAL_GetTick>
 8000e20:	eba0 0008 	sub.w	r0, r0, r8
 8000e24:	2864      	cmp	r0, #100	; 0x64
 8000e26:	d9eb      	bls.n	8000e00 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000e28:	2003      	movs	r0, #3
 8000e2a:	e7d7      	b.n	8000ddc <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2c:	bb13      	cbnz	r3, 8000e74 <HAL_RCC_OscConfig+0x1c4>
 8000e2e:	682b      	ldr	r3, [r5, #0]
 8000e30:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e38:	602b      	str	r3, [r5, #0]
 8000e3a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3c:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e44:	f7ff f9c2 	bl	80001cc <HAL_GetTick>
 8000e48:	4680      	mov	r8, r0
 8000e4a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	682a      	ldr	r2, [r5, #0]
 8000e50:	fa96 f3a6 	rbit	r3, r6
 8000e54:	fab3 f383 	clz	r3, r3
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	fa07 f303 	lsl.w	r3, r7, r3
 8000e60:	4213      	tst	r3, r2
 8000e62:	f43f af2b 	beq.w	8000cbc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e66:	f7ff f9b1 	bl	80001cc <HAL_GetTick>
 8000e6a:	eba0 0008 	sub.w	r0, r0, r8
 8000e6e:	2864      	cmp	r0, #100	; 0x64
 8000e70:	d9eb      	bls.n	8000e4a <HAL_RCC_OscConfig+0x19a>
 8000e72:	e7d9      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	d103      	bne.n	8000e82 <HAL_RCC_OscConfig+0x1d2>
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7e:	602b      	str	r3, [r5, #0]
 8000e80:	e7b3      	b.n	8000dea <HAL_RCC_OscConfig+0x13a>
 8000e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8e:	e7af      	b.n	8000df0 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e90:	4b4f      	ldr	r3, [pc, #316]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	f002 020c 	and.w	r2, r2, #12
 8000e98:	2a04      	cmp	r2, #4
 8000e9a:	d007      	beq.n	8000eac <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	f002 020c 	and.w	r2, r2, #12
 8000ea2:	2a0c      	cmp	r2, #12
 8000ea4:	d124      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x240>
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	03df      	lsls	r7, r3, #15
 8000eaa:	d421      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0x240>
 8000eac:	2302      	movs	r3, #2
 8000eae:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000eb4:	6810      	ldr	r0, [r2, #0]
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec8:	4203      	tst	r3, r0
 8000eca:	4613      	mov	r3, r2
 8000ecc:	d002      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x224>
 8000ece:	68e2      	ldr	r2, [r4, #12]
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	d182      	bne.n	8000dda <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	6858      	ldr	r0, [r3, #4]
 8000ed6:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000eda:	fa92 f2a2 	rbit	r2, r2
 8000ede:	fab2 f182 	clz	r1, r2
 8000ee2:	6922      	ldr	r2, [r4, #16]
 8000ee4:	408a      	lsls	r2, r1
 8000ee6:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	e6e9      	b.n	8000cc4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef0:	68e2      	ldr	r2, [r4, #12]
 8000ef2:	2501      	movs	r5, #1
 8000ef4:	b382      	cbz	r2, 8000f58 <HAL_RCC_OscConfig+0x2a8>
 8000ef6:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f02:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000f0a:	f7ff f95f 	bl	80001cc <HAL_GetTick>
 8000f0e:	2702      	movs	r7, #2
 8000f10:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f12:	4e2f      	ldr	r6, [pc, #188]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000f14:	fa97 f3a7 	rbit	r3, r7
 8000f18:	6832      	ldr	r2, [r6, #0]
 8000f1a:	fa97 f3a7 	rbit	r3, r7
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	fa05 f303 	lsl.w	r3, r5, r3
 8000f2a:	4213      	tst	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	6871      	ldr	r1, [r6, #4]
 8000f30:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	fab3 f283 	clz	r2, r3
 8000f3c:	6923      	ldr	r3, [r4, #16]
 8000f3e:	4093      	lsls	r3, r2
 8000f40:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000f44:	4313      	orrs	r3, r2
 8000f46:	6073      	str	r3, [r6, #4]
 8000f48:	e6bc      	b.n	8000cc4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4a:	f7ff f93f 	bl	80001cc <HAL_GetTick>
 8000f4e:	eba0 0008 	sub.w	r0, r0, r8
 8000f52:	2802      	cmp	r0, #2
 8000f54:	d9de      	bls.n	8000f14 <HAL_RCC_OscConfig+0x264>
 8000f56:	e767      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
 8000f58:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f64:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f6c:	f7ff f92e 	bl	80001cc <HAL_GetTick>
 8000f70:	2602      	movs	r6, #2
 8000f72:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f74:	4f16      	ldr	r7, [pc, #88]	; (8000fd0 <HAL_RCC_OscConfig+0x320>)
 8000f76:	fa96 f3a6 	rbit	r3, r6
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	fa96 f3a6 	rbit	r3, r6
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa05 f303 	lsl.w	r3, r5, r3
 8000f8c:	4213      	tst	r3, r2
 8000f8e:	f43f ae99 	beq.w	8000cc4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff f91b 	bl	80001cc <HAL_GetTick>
 8000f96:	eba0 0008 	sub.w	r0, r0, r8
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d9eb      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2c6>
 8000f9e:	e743      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa0:	686b      	ldr	r3, [r5, #4]
 8000fa2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fa6:	4303      	orrs	r3, r0
 8000fa8:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000faa:	6869      	ldr	r1, [r5, #4]
 8000fac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	fab3 f283 	clz	r2, r3
 8000fb8:	69e3      	ldr	r3, [r4, #28]
 8000fba:	4093      	lsls	r3, r2
 8000fbc:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fc4:	f7ff fe34 	bl	8000c30 <RCC_SetFlashLatencyFromMSIRange>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	f43f aeb6 	beq.w	8000d3a <HAL_RCC_OscConfig+0x8a>
 8000fce:	e704      	b.n	8000dda <HAL_RCC_OscConfig+0x12a>
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	080026e1 	.word	0x080026e1
 8000fd8:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fdc:	69a2      	ldr	r2, [r4, #24]
 8000fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d037      	beq.n	8001056 <HAL_RCC_OscConfig+0x3a6>
 8000fe6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	2601      	movs	r6, #1
 8000ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ff4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ffc:	f7ff f8e6 	bl	80001cc <HAL_GetTick>
 8001000:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001004:	4680      	mov	r8, r0
 8001006:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800100a:	682a      	ldr	r2, [r5, #0]
 800100c:	fa97 f3a7 	rbit	r3, r7
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	fa06 f303 	lsl.w	r3, r6, r3
 800101c:	4213      	tst	r3, r2
 800101e:	d013      	beq.n	8001048 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001020:	686b      	ldr	r3, [r5, #4]
 8001022:	6a22      	ldr	r2, [r4, #32]
 8001024:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001028:	4313      	orrs	r3, r2
 800102a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800102c:	6869      	ldr	r1, [r5, #4]
 800102e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	fab3 f283 	clz	r2, r3
 800103a:	69e3      	ldr	r3, [r4, #28]
 800103c:	4093      	lsls	r3, r2
 800103e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8001042:	4313      	orrs	r3, r2
 8001044:	606b      	str	r3, [r5, #4]
 8001046:	e696      	b.n	8000d76 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001048:	f7ff f8c0 	bl	80001cc <HAL_GetTick>
 800104c:	eba0 0008 	sub.w	r0, r0, r8
 8001050:	2802      	cmp	r0, #2
 8001052:	d9d8      	bls.n	8001006 <HAL_RCC_OscConfig+0x356>
 8001054:	e6e8      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
 8001056:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001062:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800106a:	f7ff f8af 	bl	80001cc <HAL_GetTick>
 800106e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001072:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001074:	2701      	movs	r7, #1
 8001076:	fa96 f3a6 	rbit	r3, r6
 800107a:	682a      	ldr	r2, [r5, #0]
 800107c:	fa96 f3a6 	rbit	r3, r6
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	fa07 f303 	lsl.w	r3, r7, r3
 800108c:	4213      	tst	r3, r2
 800108e:	f43f ae72 	beq.w	8000d76 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001092:	f7ff f89b 	bl	80001cc <HAL_GetTick>
 8001096:	eba0 0008 	sub.w	r0, r0, r8
 800109a:	2802      	cmp	r0, #2
 800109c:	d9eb      	bls.n	8001076 <HAL_RCC_OscConfig+0x3c6>
 800109e:	e6c3      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a0:	6962      	ldr	r2, [r4, #20]
 80010a2:	2501      	movs	r5, #1
 80010a4:	49a9      	ldr	r1, [pc, #676]	; (800134c <HAL_RCC_OscConfig+0x69c>)
 80010a6:	b302      	cbz	r2, 80010ea <HAL_RCC_OscConfig+0x43a>
 80010a8:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	440b      	add	r3, r1
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80010b6:	f7ff f889 	bl	80001cc <HAL_GetTick>
 80010ba:	2602      	movs	r6, #2
 80010bc:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4fa4      	ldr	r7, [pc, #656]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 80010c0:	fa96 f3a6 	rbit	r3, r6
 80010c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c6:	fa96 f3a6 	rbit	r3, r6
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	f003 031f 	and.w	r3, r3, #31
 80010d2:	fa05 f303 	lsl.w	r3, r5, r3
 80010d6:	4213      	tst	r3, r2
 80010d8:	f47f ae51 	bne.w	8000d7e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff f876 	bl	80001cc <HAL_GetTick>
 80010e0:	eba0 0008 	sub.w	r0, r0, r8
 80010e4:	2802      	cmp	r0, #2
 80010e6:	d9eb      	bls.n	80010c0 <HAL_RCC_OscConfig+0x410>
 80010e8:	e69e      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
 80010ea:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	440b      	add	r3, r1
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010f8:	f7ff f868 	bl	80001cc <HAL_GetTick>
 80010fc:	2602      	movs	r6, #2
 80010fe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4f93      	ldr	r7, [pc, #588]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 8001102:	fa96 f3a6 	rbit	r3, r6
 8001106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001108:	fa96 f3a6 	rbit	r3, r6
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	fa05 f303 	lsl.w	r3, r5, r3
 8001118:	4213      	tst	r3, r2
 800111a:	f43f ae30 	beq.w	8000d7e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff f855 	bl	80001cc <HAL_GetTick>
 8001122:	eba0 0008 	sub.w	r0, r0, r8
 8001126:	2802      	cmp	r0, #2
 8001128:	d9eb      	bls.n	8001102 <HAL_RCC_OscConfig+0x452>
 800112a:	e67d      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800112c:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 800112e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001130:	00d1      	lsls	r1, r2, #3
 8001132:	d434      	bmi.n	800119e <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8001134:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001138:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	4d82      	ldr	r5, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x6a4>)
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	05da      	lsls	r2, r3, #23
 800114e:	d528      	bpl.n	80011a2 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001150:	68a3      	ldr	r3, [r4, #8]
 8001152:	4d7f      	ldr	r5, [pc, #508]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 8001154:	2b01      	cmp	r3, #1
 8001156:	d134      	bne.n	80011c2 <HAL_RCC_OscConfig+0x512>
 8001158:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001160:	f7ff f834 	bl	80001cc <HAL_GetTick>
 8001164:	f44f 7500 	mov.w	r5, #512	; 0x200
 8001168:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116a:	2701      	movs	r7, #1
 800116c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001350 <HAL_RCC_OscConfig+0x6a0>
 8001170:	fa95 f3a5 	rbit	r3, r5
 8001174:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8001178:	fa95 f3a5 	rbit	r3, r5
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	fa07 f303 	lsl.w	r3, r7, r3
 8001188:	4213      	tst	r3, r2
 800118a:	d04e      	beq.n	800122a <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 800118c:	2e00      	cmp	r6, #0
 800118e:	f43f adfa 	beq.w	8000d86 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001192:	4a6f      	ldr	r2, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 8001194:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119a:	6253      	str	r3, [r2, #36]	; 0x24
 800119c:	e5f3      	b.n	8000d86 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 800119e:	2600      	movs	r6, #0
 80011a0:	e7d2      	b.n	8001148 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011aa:	f7ff f80f 	bl	80001cc <HAL_GetTick>
 80011ae:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	d4cc      	bmi.n	8001150 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b6:	f7ff f809 	bl	80001cc <HAL_GetTick>
 80011ba:	1bc0      	subs	r0, r0, r7
 80011bc:	2864      	cmp	r0, #100	; 0x64
 80011be:	d9f7      	bls.n	80011b0 <HAL_RCC_OscConfig+0x500>
 80011c0:	e632      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c2:	bb23      	cbnz	r3, 800120e <HAL_RCC_OscConfig+0x55e>
 80011c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011c6:	f44f 7700 	mov.w	r7, #512	; 0x200
 80011ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ce:	636b      	str	r3, [r5, #52]	; 0x34
 80011d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d2:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011da:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80011dc:	f7fe fff6 	bl	80001cc <HAL_GetTick>
 80011e0:	4681      	mov	r9, r0
 80011e2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011e8:	fa97 f3a7 	rbit	r3, r7
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	fa08 f303 	lsl.w	r3, r8, r3
 80011f8:	4213      	tst	r3, r2
 80011fa:	d0c7      	beq.n	800118c <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fc:	f7fe ffe6 	bl	80001cc <HAL_GetTick>
 8001200:	f241 3388 	movw	r3, #5000	; 0x1388
 8001204:	eba0 0009 	sub.w	r0, r0, r9
 8001208:	4298      	cmp	r0, r3
 800120a:	d9ea      	bls.n	80011e2 <HAL_RCC_OscConfig+0x532>
 800120c:	e60c      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120e:	2b05      	cmp	r3, #5
 8001210:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001212:	d103      	bne.n	800121c <HAL_RCC_OscConfig+0x56c>
 8001214:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001218:	636b      	str	r3, [r5, #52]	; 0x34
 800121a:	e79d      	b.n	8001158 <HAL_RCC_OscConfig+0x4a8>
 800121c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001220:	636b      	str	r3, [r5, #52]	; 0x34
 8001222:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001228:	e799      	b.n	800115e <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7fe ffcf 	bl	80001cc <HAL_GetTick>
 800122e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001232:	eba0 0009 	sub.w	r0, r0, r9
 8001236:	4298      	cmp	r0, r3
 8001238:	d99a      	bls.n	8001170 <HAL_RCC_OscConfig+0x4c0>
 800123a:	e5f5      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800123c:	4d44      	ldr	r5, [pc, #272]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 800123e:	68ab      	ldr	r3, [r5, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b0c      	cmp	r3, #12
 8001246:	f43f adc8 	beq.w	8000dda <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124a:	2a02      	cmp	r2, #2
 800124c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001250:	d156      	bne.n	8001300 <HAL_RCC_OscConfig+0x650>
 8001252:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	2200      	movs	r2, #0
 800125c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001260:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001268:	f7fe ffb0 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126c:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 800126e:	4680      	mov	r8, r0
 8001270:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001274:	2501      	movs	r5, #1
 8001276:	fa97 f3a7 	rbit	r3, r7
 800127a:	6832      	ldr	r2, [r6, #0]
 800127c:	fa97 f3a7 	rbit	r3, r7
 8001280:	fab3 f383 	clz	r3, r3
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	fa05 f303 	lsl.w	r3, r5, r3
 800128c:	4213      	tst	r3, r2
 800128e:	d130      	bne.n	80012f2 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001290:	68b2      	ldr	r2, [r6, #8]
 8001292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001294:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001296:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800129a:	430b      	orrs	r3, r1
 800129c:	4313      	orrs	r3, r2
 800129e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80012a0:	4313      	orrs	r3, r2
 80012a2:	60b3      	str	r3, [r6, #8]
 80012a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b4:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80012bc:	f7fe ff86 	bl	80001cc <HAL_GetTick>
 80012c0:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80012c4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012c6:	2501      	movs	r5, #1
 80012c8:	4e21      	ldr	r6, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x6a0>)
 80012ca:	fa94 f3a4 	rbit	r3, r4
 80012ce:	6832      	ldr	r2, [r6, #0]
 80012d0:	fa94 f3a4 	rbit	r3, r4
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa05 f303 	lsl.w	r3, r5, r3
 80012e0:	4213      	tst	r3, r2
 80012e2:	f47f ad54 	bne.w	8000d8e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e6:	f7fe ff71 	bl	80001cc <HAL_GetTick>
 80012ea:	1bc0      	subs	r0, r0, r7
 80012ec:	2802      	cmp	r0, #2
 80012ee:	d9ec      	bls.n	80012ca <HAL_RCC_OscConfig+0x61a>
 80012f0:	e59a      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f2:	f7fe ff6b 	bl	80001cc <HAL_GetTick>
 80012f6:	eba0 0008 	sub.w	r0, r0, r8
 80012fa:	2802      	cmp	r0, #2
 80012fc:	d9bb      	bls.n	8001276 <HAL_RCC_OscConfig+0x5c6>
 80012fe:	e593      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
 8001300:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	2200      	movs	r2, #0
 800130a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800130e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001316:	f7fe ff59 	bl	80001cc <HAL_GetTick>
 800131a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800131e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	2601      	movs	r6, #1
 8001322:	fa94 f3a4 	rbit	r3, r4
 8001326:	682a      	ldr	r2, [r5, #0]
 8001328:	fa94 f3a4 	rbit	r3, r4
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa06 f303 	lsl.w	r3, r6, r3
 8001338:	4213      	tst	r3, r2
 800133a:	f43f ad28 	beq.w	8000d8e <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7fe ff45 	bl	80001cc <HAL_GetTick>
 8001342:	1bc0      	subs	r0, r0, r7
 8001344:	2802      	cmp	r0, #2
 8001346:	d9ec      	bls.n	8001322 <HAL_RCC_OscConfig+0x672>
 8001348:	e56e      	b.n	8000e28 <HAL_RCC_OscConfig+0x178>
 800134a:	bf00      	nop
 800134c:	1091c1a0 	.word	0x1091c1a0
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001358:	491e      	ldr	r1, [pc, #120]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800135a:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800135c:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	2a08      	cmp	r2, #8
 8001364:	d005      	beq.n	8001372 <HAL_RCC_GetSysClockFreq+0x1a>
 8001366:	2a0c      	cmp	r2, #12
 8001368:	d005      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x1e>
 800136a:	2a04      	cmp	r2, #4
 800136c:	d122      	bne.n	80013b4 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 800136e:	481a      	ldr	r0, [pc, #104]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001370:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <HAL_RCC_GetSysClockFreq+0x84>)
 8001374:	bd10      	pop	{r4, pc}
 8001376:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800137a:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001386:	fa20 f202 	lsr.w	r2, r0, r2
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x88>)
 800138c:	5c84      	ldrb	r4, [r0, r2]
 800138e:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001392:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8001396:	fab0 f280 	clz	r2, r0
 800139a:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800139e:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013a0:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a2:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80013a4:	bf4c      	ite	mi
 80013a6:	4b0d      	ldrmi	r3, [pc, #52]	; (80013dc <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80013a8:	4b0b      	ldrpl	r3, [pc, #44]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80013aa:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 80013ac:	4363      	muls	r3, r4
 80013ae:	fbb3 f0f0 	udiv	r0, r3, r0
 80013b2:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80013b4:	6848      	ldr	r0, [r1, #4]
 80013b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ba:	fa93 f3a3 	rbit	r3, r3
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 80013c6:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013ce:	4098      	lsls	r0, r3
 80013d0:	bd10      	pop	{r4, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	00f42400 	.word	0x00f42400
 80013dc:	007a1200 	.word	0x007a1200
 80013e0:	080026f9 	.word	0x080026f9

080013e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_RCC_ClockConfig+0x1ac>)
{
 80013e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013ea:	681a      	ldr	r2, [r3, #0]
{
 80013ec:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013ee:	f002 0201 	and.w	r2, r2, #1
 80013f2:	428a      	cmp	r2, r1
{
 80013f4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013f6:	d330      	bcc.n	800145a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f8:	6832      	ldr	r2, [r6, #0]
 80013fa:	0794      	lsls	r4, r2, #30
 80013fc:	d440      	bmi.n	8001480 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fe:	07d0      	lsls	r0, r2, #31
 8001400:	d446      	bmi.n	8001490 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_RCC_ClockConfig+0x1ac>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	f002 0201 	and.w	r2, r2, #1
 800140a:	4295      	cmp	r5, r2
 800140c:	f0c0 80ae 	bcc.w	800156c <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	6832      	ldr	r2, [r6, #0]
 8001412:	0751      	lsls	r1, r2, #29
 8001414:	f100 80b3 	bmi.w	800157e <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001418:	0713      	lsls	r3, r2, #28
 800141a:	d507      	bpl.n	800142c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800141c:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <HAL_RCC_ClockConfig+0x1b0>)
 800141e:	6931      	ldr	r1, [r6, #16]
 8001420:	6893      	ldr	r3, [r2, #8]
 8001422:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001426:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800142a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800142c:	f7ff ff94 	bl	8001358 <HAL_RCC_GetSysClockFreq>
 8001430:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_RCC_ClockConfig+0x1b0>)
 8001432:	22f0      	movs	r2, #240	; 0xf0
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	fab2 f282 	clz	r2, r2
 800143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001442:	40d3      	lsrs	r3, r2
 8001444:	4a54      	ldr	r2, [pc, #336]	; (8001598 <HAL_RCC_ClockConfig+0x1b4>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	40d8      	lsrs	r0, r3
 800144a:	4b54      	ldr	r3, [pc, #336]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800144e:	2000      	movs	r0, #0
 8001450:	f7fe fe94 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8001454:	2000      	movs	r0, #0
}
 8001456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	2901      	cmp	r1, #1
 800145c:	bf02      	ittt	eq
 800145e:	681a      	ldreq	r2, [r3, #0]
 8001460:	f042 0204 	orreq.w	r2, r2, #4
 8001464:	601a      	streq	r2, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	4299      	cmp	r1, r3
 8001478:	d0be      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4944      	ldr	r1, [pc, #272]	; (8001594 <HAL_RCC_ClockConfig+0x1b0>)
 8001482:	68b0      	ldr	r0, [r6, #8]
 8001484:	688b      	ldr	r3, [r1, #8]
 8001486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800148a:	4303      	orrs	r3, r0
 800148c:	608b      	str	r3, [r1, #8]
 800148e:	e7b6      	b.n	80013fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001490:	6872      	ldr	r2, [r6, #4]
 8001492:	4940      	ldr	r1, [pc, #256]	; (8001594 <HAL_RCC_ClockConfig+0x1b0>)
 8001494:	2a02      	cmp	r2, #2
 8001496:	d10f      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xd4>
 8001498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80014a0:	6808      	ldr	r0, [r1, #0]
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	2101      	movs	r1, #1
 80014ac:	f003 031f 	and.w	r3, r3, #31
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4203      	tst	r3, r0
 80014b6:	e013      	b.n	80014e0 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b8:	2a03      	cmp	r2, #3
 80014ba:	d102      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
 80014bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c0:	e7ec      	b.n	800149c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014c2:	2a01      	cmp	r2, #1
 80014c4:	d129      	bne.n	800151a <HAL_RCC_ClockConfig+0x136>
 80014c6:	2302      	movs	r3, #2
 80014c8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	6809      	ldr	r1, [r1, #0]
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80014e0:	d0cb      	beq.n	800147a <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e2:	4c2c      	ldr	r4, [pc, #176]	; (8001594 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e8:	68a3      	ldr	r3, [r4, #8]
 80014ea:	f023 0303 	bic.w	r3, r3, #3
 80014ee:	431a      	orrs	r2, r3
 80014f0:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80014f2:	f7fe fe6b 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80014f8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d110      	bne.n	8001520 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014fe:	68a3      	ldr	r3, [r4, #8]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	2b08      	cmp	r3, #8
 8001506:	f43f af7c 	beq.w	8001402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150a:	f7fe fe5f 	bl	80001cc <HAL_GetTick>
 800150e:	1bc0      	subs	r0, r0, r7
 8001510:	4540      	cmp	r0, r8
 8001512:	d9f4      	bls.n	80014fe <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001514:	2003      	movs	r0, #3
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800151a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800151e:	e7bd      	b.n	800149c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001520:	2b03      	cmp	r3, #3
 8001522:	d10b      	bne.n	800153c <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001524:	68a3      	ldr	r3, [r4, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b0c      	cmp	r3, #12
 800152c:	f43f af69 	beq.w	8001402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7fe fe4c 	bl	80001cc <HAL_GetTick>
 8001534:	1bc0      	subs	r0, r0, r7
 8001536:	4540      	cmp	r0, r8
 8001538:	d9f4      	bls.n	8001524 <HAL_RCC_ClockConfig+0x140>
 800153a:	e7eb      	b.n	8001514 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800153c:	2b01      	cmp	r3, #1
 800153e:	d110      	bne.n	8001562 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001540:	68a3      	ldr	r3, [r4, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b04      	cmp	r3, #4
 8001548:	f43f af5b 	beq.w	8001402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7fe fe3e 	bl	80001cc <HAL_GetTick>
 8001550:	1bc0      	subs	r0, r0, r7
 8001552:	4540      	cmp	r0, r8
 8001554:	d9f4      	bls.n	8001540 <HAL_RCC_ClockConfig+0x15c>
 8001556:	e7dd      	b.n	8001514 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7fe fe38 	bl	80001cc <HAL_GetTick>
 800155c:	1bc0      	subs	r0, r0, r7
 800155e:	4540      	cmp	r0, r8
 8001560:	d8d8      	bhi.n	8001514 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001562:	68a3      	ldr	r3, [r4, #8]
 8001564:	f013 0f0c 	tst.w	r3, #12
 8001568:	d1f6      	bne.n	8001558 <HAL_RCC_ClockConfig+0x174>
 800156a:	e74a      	b.n	8001402 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	07da      	lsls	r2, r3, #31
 8001578:	f53f af7f 	bmi.w	800147a <HAL_RCC_ClockConfig+0x96>
 800157c:	e748      	b.n	8001410 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800157e:	4905      	ldr	r1, [pc, #20]	; (8001594 <HAL_RCC_ClockConfig+0x1b0>)
 8001580:	68f0      	ldr	r0, [r6, #12]
 8001582:	688b      	ldr	r3, [r1, #8]
 8001584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001588:	4303      	orrs	r3, r0
 800158a:	608b      	str	r3, [r1, #8]
 800158c:	e744      	b.n	8001418 <HAL_RCC_ClockConfig+0x34>
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00
 8001594:	40023800 	.word	0x40023800
 8001598:	080026e1 	.word	0x080026e1
 800159c:	20000000 	.word	0x20000000

080015a0 <HAL_RCC_GetHCLKFreq>:
}
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	fa92 f2a2 	rbit	r2, r2
 80015b8:	fab2 f282 	clz	r2, r2
 80015bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015c0:	40d3      	lsrs	r3, r2
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80015c8:	6810      	ldr	r0, [r2, #0]
}    
 80015ca:	40d8      	lsrs	r0, r3
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	080026f1 	.word	0x080026f1
 80015d8:	20000000 	.word	0x20000000

080015dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	fa92 f2a2 	rbit	r2, r2
 80015e8:	fab2 f282 	clz	r2, r2
 80015ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80015f0:	40d3      	lsrs	r3, r2
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80015f8:	6810      	ldr	r0, [r2, #0]
} 
 80015fa:	40d8      	lsrs	r0, r3
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	080026f1 	.word	0x080026f1
 8001608:	20000000 	.word	0x20000000

0800160c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001610:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001612:	6805      	ldr	r5, [r0, #0]
 8001614:	68c2      	ldr	r2, [r0, #12]
 8001616:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001618:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800161a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800161e:	4313      	orrs	r3, r2
 8001620:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001622:	6883      	ldr	r3, [r0, #8]
 8001624:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001626:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001628:	4303      	orrs	r3, r0
 800162a:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800162e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001632:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001634:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001638:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800163a:	4313      	orrs	r3, r2
 800163c:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800163e:	696b      	ldr	r3, [r5, #20]
 8001640:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001648:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800164a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800164e:	616b      	str	r3, [r5, #20]
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001652:	d17f      	bne.n	8001754 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001654:	429d      	cmp	r5, r3
 8001656:	f04f 0419 	mov.w	r4, #25
 800165a:	d147      	bne.n	80016ec <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800165c:	f7ff ffbe 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8001660:	fb04 f300 	mul.w	r3, r4, r0
 8001664:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001668:	f04f 0864 	mov.w	r8, #100	; 0x64
 800166c:	007f      	lsls	r7, r7, #1
 800166e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001672:	fbb3 f3f8 	udiv	r3, r3, r8
 8001676:	011f      	lsls	r7, r3, #4
 8001678:	f7ff ffb0 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 800167c:	4360      	muls	r0, r4
 800167e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fbb0 f6f3 	udiv	r6, r0, r3
 8001688:	f7ff ffa8 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 800168c:	4360      	muls	r0, r4
 800168e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fbb0 f3f3 	udiv	r3, r0, r3
 8001698:	fbb3 f3f8 	udiv	r3, r3, r8
 800169c:	fb08 6313 	mls	r3, r8, r3, r6
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	3332      	adds	r3, #50	; 0x32
 80016a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80016ae:	f7ff ff95 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 80016b2:	4360      	muls	r0, r4
 80016b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80016b8:	0052      	lsls	r2, r2, #1
 80016ba:	fbb0 faf2 	udiv	sl, r0, r2
 80016be:	f7ff ff8d 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016c2:	4360      	muls	r0, r4
 80016c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80016d2:	fb08 a313 	mls	r3, r8, r3, sl
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	3332      	adds	r3, #50	; 0x32
 80016da:	fbb3 f3f8 	udiv	r3, r3, r8
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016e4:	4433      	add	r3, r6
 80016e6:	60ab      	str	r3, [r5, #8]
 80016e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016ec:	f7ff ff5e 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 80016f0:	fb04 f300 	mul.w	r3, r4, r0
 80016f4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80016f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80016fc:	007f      	lsls	r7, r7, #1
 80016fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001702:	fbb3 f3f8 	udiv	r3, r3, r8
 8001706:	011f      	lsls	r7, r3, #4
 8001708:	f7ff ff50 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 800170c:	4360      	muls	r0, r4
 800170e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fbb0 f6f3 	udiv	r6, r0, r3
 8001718:	f7ff ff48 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 800171c:	4360      	muls	r0, r4
 800171e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fbb0 f3f3 	udiv	r3, r0, r3
 8001728:	fbb3 f3f8 	udiv	r3, r3, r8
 800172c:	fb08 6313 	mls	r3, r8, r3, r6
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	3332      	adds	r3, #50	; 0x32
 8001734:	fbb3 f3f8 	udiv	r3, r3, r8
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800173e:	f7ff ff35 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8001742:	4360      	muls	r0, r4
 8001744:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001748:	0052      	lsls	r2, r2, #1
 800174a:	fbb0 faf2 	udiv	sl, r0, r2
 800174e:	f7ff ff2d 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8001752:	e7b6      	b.n	80016c2 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001754:	429d      	cmp	r5, r3
 8001756:	f04f 0419 	mov.w	r4, #25
 800175a:	d143      	bne.n	80017e4 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800175c:	f7ff ff3e 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8001760:	fb04 f300 	mul.w	r3, r4, r0
 8001764:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001768:	f04f 0864 	mov.w	r8, #100	; 0x64
 800176c:	00b6      	lsls	r6, r6, #2
 800176e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001772:	fbb3 f3f8 	udiv	r3, r3, r8
 8001776:	011e      	lsls	r6, r3, #4
 8001778:	f7ff ff30 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 800177c:	4360      	muls	r0, r4
 800177e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	fbb0 f7f3 	udiv	r7, r0, r3
 8001788:	f7ff ff28 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 800178c:	4360      	muls	r0, r4
 800178e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	fbb0 f3f3 	udiv	r3, r0, r3
 8001798:	fbb3 f3f8 	udiv	r3, r3, r8
 800179c:	fb08 7313 	mls	r3, r8, r3, r7
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	3332      	adds	r3, #50	; 0x32
 80017a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80017a8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80017ac:	f7ff ff16 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 80017b0:	4360      	muls	r0, r4
 80017b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	fbb0 faf2 	udiv	sl, r0, r2
 80017bc:	f7ff ff0e 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017c0:	4360      	muls	r0, r4
 80017c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017cc:	fbb3 f3f8 	udiv	r3, r3, r8
 80017d0:	fb08 a313 	mls	r3, r8, r3, sl
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	3332      	adds	r3, #50	; 0x32
 80017d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	433b      	orrs	r3, r7
 80017e2:	e77f      	b.n	80016e4 <UART_SetConfig+0xd8>
 80017e4:	f7ff fee2 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 80017e8:	fb04 f300 	mul.w	r3, r4, r0
 80017ec:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80017f0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80017f4:	00b6      	lsls	r6, r6, #2
 80017f6:	fbb3 f3f6 	udiv	r3, r3, r6
 80017fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80017fe:	011e      	lsls	r6, r3, #4
 8001800:	f7ff fed4 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8001804:	4360      	muls	r0, r4
 8001806:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001810:	f7ff fecc 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8001814:	4360      	muls	r0, r4
 8001816:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001820:	fbb3 f3f8 	udiv	r3, r3, r8
 8001824:	fb08 7313 	mls	r3, r8, r3, r7
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	3332      	adds	r3, #50	; 0x32
 800182c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001830:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001834:	f7ff feba 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8001838:	4360      	muls	r0, r4
 800183a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	fbb0 faf2 	udiv	sl, r0, r2
 8001844:	f7ff feb2 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 8001848:	e7ba      	b.n	80017c0 <UART_SetConfig+0x1b4>
 800184a:	bf00      	nop
 800184c:	40013800 	.word	0x40013800

08001850 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	4604      	mov	r4, r0
 8001854:	460e      	mov	r6, r1
 8001856:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8001858:	f7fe fcb8 	bl	80001cc <HAL_GetTick>
 800185c:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800185e:	6822      	ldr	r2, [r4, #0]
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	ea36 0303 	bics.w	r3, r6, r3
 8001866:	d101      	bne.n	800186c <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8001868:	2000      	movs	r0, #0
}
 800186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 800186c:	1c6b      	adds	r3, r5, #1
 800186e:	d0f7      	beq.n	8001860 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001870:	b9c5      	cbnz	r5, 80018a4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001872:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 8001874:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	f022 0220 	bic.w	r2, r2, #32
 8001884:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 8001896:	2301      	movs	r3, #1
 8001898:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 800189c:	2300      	movs	r3, #0
 800189e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80018a4:	f7fe fc92 	bl	80001cc <HAL_GetTick>
 80018a8:	1bc0      	subs	r0, r0, r7
 80018aa:	4285      	cmp	r5, r0
 80018ac:	d2d7      	bcs.n	800185e <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 80018ae:	e7e0      	b.n	8001872 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

080018b0 <HAL_UART_Init>:
{
 80018b0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018b2:	4604      	mov	r4, r0
 80018b4:	b330      	cbz	r0, 8001904 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 80018b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80018ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018be:	b91b      	cbnz	r3, 80018c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80018c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80018c4:	f000 fa26 	bl	8001d14 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 80018c8:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 80018ca:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80018cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80018d0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80018d2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80018d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018da:	f7ff fe97 	bl	800160c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018de:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018f0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018f8:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 80018fa:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80018fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001902:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
}
 8001906:	bd10      	pop	{r4, pc}

08001908 <HAL_UART_Transmit>:
{
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	460d      	mov	r5, r1
  tmp_state = huart->State;
 800190c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8001910:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8001912:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001914:	2901      	cmp	r1, #1
{
 8001916:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001918:	d001      	beq.n	800191e <HAL_UART_Transmit+0x16>
 800191a:	2922      	cmp	r1, #34	; 0x22
 800191c:	d14d      	bne.n	80019ba <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 800191e:	2d00      	cmp	r5, #0
 8001920:	d049      	beq.n	80019b6 <HAL_UART_Transmit+0xae>
 8001922:	2a00      	cmp	r2, #0
 8001924:	d047      	beq.n	80019b6 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001926:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800192a:	2b01      	cmp	r3, #1
 800192c:	d045      	beq.n	80019ba <HAL_UART_Transmit+0xb2>
 800192e:	2301      	movs	r3, #1
 8001930:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001938:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 800193c:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800193e:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001940:	bf0c      	ite	eq
 8001942:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001944:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001946:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001948:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 800194c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800194e:	b98a      	cbnz	r2, 8001974 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001950:	4632      	mov	r2, r6
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ff7b 	bl	8001850 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800195a:	b9c0      	cbnz	r0, 800198e <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800195c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001960:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001962:	bf0c      	ite	eq
 8001964:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 8001966:	2301      	movne	r3, #1
 8001968:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800196c:	2300      	movs	r3, #0
 800196e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 8001972:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001974:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 8001976:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 800197c:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800197e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001982:	4632      	mov	r2, r6
 8001984:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001986:	d10d      	bne.n	80019a4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001988:	f7ff ff62 	bl	8001850 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800198c:	b108      	cbz	r0, 8001992 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800198e:	2003      	movs	r0, #3
 8001990:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001992:	882b      	ldrh	r3, [r5, #0]
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800199c:	6923      	ldr	r3, [r4, #16]
 800199e:	b943      	cbnz	r3, 80019b2 <HAL_UART_Transmit+0xaa>
          pData +=2;
 80019a0:	3502      	adds	r5, #2
 80019a2:	e7d3      	b.n	800194c <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80019a4:	f7ff ff54 	bl	8001850 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	782a      	ldrb	r2, [r5, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	3501      	adds	r5, #1
 80019b4:	e7ca      	b.n	800194c <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 80019b6:	2001      	movs	r0, #1
 80019b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80019ba:	2002      	movs	r0, #2
}
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080019c0 <send_to_uart>:

}

void send_to_uart(int temp,int desi)
{
    uint8_t msg3[3]={0};
 80019c0:	2300      	movs	r3, #0
{
 80019c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t msg3[3]={0};
 80019c4:	f8ad 3000 	strh.w	r3, [sp]
 80019c8:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8_t msg4[4]={0};
 80019cc:	9301      	str	r3, [sp, #4]

	if(temp<255 && temp>=200)
 80019ce:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
 80019d2:	2b36      	cmp	r3, #54	; 0x36
{
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
	if(temp<255 && temp>=200)
 80019d8:	d81d      	bhi.n	8001a16 <send_to_uart+0x56>
	{
		temp=temp-255;
 80019da:	f1a0 04ff 	sub.w	r4, r0, #255	; 0xff
	else if(temp==255&&desi==5)
	{
		temp=0;
	}

	  sprintf(msg3, "%d",temp);
 80019de:	4622      	mov	r2, r4
 80019e0:	4915      	ldr	r1, [pc, #84]	; (8001a38 <send_to_uart+0x78>)
 80019e2:	4668      	mov	r0, sp
 80019e4:	f000 fa32 	bl	8001e4c <siprintf>
	  if(temp<10&&temp>=0)
 80019e8:	2c09      	cmp	r4, #9
	  {
	  HAL_UART_Transmit(&huart2,msg3,1,100);
 80019ea:	f04f 0364 	mov.w	r3, #100	; 0x64
	  if(temp<10&&temp>=0)
 80019ee:	d81b      	bhi.n	8001a28 <send_to_uart+0x68>
	  HAL_UART_Transmit(&huart2,msg3,1,100);
 80019f0:	2201      	movs	r2, #1
	  {
		  HAL_UART_Transmit(&huart2,msg3,2,100);
	  }
	  else// (temp<=-10)
	  {
		  HAL_UART_Transmit(&huart2,msg3,3,100);
 80019f2:	4669      	mov	r1, sp
 80019f4:	4811      	ldr	r0, [pc, #68]	; (8001a3c <send_to_uart+0x7c>)
 80019f6:	f7ff ff87 	bl	8001908 <HAL_UART_Transmit>
	  }
	  sprintf(msg4, ".%d\n\r",desi);
 80019fa:	462a      	mov	r2, r5
 80019fc:	4910      	ldr	r1, [pc, #64]	; (8001a40 <send_to_uart+0x80>)
 80019fe:	a801      	add	r0, sp, #4
 8001a00:	f000 fa24 	bl	8001e4c <siprintf>
	  HAL_UART_Transmit(&huart2,msg4,4,100);
 8001a04:	2204      	movs	r2, #4
 8001a06:	2364      	movs	r3, #100	; 0x64
 8001a08:	eb0d 0102 	add.w	r1, sp, r2
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <send_to_uart+0x7c>)
 8001a0e:	f7ff ff7b 	bl	8001908 <HAL_UART_Transmit>
}
 8001a12:	b003      	add	sp, #12
 8001a14:	bd30      	pop	{r4, r5, pc}
	else if(temp==255&&desi==0)
 8001a16:	28ff      	cmp	r0, #255	; 0xff
 8001a18:	d1e1      	bne.n	80019de <send_to_uart+0x1e>
 8001a1a:	b119      	cbz	r1, 8001a24 <send_to_uart+0x64>
		temp=0;
 8001a1c:	2905      	cmp	r1, #5
 8001a1e:	bf08      	it	eq
 8001a20:	2400      	moveq	r4, #0
 8001a22:	e7dc      	b.n	80019de <send_to_uart+0x1e>
 8001a24:	460c      	mov	r4, r1
 8001a26:	e7da      	b.n	80019de <send_to_uart+0x1e>
	  else if(temp>=10)
 8001a28:	dd01      	ble.n	8001a2e <send_to_uart+0x6e>
		  HAL_UART_Transmit(&huart2,msg3,2,100);
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	e7e1      	b.n	80019f2 <send_to_uart+0x32>
	  else if(temp<0&&temp>-10)
 8001a2e:	3409      	adds	r4, #9
 8001a30:	2c08      	cmp	r4, #8
 8001a32:	d9fa      	bls.n	8001a2a <send_to_uart+0x6a>
		  HAL_UART_Transmit(&huart2,msg3,3,100);
 8001a34:	2203      	movs	r2, #3
 8001a36:	e7dc      	b.n	80019f2 <send_to_uart+0x32>
 8001a38:	080026d8 	.word	0x080026d8
 8001a3c:	200000e8 	.word	0x200000e8
 8001a40:	080026db 	.word	0x080026db

08001a44 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <SystemClock_Config+0x7c>)
{
 8001a46:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	6813      	ldr	r3, [r2, #0]
{
 8001a4a:	b092      	sub	sp, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a54:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a56:	2302      	movs	r3, #2
 8001a58:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a64:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001a66:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a68:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a6a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a70:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001a72:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a74:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a76:	f7ff f91b 	bl	8000cb0 <HAL_RCC_OscConfig>
 8001a7a:	b100      	cbz	r0, 8001a7e <SystemClock_Config+0x3a>
 8001a7c:	e7fe      	b.n	8001a7c <SystemClock_Config+0x38>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7e:	220f      	movs	r2, #15
 8001a80:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a82:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a84:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a88:	4621      	mov	r1, r4
 8001a8a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a90:	f7ff fca8 	bl	80013e4 <HAL_RCC_ClockConfig>
 8001a94:	4604      	mov	r4, r0
 8001a96:	b100      	cbz	r0, 8001a9a <SystemClock_Config+0x56>
 8001a98:	e7fe      	b.n	8001a98 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a9a:	f7ff fd81 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aa6:	f7fe fbeb 	bl	8000280 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f7fe fbfe 	bl	80002ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7fe fbae 	bl	8000218 <HAL_NVIC_SetPriority>
}
 8001abc:	b012      	add	sp, #72	; 0x48
 8001abe:	bd10      	pop	{r4, pc}
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <main>:
{
 8001ac4:	b570      	push	{r4, r5, r6, lr}
  HAL_I2C_MspInit(&hi2c1);
 8001ac6:	4c4f      	ldr	r4, [pc, #316]	; (8001c04 <main+0x140>)
{
 8001ac8:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001aca:	f7fe fb6b 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001ace:	f7ff ffb9 	bl	8001a44 <SystemClock_Config>
  HAL_I2C_MspInit(&hi2c1);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f000 f8f6 	bl	8001cc4 <HAL_I2C_MspInit>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <main+0x144>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ada:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ade:	484b      	ldr	r0, [pc, #300]	; (8001c0c <main+0x148>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae0:	f042 0204 	orr.w	r2, r2, #4
 8001ae4:	61da      	str	r2, [r3, #28]
 8001ae6:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	f002 0204 	and.w	r2, r2, #4
 8001aee:	9205      	str	r2, [sp, #20]
 8001af0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2601      	movs	r6, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af6:	f042 0220 	orr.w	r2, r2, #32
 8001afa:	61da      	str	r2, [r3, #28]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	f002 0220 	and.w	r2, r2, #32
 8001b02:	9206      	str	r2, [sp, #24]
 8001b04:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	69da      	ldr	r2, [r3, #28]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	61da      	str	r2, [r3, #28]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	f002 0201 	and.w	r2, r2, #1
 8001b14:	9207      	str	r2, [sp, #28]
 8001b16:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	f042 0202 	orr.w	r2, r2, #2
 8001b1e:	61da      	str	r2, [r3, #28]
 8001b20:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	9308      	str	r3, [sp, #32]
 8001b2a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b2c:	f7fe fca2 	bl	8000474 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b34:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b36:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <main+0x14c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b38:	a909      	add	r1, sp, #36	; 0x24
 8001b3a:	4836      	ldr	r0, [pc, #216]	; (8001c14 <main+0x150>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b3c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f7fe fbc6 	bl	80002d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b44:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b46:	a909      	add	r1, sp, #36	; 0x24
 8001b48:	4830      	ldr	r0, [pc, #192]	; (8001c0c <main+0x148>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b4a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f7fe fbbd 	bl	80002d0 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8001b56:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001b5a:	482f      	ldr	r0, [pc, #188]	; (8001c18 <main+0x154>)
  huart2.Init.BaudRate = 115200;
 8001b5c:	492f      	ldr	r1, [pc, #188]	; (8001c1c <main+0x158>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001b60:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b66:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b68:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6a:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6c:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6e:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b70:	f7ff fe9e 	bl	80018b0 <HAL_UART_Init>
 8001b74:	b100      	cbz	r0, 8001b78 <main+0xb4>
 8001b76:	e7fe      	b.n	8001b76 <main+0xb2>
  hi2c1.Init.ClockSpeed = 10000;
 8001b78:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b7c:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <main+0x15c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b7e:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.ClockSpeed = 10000;
 8001b80:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001b88:	60e0      	str	r0, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b8a:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8c:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b8e:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b90:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b92:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b94:	6123      	str	r3, [r4, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b96:	f7fe fd6f 	bl	8000678 <HAL_I2C_Init>
 8001b9a:	b100      	cbz	r0, 8001b9e <main+0xda>
 8001b9c:	e7fe      	b.n	8001b9c <main+0xd8>
    uint8_t msg[1]={start_conversion};
 8001b9e:	23ee      	movs	r3, #238	; 0xee
    HAL_I2C_Master_Transmit(&hi2c1,address_for_write,msg,1,100); 			//start conversion
 8001ba0:	2564      	movs	r5, #100	; 0x64
    uint8_t msg[1]={start_conversion};
 8001ba2:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t msg2[1]={read_last_result};
 8001ba6:	23aa      	movs	r3, #170	; 0xaa
    uint8_t received_data[2]={0};
 8001ba8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    uint8_t msg2[1]={read_last_result};
 8001bac:	f88d 3010 	strb.w	r3, [sp, #16]
    HAL_I2C_Master_Transmit(&hi2c1,address_for_write,msg,1,100); 			//start conversion
 8001bb0:	9500      	str	r5, [sp, #0]
 8001bb2:	4633      	mov	r3, r6
 8001bb4:	aa03      	add	r2, sp, #12
 8001bb6:	2190      	movs	r1, #144	; 0x90
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7fe fdeb 	bl	8000794 <HAL_I2C_Master_Transmit>
    HAL_Delay (2000);  // wait for 2 sec
 8001bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bc2:	f7fe fb09 	bl	80001d8 <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1,address_for_write,msg2,1,100); 			//read last result command
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	aa04      	add	r2, sp, #16
 8001bca:	2190      	movs	r1, #144	; 0x90
 8001bcc:	9500      	str	r5, [sp, #0]
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7fe fde0 	bl	8000794 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,address_for_read,received_data,2,100);	//read last result and decimal
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	aa09      	add	r2, sp, #36	; 0x24
 8001bd8:	2191      	movs	r1, #145	; 0x91
 8001bda:	9500      	str	r5, [sp, #0]
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7fe feaf 	bl	8000940 <HAL_I2C_Master_Receive>
	  if(received_data[1]==128)
 8001be2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
      send_to_uart(received_data[0],received_data[1]);
 8001be6:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	  if(received_data[1]==128)
 8001bea:	2b80      	cmp	r3, #128	; 0x80
		  received_data[1]=5;
 8001bec:	bf0c      	ite	eq
 8001bee:	2305      	moveq	r3, #5
		  received_data[1]=0;
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      send_to_uart(received_data[0],received_data[1]);
 8001bf6:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8001bfa:	f7ff fee1 	bl	80019c0 <send_to_uart>
	   HAL_Delay(1000);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	e7de      	b.n	8001bc2 <main+0xfe>
 8001c04:	20000094 	.word	0x20000094
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	10110000 	.word	0x10110000
 8001c14:	40020800 	.word	0x40020800
 8001c18:	200000e8 	.word	0x200000e8
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40005400 	.word	0x40005400

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c28:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
 8001c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c34:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	621a      	str	r2, [r3, #32]
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	f002 0201 	and.w	r2, r2, #1
 8001c4a:	9202      	str	r2, [sp, #8]
 8001c4c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	9303      	str	r3, [sp, #12]
 8001c5e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c60:	f7fe fac8 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f06f 000b 	mvn.w	r0, #11
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	f7fe fad4 	bl	8000218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f06f 000a 	mvn.w	r0, #10
 8001c76:	4611      	mov	r1, r2
 8001c78:	f7fe face 	bl	8000218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f06f 0009 	mvn.w	r0, #9
 8001c82:	4611      	mov	r1, r2
 8001c84:	f7fe fac8 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f06f 0004 	mvn.w	r0, #4
 8001c8e:	4611      	mov	r1, r2
 8001c90:	f7fe fac2 	bl	8000218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f06f 0003 	mvn.w	r0, #3
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	f7fe fabc 	bl	8000218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f06f 0001 	mvn.w	r0, #1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	f7fe fab6 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	f7fe fab0 	bl	8000218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	b005      	add	sp, #20
 8001cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001cc6:	6802      	ldr	r2, [r0, #0]
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_I2C_MspInit+0x44>)
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d119      	bne.n	8001d02 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	480a      	ldr	r0, [pc, #40]	; (8001d0c <HAL_I2C_MspInit+0x48>)
 8001ce4:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f7fe faf1 	bl	80002d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_I2C_MspInit+0x4c>)
 8001cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d02:	b007      	add	sp, #28
 8001d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001d16:	6802      	ldr	r2, [r0, #0]
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_UART_MspInit+0x44>)
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d118      	bne.n	8001d50 <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	480b      	ldr	r0, [pc, #44]	; (8001d5c <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d38:	230c      	movs	r3, #12
 8001d3a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f7fe fac0 	bl	80002d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d50:	b007      	add	sp, #28
 8001d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d56:	bf00      	nop
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	40020000 	.word	0x40020000

08001d60 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d62:	f7fe fa2b 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001d6a:	f7fe baac 	b.w	80002c6 <HAL_SYSTICK_IRQHandler>
	...

08001d70 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <SystemInit+0x3c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <SystemInit+0x40>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001d88:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001d8c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d94:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001d9c:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001da6:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <SystemInit+0x44>)
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	4770      	bx	lr
 8001dac:	40023800 	.word	0x40023800
 8001db0:	88ffc00c 	.word	0x88ffc00c
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001db8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dba:	e003      	b.n	8001dc4 <LoopCopyDataInit>

08001dbc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dbe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dc0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dc2:	3104      	adds	r1, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dc8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dcc:	d3f6      	bcc.n	8001dbc <CopyDataInit>
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dd0:	e002      	b.n	8001dd8 <LoopFillZerobss>

08001dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001dd4:	f842 3b04 	str.w	r3, [r2], #4

08001dd8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dda:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ddc:	d3f9      	bcc.n	8001dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dde:	f7ff ffc7 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f000 f80f 	bl	8001e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff fe6d 	bl	8001ac4 <main>
  bx lr
 8001dea:	4770      	bx	lr
  ldr r3, =_sidata
 8001dec:	08002740 	.word	0x08002740
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001df4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001df8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001dfc:	2000012c 	.word	0x2000012c

08001e00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_IRQHandler>
	...

08001e04 <__libc_init_array>:
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	2500      	movs	r5, #0
 8001e08:	4e0c      	ldr	r6, [pc, #48]	; (8001e3c <__libc_init_array+0x38>)
 8001e0a:	4c0d      	ldr	r4, [pc, #52]	; (8001e40 <__libc_init_array+0x3c>)
 8001e0c:	1ba4      	subs	r4, r4, r6
 8001e0e:	10a4      	asrs	r4, r4, #2
 8001e10:	42a5      	cmp	r5, r4
 8001e12:	d109      	bne.n	8001e28 <__libc_init_array+0x24>
 8001e14:	f000 fc54 	bl	80026c0 <_init>
 8001e18:	2500      	movs	r5, #0
 8001e1a:	4e0a      	ldr	r6, [pc, #40]	; (8001e44 <__libc_init_array+0x40>)
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	; (8001e48 <__libc_init_array+0x44>)
 8001e1e:	1ba4      	subs	r4, r4, r6
 8001e20:	10a4      	asrs	r4, r4, #2
 8001e22:	42a5      	cmp	r5, r4
 8001e24:	d105      	bne.n	8001e32 <__libc_init_array+0x2e>
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
 8001e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e2c:	4798      	blx	r3
 8001e2e:	3501      	adds	r5, #1
 8001e30:	e7ee      	b.n	8001e10 <__libc_init_array+0xc>
 8001e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e36:	4798      	blx	r3
 8001e38:	3501      	adds	r5, #1
 8001e3a:	e7f2      	b.n	8001e22 <__libc_init_array+0x1e>
 8001e3c:	08002738 	.word	0x08002738
 8001e40:	08002738 	.word	0x08002738
 8001e44:	08002738 	.word	0x08002738
 8001e48:	0800273c 	.word	0x0800273c

08001e4c <siprintf>:
 8001e4c:	b40e      	push	{r1, r2, r3}
 8001e4e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e52:	b500      	push	{lr}
 8001e54:	b09c      	sub	sp, #112	; 0x70
 8001e56:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001e5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e5e:	9104      	str	r1, [sp, #16]
 8001e60:	9107      	str	r1, [sp, #28]
 8001e62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e66:	ab1d      	add	r3, sp, #116	; 0x74
 8001e68:	9002      	str	r0, [sp, #8]
 8001e6a:	9006      	str	r0, [sp, #24]
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <siprintf+0x44>)
 8001e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e72:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001e76:	6800      	ldr	r0, [r0, #0]
 8001e78:	a902      	add	r1, sp, #8
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	f000 f866 	bl	8001f4c <_svfiprintf_r>
 8001e80:	2200      	movs	r2, #0
 8001e82:	9b02      	ldr	r3, [sp, #8]
 8001e84:	701a      	strb	r2, [r3, #0]
 8001e86:	b01c      	add	sp, #112	; 0x70
 8001e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e8c:	b003      	add	sp, #12
 8001e8e:	4770      	bx	lr
 8001e90:	20000004 	.word	0x20000004

08001e94 <__ssputs_r>:
 8001e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e98:	688e      	ldr	r6, [r1, #8]
 8001e9a:	4682      	mov	sl, r0
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4691      	mov	r9, r2
 8001ea2:	4698      	mov	r8, r3
 8001ea4:	d835      	bhi.n	8001f12 <__ssputs_r+0x7e>
 8001ea6:	898a      	ldrh	r2, [r1, #12]
 8001ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001eac:	d031      	beq.n	8001f12 <__ssputs_r+0x7e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	6825      	ldr	r5, [r4, #0]
 8001eb2:	6909      	ldr	r1, [r1, #16]
 8001eb4:	1a6f      	subs	r7, r5, r1
 8001eb6:	6965      	ldr	r5, [r4, #20]
 8001eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ebc:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ec0:	f108 0301 	add.w	r3, r8, #1
 8001ec4:	443b      	add	r3, r7
 8001ec6:	429d      	cmp	r5, r3
 8001ec8:	bf38      	it	cc
 8001eca:	461d      	movcc	r5, r3
 8001ecc:	0553      	lsls	r3, r2, #21
 8001ece:	d531      	bpl.n	8001f34 <__ssputs_r+0xa0>
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f000 fb47 	bl	8002564 <_malloc_r>
 8001ed6:	4606      	mov	r6, r0
 8001ed8:	b950      	cbnz	r0, 8001ef0 <__ssputs_r+0x5c>
 8001eda:	230c      	movs	r3, #12
 8001edc:	f8ca 3000 	str.w	r3, [sl]
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ef0:	463a      	mov	r2, r7
 8001ef2:	6921      	ldr	r1, [r4, #16]
 8001ef4:	f000 fac4 	bl	8002480 <memcpy>
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f02:	81a3      	strh	r3, [r4, #12]
 8001f04:	6126      	str	r6, [r4, #16]
 8001f06:	443e      	add	r6, r7
 8001f08:	6026      	str	r6, [r4, #0]
 8001f0a:	4646      	mov	r6, r8
 8001f0c:	6165      	str	r5, [r4, #20]
 8001f0e:	1bed      	subs	r5, r5, r7
 8001f10:	60a5      	str	r5, [r4, #8]
 8001f12:	4546      	cmp	r6, r8
 8001f14:	bf28      	it	cs
 8001f16:	4646      	movcs	r6, r8
 8001f18:	4649      	mov	r1, r9
 8001f1a:	4632      	mov	r2, r6
 8001f1c:	6820      	ldr	r0, [r4, #0]
 8001f1e:	f000 faba 	bl	8002496 <memmove>
 8001f22:	68a3      	ldr	r3, [r4, #8]
 8001f24:	2000      	movs	r0, #0
 8001f26:	1b9b      	subs	r3, r3, r6
 8001f28:	60a3      	str	r3, [r4, #8]
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	441e      	add	r6, r3
 8001f2e:	6026      	str	r6, [r4, #0]
 8001f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f34:	462a      	mov	r2, r5
 8001f36:	f000 fb73 	bl	8002620 <_realloc_r>
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d1e1      	bne.n	8001f04 <__ssputs_r+0x70>
 8001f40:	6921      	ldr	r1, [r4, #16]
 8001f42:	4650      	mov	r0, sl
 8001f44:	f000 fac2 	bl	80024cc <_free_r>
 8001f48:	e7c7      	b.n	8001eda <__ssputs_r+0x46>
	...

08001f4c <_svfiprintf_r>:
 8001f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f50:	b09d      	sub	sp, #116	; 0x74
 8001f52:	9303      	str	r3, [sp, #12]
 8001f54:	898b      	ldrh	r3, [r1, #12]
 8001f56:	4680      	mov	r8, r0
 8001f58:	061c      	lsls	r4, r3, #24
 8001f5a:	460d      	mov	r5, r1
 8001f5c:	4616      	mov	r6, r2
 8001f5e:	d50f      	bpl.n	8001f80 <_svfiprintf_r+0x34>
 8001f60:	690b      	ldr	r3, [r1, #16]
 8001f62:	b96b      	cbnz	r3, 8001f80 <_svfiprintf_r+0x34>
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	f000 fafd 	bl	8002564 <_malloc_r>
 8001f6a:	6028      	str	r0, [r5, #0]
 8001f6c:	6128      	str	r0, [r5, #16]
 8001f6e:	b928      	cbnz	r0, 8001f7c <_svfiprintf_r+0x30>
 8001f70:	230c      	movs	r3, #12
 8001f72:	f8c8 3000 	str.w	r3, [r8]
 8001f76:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7a:	e0c4      	b.n	8002106 <_svfiprintf_r+0x1ba>
 8001f7c:	2340      	movs	r3, #64	; 0x40
 8001f7e:	616b      	str	r3, [r5, #20]
 8001f80:	2300      	movs	r3, #0
 8001f82:	9309      	str	r3, [sp, #36]	; 0x24
 8001f84:	2320      	movs	r3, #32
 8001f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f8a:	2330      	movs	r3, #48	; 0x30
 8001f8c:	f04f 0b01 	mov.w	fp, #1
 8001f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f94:	4637      	mov	r7, r6
 8001f96:	463c      	mov	r4, r7
 8001f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d13c      	bne.n	800201a <_svfiprintf_r+0xce>
 8001fa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8001fa4:	d00b      	beq.n	8001fbe <_svfiprintf_r+0x72>
 8001fa6:	4653      	mov	r3, sl
 8001fa8:	4632      	mov	r2, r6
 8001faa:	4629      	mov	r1, r5
 8001fac:	4640      	mov	r0, r8
 8001fae:	f7ff ff71 	bl	8001e94 <__ssputs_r>
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	f000 80a2 	beq.w	80020fc <_svfiprintf_r+0x1b0>
 8001fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fba:	4453      	add	r3, sl
 8001fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8001fbe:	783b      	ldrb	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 809b 	beq.w	80020fc <_svfiprintf_r+0x1b0>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	9304      	str	r3, [sp, #16]
 8001fce:	9307      	str	r3, [sp, #28]
 8001fd0:	9205      	str	r2, [sp, #20]
 8001fd2:	9306      	str	r3, [sp, #24]
 8001fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8001fda:	2205      	movs	r2, #5
 8001fdc:	7821      	ldrb	r1, [r4, #0]
 8001fde:	4850      	ldr	r0, [pc, #320]	; (8002120 <_svfiprintf_r+0x1d4>)
 8001fe0:	f000 fa40 	bl	8002464 <memchr>
 8001fe4:	1c67      	adds	r7, r4, #1
 8001fe6:	9b04      	ldr	r3, [sp, #16]
 8001fe8:	b9d8      	cbnz	r0, 8002022 <_svfiprintf_r+0xd6>
 8001fea:	06d9      	lsls	r1, r3, #27
 8001fec:	bf44      	itt	mi
 8001fee:	2220      	movmi	r2, #32
 8001ff0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ff4:	071a      	lsls	r2, r3, #28
 8001ff6:	bf44      	itt	mi
 8001ff8:	222b      	movmi	r2, #43	; 0x2b
 8001ffa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ffe:	7822      	ldrb	r2, [r4, #0]
 8002000:	2a2a      	cmp	r2, #42	; 0x2a
 8002002:	d016      	beq.n	8002032 <_svfiprintf_r+0xe6>
 8002004:	2100      	movs	r1, #0
 8002006:	200a      	movs	r0, #10
 8002008:	9a07      	ldr	r2, [sp, #28]
 800200a:	4627      	mov	r7, r4
 800200c:	783b      	ldrb	r3, [r7, #0]
 800200e:	3401      	adds	r4, #1
 8002010:	3b30      	subs	r3, #48	; 0x30
 8002012:	2b09      	cmp	r3, #9
 8002014:	d950      	bls.n	80020b8 <_svfiprintf_r+0x16c>
 8002016:	b1c9      	cbz	r1, 800204c <_svfiprintf_r+0x100>
 8002018:	e011      	b.n	800203e <_svfiprintf_r+0xf2>
 800201a:	2b25      	cmp	r3, #37	; 0x25
 800201c:	d0c0      	beq.n	8001fa0 <_svfiprintf_r+0x54>
 800201e:	4627      	mov	r7, r4
 8002020:	e7b9      	b.n	8001f96 <_svfiprintf_r+0x4a>
 8002022:	4a3f      	ldr	r2, [pc, #252]	; (8002120 <_svfiprintf_r+0x1d4>)
 8002024:	463c      	mov	r4, r7
 8002026:	1a80      	subs	r0, r0, r2
 8002028:	fa0b f000 	lsl.w	r0, fp, r0
 800202c:	4318      	orrs	r0, r3
 800202e:	9004      	str	r0, [sp, #16]
 8002030:	e7d3      	b.n	8001fda <_svfiprintf_r+0x8e>
 8002032:	9a03      	ldr	r2, [sp, #12]
 8002034:	1d11      	adds	r1, r2, #4
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	9103      	str	r1, [sp, #12]
 800203a:	2a00      	cmp	r2, #0
 800203c:	db01      	blt.n	8002042 <_svfiprintf_r+0xf6>
 800203e:	9207      	str	r2, [sp, #28]
 8002040:	e004      	b.n	800204c <_svfiprintf_r+0x100>
 8002042:	4252      	negs	r2, r2
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	9207      	str	r2, [sp, #28]
 800204a:	9304      	str	r3, [sp, #16]
 800204c:	783b      	ldrb	r3, [r7, #0]
 800204e:	2b2e      	cmp	r3, #46	; 0x2e
 8002050:	d10d      	bne.n	800206e <_svfiprintf_r+0x122>
 8002052:	787b      	ldrb	r3, [r7, #1]
 8002054:	1c79      	adds	r1, r7, #1
 8002056:	2b2a      	cmp	r3, #42	; 0x2a
 8002058:	d132      	bne.n	80020c0 <_svfiprintf_r+0x174>
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	3702      	adds	r7, #2
 800205e:	1d1a      	adds	r2, r3, #4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	9203      	str	r2, [sp, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	bfb8      	it	lt
 8002068:	f04f 33ff 	movlt.w	r3, #4294967295
 800206c:	9305      	str	r3, [sp, #20]
 800206e:	4c2d      	ldr	r4, [pc, #180]	; (8002124 <_svfiprintf_r+0x1d8>)
 8002070:	2203      	movs	r2, #3
 8002072:	7839      	ldrb	r1, [r7, #0]
 8002074:	4620      	mov	r0, r4
 8002076:	f000 f9f5 	bl	8002464 <memchr>
 800207a:	b138      	cbz	r0, 800208c <_svfiprintf_r+0x140>
 800207c:	2340      	movs	r3, #64	; 0x40
 800207e:	1b00      	subs	r0, r0, r4
 8002080:	fa03 f000 	lsl.w	r0, r3, r0
 8002084:	9b04      	ldr	r3, [sp, #16]
 8002086:	3701      	adds	r7, #1
 8002088:	4303      	orrs	r3, r0
 800208a:	9304      	str	r3, [sp, #16]
 800208c:	7839      	ldrb	r1, [r7, #0]
 800208e:	2206      	movs	r2, #6
 8002090:	4825      	ldr	r0, [pc, #148]	; (8002128 <_svfiprintf_r+0x1dc>)
 8002092:	1c7e      	adds	r6, r7, #1
 8002094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002098:	f000 f9e4 	bl	8002464 <memchr>
 800209c:	2800      	cmp	r0, #0
 800209e:	d035      	beq.n	800210c <_svfiprintf_r+0x1c0>
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <_svfiprintf_r+0x1e0>)
 80020a2:	b9fb      	cbnz	r3, 80020e4 <_svfiprintf_r+0x198>
 80020a4:	9b03      	ldr	r3, [sp, #12]
 80020a6:	3307      	adds	r3, #7
 80020a8:	f023 0307 	bic.w	r3, r3, #7
 80020ac:	3308      	adds	r3, #8
 80020ae:	9303      	str	r3, [sp, #12]
 80020b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020b2:	444b      	add	r3, r9
 80020b4:	9309      	str	r3, [sp, #36]	; 0x24
 80020b6:	e76d      	b.n	8001f94 <_svfiprintf_r+0x48>
 80020b8:	fb00 3202 	mla	r2, r0, r2, r3
 80020bc:	2101      	movs	r1, #1
 80020be:	e7a4      	b.n	800200a <_svfiprintf_r+0xbe>
 80020c0:	2300      	movs	r3, #0
 80020c2:	240a      	movs	r4, #10
 80020c4:	4618      	mov	r0, r3
 80020c6:	9305      	str	r3, [sp, #20]
 80020c8:	460f      	mov	r7, r1
 80020ca:	783a      	ldrb	r2, [r7, #0]
 80020cc:	3101      	adds	r1, #1
 80020ce:	3a30      	subs	r2, #48	; 0x30
 80020d0:	2a09      	cmp	r2, #9
 80020d2:	d903      	bls.n	80020dc <_svfiprintf_r+0x190>
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ca      	beq.n	800206e <_svfiprintf_r+0x122>
 80020d8:	9005      	str	r0, [sp, #20]
 80020da:	e7c8      	b.n	800206e <_svfiprintf_r+0x122>
 80020dc:	fb04 2000 	mla	r0, r4, r0, r2
 80020e0:	2301      	movs	r3, #1
 80020e2:	e7f1      	b.n	80020c8 <_svfiprintf_r+0x17c>
 80020e4:	ab03      	add	r3, sp, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	462a      	mov	r2, r5
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <_svfiprintf_r+0x1e4>)
 80020ec:	a904      	add	r1, sp, #16
 80020ee:	4640      	mov	r0, r8
 80020f0:	f3af 8000 	nop.w
 80020f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020f8:	4681      	mov	r9, r0
 80020fa:	d1d9      	bne.n	80020b0 <_svfiprintf_r+0x164>
 80020fc:	89ab      	ldrh	r3, [r5, #12]
 80020fe:	065b      	lsls	r3, r3, #25
 8002100:	f53f af39 	bmi.w	8001f76 <_svfiprintf_r+0x2a>
 8002104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002106:	b01d      	add	sp, #116	; 0x74
 8002108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800210c:	ab03      	add	r3, sp, #12
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	462a      	mov	r2, r5
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <_svfiprintf_r+0x1e4>)
 8002114:	a904      	add	r1, sp, #16
 8002116:	4640      	mov	r0, r8
 8002118:	f000 f884 	bl	8002224 <_printf_i>
 800211c:	e7ea      	b.n	80020f4 <_svfiprintf_r+0x1a8>
 800211e:	bf00      	nop
 8002120:	08002702 	.word	0x08002702
 8002124:	08002708 	.word	0x08002708
 8002128:	0800270c 	.word	0x0800270c
 800212c:	00000000 	.word	0x00000000
 8002130:	08001e95 	.word	0x08001e95

08002134 <_printf_common>:
 8002134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002138:	4691      	mov	r9, r2
 800213a:	461f      	mov	r7, r3
 800213c:	688a      	ldr	r2, [r1, #8]
 800213e:	690b      	ldr	r3, [r1, #16]
 8002140:	4606      	mov	r6, r0
 8002142:	4293      	cmp	r3, r2
 8002144:	bfb8      	it	lt
 8002146:	4613      	movlt	r3, r2
 8002148:	f8c9 3000 	str.w	r3, [r9]
 800214c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002150:	460c      	mov	r4, r1
 8002152:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002156:	b112      	cbz	r2, 800215e <_printf_common+0x2a>
 8002158:	3301      	adds	r3, #1
 800215a:	f8c9 3000 	str.w	r3, [r9]
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	0699      	lsls	r1, r3, #26
 8002162:	bf42      	ittt	mi
 8002164:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002168:	3302      	addmi	r3, #2
 800216a:	f8c9 3000 	strmi.w	r3, [r9]
 800216e:	6825      	ldr	r5, [r4, #0]
 8002170:	f015 0506 	ands.w	r5, r5, #6
 8002174:	d107      	bne.n	8002186 <_printf_common+0x52>
 8002176:	f104 0a19 	add.w	sl, r4, #25
 800217a:	68e3      	ldr	r3, [r4, #12]
 800217c:	f8d9 2000 	ldr.w	r2, [r9]
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	429d      	cmp	r5, r3
 8002184:	db2a      	blt.n	80021dc <_printf_common+0xa8>
 8002186:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	3300      	adds	r3, #0
 800218e:	bf18      	it	ne
 8002190:	2301      	movne	r3, #1
 8002192:	0692      	lsls	r2, r2, #26
 8002194:	d42f      	bmi.n	80021f6 <_printf_common+0xc2>
 8002196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800219a:	4639      	mov	r1, r7
 800219c:	4630      	mov	r0, r6
 800219e:	47c0      	blx	r8
 80021a0:	3001      	adds	r0, #1
 80021a2:	d022      	beq.n	80021ea <_printf_common+0xb6>
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	68e5      	ldr	r5, [r4, #12]
 80021a8:	f003 0306 	and.w	r3, r3, #6
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	bf18      	it	ne
 80021b0:	2500      	movne	r5, #0
 80021b2:	f8d9 2000 	ldr.w	r2, [r9]
 80021b6:	f04f 0900 	mov.w	r9, #0
 80021ba:	bf08      	it	eq
 80021bc:	1aad      	subeq	r5, r5, r2
 80021be:	68a3      	ldr	r3, [r4, #8]
 80021c0:	6922      	ldr	r2, [r4, #16]
 80021c2:	bf08      	it	eq
 80021c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bfc4      	itt	gt
 80021cc:	1a9b      	subgt	r3, r3, r2
 80021ce:	18ed      	addgt	r5, r5, r3
 80021d0:	341a      	adds	r4, #26
 80021d2:	454d      	cmp	r5, r9
 80021d4:	d11b      	bne.n	800220e <_printf_common+0xda>
 80021d6:	2000      	movs	r0, #0
 80021d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021dc:	2301      	movs	r3, #1
 80021de:	4652      	mov	r2, sl
 80021e0:	4639      	mov	r1, r7
 80021e2:	4630      	mov	r0, r6
 80021e4:	47c0      	blx	r8
 80021e6:	3001      	adds	r0, #1
 80021e8:	d103      	bne.n	80021f2 <_printf_common+0xbe>
 80021ea:	f04f 30ff 	mov.w	r0, #4294967295
 80021ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f2:	3501      	adds	r5, #1
 80021f4:	e7c1      	b.n	800217a <_printf_common+0x46>
 80021f6:	2030      	movs	r0, #48	; 0x30
 80021f8:	18e1      	adds	r1, r4, r3
 80021fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002204:	4422      	add	r2, r4
 8002206:	3302      	adds	r3, #2
 8002208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800220c:	e7c3      	b.n	8002196 <_printf_common+0x62>
 800220e:	2301      	movs	r3, #1
 8002210:	4622      	mov	r2, r4
 8002212:	4639      	mov	r1, r7
 8002214:	4630      	mov	r0, r6
 8002216:	47c0      	blx	r8
 8002218:	3001      	adds	r0, #1
 800221a:	d0e6      	beq.n	80021ea <_printf_common+0xb6>
 800221c:	f109 0901 	add.w	r9, r9, #1
 8002220:	e7d7      	b.n	80021d2 <_printf_common+0x9e>
	...

08002224 <_printf_i>:
 8002224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002228:	4617      	mov	r7, r2
 800222a:	7e0a      	ldrb	r2, [r1, #24]
 800222c:	b085      	sub	sp, #20
 800222e:	2a6e      	cmp	r2, #110	; 0x6e
 8002230:	4698      	mov	r8, r3
 8002232:	4606      	mov	r6, r0
 8002234:	460c      	mov	r4, r1
 8002236:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002238:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800223c:	f000 80bc 	beq.w	80023b8 <_printf_i+0x194>
 8002240:	d81a      	bhi.n	8002278 <_printf_i+0x54>
 8002242:	2a63      	cmp	r2, #99	; 0x63
 8002244:	d02e      	beq.n	80022a4 <_printf_i+0x80>
 8002246:	d80a      	bhi.n	800225e <_printf_i+0x3a>
 8002248:	2a00      	cmp	r2, #0
 800224a:	f000 80c8 	beq.w	80023de <_printf_i+0x1ba>
 800224e:	2a58      	cmp	r2, #88	; 0x58
 8002250:	f000 808a 	beq.w	8002368 <_printf_i+0x144>
 8002254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002258:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800225c:	e02a      	b.n	80022b4 <_printf_i+0x90>
 800225e:	2a64      	cmp	r2, #100	; 0x64
 8002260:	d001      	beq.n	8002266 <_printf_i+0x42>
 8002262:	2a69      	cmp	r2, #105	; 0x69
 8002264:	d1f6      	bne.n	8002254 <_printf_i+0x30>
 8002266:	6821      	ldr	r1, [r4, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800226e:	d023      	beq.n	80022b8 <_printf_i+0x94>
 8002270:	1d11      	adds	r1, r2, #4
 8002272:	6019      	str	r1, [r3, #0]
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	e027      	b.n	80022c8 <_printf_i+0xa4>
 8002278:	2a73      	cmp	r2, #115	; 0x73
 800227a:	f000 80b4 	beq.w	80023e6 <_printf_i+0x1c2>
 800227e:	d808      	bhi.n	8002292 <_printf_i+0x6e>
 8002280:	2a6f      	cmp	r2, #111	; 0x6f
 8002282:	d02a      	beq.n	80022da <_printf_i+0xb6>
 8002284:	2a70      	cmp	r2, #112	; 0x70
 8002286:	d1e5      	bne.n	8002254 <_printf_i+0x30>
 8002288:	680a      	ldr	r2, [r1, #0]
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	600a      	str	r2, [r1, #0]
 8002290:	e003      	b.n	800229a <_printf_i+0x76>
 8002292:	2a75      	cmp	r2, #117	; 0x75
 8002294:	d021      	beq.n	80022da <_printf_i+0xb6>
 8002296:	2a78      	cmp	r2, #120	; 0x78
 8002298:	d1dc      	bne.n	8002254 <_printf_i+0x30>
 800229a:	2278      	movs	r2, #120	; 0x78
 800229c:	496f      	ldr	r1, [pc, #444]	; (800245c <_printf_i+0x238>)
 800229e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80022a2:	e064      	b.n	800236e <_printf_i+0x14a>
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80022aa:	1d11      	adds	r1, r2, #4
 80022ac:	6019      	str	r1, [r3, #0]
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0a3      	b.n	8002400 <_printf_i+0x1dc>
 80022b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022bc:	f102 0104 	add.w	r1, r2, #4
 80022c0:	6019      	str	r1, [r3, #0]
 80022c2:	d0d7      	beq.n	8002274 <_printf_i+0x50>
 80022c4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da03      	bge.n	80022d4 <_printf_i+0xb0>
 80022cc:	222d      	movs	r2, #45	; 0x2d
 80022ce:	425b      	negs	r3, r3
 80022d0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022d4:	4962      	ldr	r1, [pc, #392]	; (8002460 <_printf_i+0x23c>)
 80022d6:	220a      	movs	r2, #10
 80022d8:	e017      	b.n	800230a <_printf_i+0xe6>
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	6819      	ldr	r1, [r3, #0]
 80022de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022e2:	d003      	beq.n	80022ec <_printf_i+0xc8>
 80022e4:	1d08      	adds	r0, r1, #4
 80022e6:	6018      	str	r0, [r3, #0]
 80022e8:	680b      	ldr	r3, [r1, #0]
 80022ea:	e006      	b.n	80022fa <_printf_i+0xd6>
 80022ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022f0:	f101 0004 	add.w	r0, r1, #4
 80022f4:	6018      	str	r0, [r3, #0]
 80022f6:	d0f7      	beq.n	80022e8 <_printf_i+0xc4>
 80022f8:	880b      	ldrh	r3, [r1, #0]
 80022fa:	2a6f      	cmp	r2, #111	; 0x6f
 80022fc:	bf14      	ite	ne
 80022fe:	220a      	movne	r2, #10
 8002300:	2208      	moveq	r2, #8
 8002302:	4957      	ldr	r1, [pc, #348]	; (8002460 <_printf_i+0x23c>)
 8002304:	2000      	movs	r0, #0
 8002306:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800230a:	6865      	ldr	r5, [r4, #4]
 800230c:	2d00      	cmp	r5, #0
 800230e:	60a5      	str	r5, [r4, #8]
 8002310:	f2c0 809c 	blt.w	800244c <_printf_i+0x228>
 8002314:	6820      	ldr	r0, [r4, #0]
 8002316:	f020 0004 	bic.w	r0, r0, #4
 800231a:	6020      	str	r0, [r4, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d13f      	bne.n	80023a0 <_printf_i+0x17c>
 8002320:	2d00      	cmp	r5, #0
 8002322:	f040 8095 	bne.w	8002450 <_printf_i+0x22c>
 8002326:	4675      	mov	r5, lr
 8002328:	2a08      	cmp	r2, #8
 800232a:	d10b      	bne.n	8002344 <_printf_i+0x120>
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	07da      	lsls	r2, r3, #31
 8002330:	d508      	bpl.n	8002344 <_printf_i+0x120>
 8002332:	6923      	ldr	r3, [r4, #16]
 8002334:	6862      	ldr	r2, [r4, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	bfde      	ittt	le
 800233a:	2330      	movle	r3, #48	; 0x30
 800233c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002340:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002344:	ebae 0305 	sub.w	r3, lr, r5
 8002348:	6123      	str	r3, [r4, #16]
 800234a:	f8cd 8000 	str.w	r8, [sp]
 800234e:	463b      	mov	r3, r7
 8002350:	aa03      	add	r2, sp, #12
 8002352:	4621      	mov	r1, r4
 8002354:	4630      	mov	r0, r6
 8002356:	f7ff feed 	bl	8002134 <_printf_common>
 800235a:	3001      	adds	r0, #1
 800235c:	d155      	bne.n	800240a <_printf_i+0x1e6>
 800235e:	f04f 30ff 	mov.w	r0, #4294967295
 8002362:	b005      	add	sp, #20
 8002364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002368:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800236c:	493c      	ldr	r1, [pc, #240]	; (8002460 <_printf_i+0x23c>)
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002376:	f100 0504 	add.w	r5, r0, #4
 800237a:	601d      	str	r5, [r3, #0]
 800237c:	d001      	beq.n	8002382 <_printf_i+0x15e>
 800237e:	6803      	ldr	r3, [r0, #0]
 8002380:	e002      	b.n	8002388 <_printf_i+0x164>
 8002382:	0655      	lsls	r5, r2, #25
 8002384:	d5fb      	bpl.n	800237e <_printf_i+0x15a>
 8002386:	8803      	ldrh	r3, [r0, #0]
 8002388:	07d0      	lsls	r0, r2, #31
 800238a:	bf44      	itt	mi
 800238c:	f042 0220 	orrmi.w	r2, r2, #32
 8002390:	6022      	strmi	r2, [r4, #0]
 8002392:	b91b      	cbnz	r3, 800239c <_printf_i+0x178>
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	f022 0220 	bic.w	r2, r2, #32
 800239a:	6022      	str	r2, [r4, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	e7b1      	b.n	8002304 <_printf_i+0xe0>
 80023a0:	4675      	mov	r5, lr
 80023a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80023a6:	fb02 3310 	mls	r3, r2, r0, r3
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023b0:	4603      	mov	r3, r0
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1f5      	bne.n	80023a2 <_printf_i+0x17e>
 80023b6:	e7b7      	b.n	8002328 <_printf_i+0x104>
 80023b8:	6808      	ldr	r0, [r1, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023c0:	6949      	ldr	r1, [r1, #20]
 80023c2:	d004      	beq.n	80023ce <_printf_i+0x1aa>
 80023c4:	1d10      	adds	r0, r2, #4
 80023c6:	6018      	str	r0, [r3, #0]
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	6019      	str	r1, [r3, #0]
 80023cc:	e007      	b.n	80023de <_printf_i+0x1ba>
 80023ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023d2:	f102 0004 	add.w	r0, r2, #4
 80023d6:	6018      	str	r0, [r3, #0]
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	d0f6      	beq.n	80023ca <_printf_i+0x1a6>
 80023dc:	8019      	strh	r1, [r3, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	4675      	mov	r5, lr
 80023e2:	6123      	str	r3, [r4, #16]
 80023e4:	e7b1      	b.n	800234a <_printf_i+0x126>
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	1d11      	adds	r1, r2, #4
 80023ea:	6019      	str	r1, [r3, #0]
 80023ec:	6815      	ldr	r5, [r2, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	6862      	ldr	r2, [r4, #4]
 80023f2:	4628      	mov	r0, r5
 80023f4:	f000 f836 	bl	8002464 <memchr>
 80023f8:	b108      	cbz	r0, 80023fe <_printf_i+0x1da>
 80023fa:	1b40      	subs	r0, r0, r5
 80023fc:	6060      	str	r0, [r4, #4]
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	6123      	str	r3, [r4, #16]
 8002402:	2300      	movs	r3, #0
 8002404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002408:	e79f      	b.n	800234a <_printf_i+0x126>
 800240a:	6923      	ldr	r3, [r4, #16]
 800240c:	462a      	mov	r2, r5
 800240e:	4639      	mov	r1, r7
 8002410:	4630      	mov	r0, r6
 8002412:	47c0      	blx	r8
 8002414:	3001      	adds	r0, #1
 8002416:	d0a2      	beq.n	800235e <_printf_i+0x13a>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	079b      	lsls	r3, r3, #30
 800241c:	d507      	bpl.n	800242e <_printf_i+0x20a>
 800241e:	2500      	movs	r5, #0
 8002420:	f104 0919 	add.w	r9, r4, #25
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	9a03      	ldr	r2, [sp, #12]
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	429d      	cmp	r5, r3
 800242c:	db05      	blt.n	800243a <_printf_i+0x216>
 800242e:	68e0      	ldr	r0, [r4, #12]
 8002430:	9b03      	ldr	r3, [sp, #12]
 8002432:	4298      	cmp	r0, r3
 8002434:	bfb8      	it	lt
 8002436:	4618      	movlt	r0, r3
 8002438:	e793      	b.n	8002362 <_printf_i+0x13e>
 800243a:	2301      	movs	r3, #1
 800243c:	464a      	mov	r2, r9
 800243e:	4639      	mov	r1, r7
 8002440:	4630      	mov	r0, r6
 8002442:	47c0      	blx	r8
 8002444:	3001      	adds	r0, #1
 8002446:	d08a      	beq.n	800235e <_printf_i+0x13a>
 8002448:	3501      	adds	r5, #1
 800244a:	e7eb      	b.n	8002424 <_printf_i+0x200>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1a7      	bne.n	80023a0 <_printf_i+0x17c>
 8002450:	780b      	ldrb	r3, [r1, #0]
 8002452:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800245a:	e765      	b.n	8002328 <_printf_i+0x104>
 800245c:	08002724 	.word	0x08002724
 8002460:	08002713 	.word	0x08002713

08002464 <memchr>:
 8002464:	b510      	push	{r4, lr}
 8002466:	b2c9      	uxtb	r1, r1
 8002468:	4402      	add	r2, r0
 800246a:	4290      	cmp	r0, r2
 800246c:	4603      	mov	r3, r0
 800246e:	d101      	bne.n	8002474 <memchr+0x10>
 8002470:	2000      	movs	r0, #0
 8002472:	bd10      	pop	{r4, pc}
 8002474:	781c      	ldrb	r4, [r3, #0]
 8002476:	3001      	adds	r0, #1
 8002478:	428c      	cmp	r4, r1
 800247a:	d1f6      	bne.n	800246a <memchr+0x6>
 800247c:	4618      	mov	r0, r3
 800247e:	bd10      	pop	{r4, pc}

08002480 <memcpy>:
 8002480:	b510      	push	{r4, lr}
 8002482:	1e43      	subs	r3, r0, #1
 8002484:	440a      	add	r2, r1
 8002486:	4291      	cmp	r1, r2
 8002488:	d100      	bne.n	800248c <memcpy+0xc>
 800248a:	bd10      	pop	{r4, pc}
 800248c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002494:	e7f7      	b.n	8002486 <memcpy+0x6>

08002496 <memmove>:
 8002496:	4288      	cmp	r0, r1
 8002498:	b510      	push	{r4, lr}
 800249a:	eb01 0302 	add.w	r3, r1, r2
 800249e:	d803      	bhi.n	80024a8 <memmove+0x12>
 80024a0:	1e42      	subs	r2, r0, #1
 80024a2:	4299      	cmp	r1, r3
 80024a4:	d10c      	bne.n	80024c0 <memmove+0x2a>
 80024a6:	bd10      	pop	{r4, pc}
 80024a8:	4298      	cmp	r0, r3
 80024aa:	d2f9      	bcs.n	80024a0 <memmove+0xa>
 80024ac:	1881      	adds	r1, r0, r2
 80024ae:	1ad2      	subs	r2, r2, r3
 80024b0:	42d3      	cmn	r3, r2
 80024b2:	d100      	bne.n	80024b6 <memmove+0x20>
 80024b4:	bd10      	pop	{r4, pc}
 80024b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80024be:	e7f7      	b.n	80024b0 <memmove+0x1a>
 80024c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80024c8:	e7eb      	b.n	80024a2 <memmove+0xc>
	...

080024cc <_free_r>:
 80024cc:	b538      	push	{r3, r4, r5, lr}
 80024ce:	4605      	mov	r5, r0
 80024d0:	2900      	cmp	r1, #0
 80024d2:	d043      	beq.n	800255c <_free_r+0x90>
 80024d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d8:	1f0c      	subs	r4, r1, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bfb8      	it	lt
 80024de:	18e4      	addlt	r4, r4, r3
 80024e0:	f000 f8d4 	bl	800268c <__malloc_lock>
 80024e4:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <_free_r+0x94>)
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	4610      	mov	r0, r2
 80024ea:	b933      	cbnz	r3, 80024fa <_free_r+0x2e>
 80024ec:	6063      	str	r3, [r4, #4]
 80024ee:	6014      	str	r4, [r2, #0]
 80024f0:	4628      	mov	r0, r5
 80024f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024f6:	f000 b8ca 	b.w	800268e <__malloc_unlock>
 80024fa:	42a3      	cmp	r3, r4
 80024fc:	d90b      	bls.n	8002516 <_free_r+0x4a>
 80024fe:	6821      	ldr	r1, [r4, #0]
 8002500:	1862      	adds	r2, r4, r1
 8002502:	4293      	cmp	r3, r2
 8002504:	bf01      	itttt	eq
 8002506:	681a      	ldreq	r2, [r3, #0]
 8002508:	685b      	ldreq	r3, [r3, #4]
 800250a:	1852      	addeq	r2, r2, r1
 800250c:	6022      	streq	r2, [r4, #0]
 800250e:	6063      	str	r3, [r4, #4]
 8002510:	6004      	str	r4, [r0, #0]
 8002512:	e7ed      	b.n	80024f0 <_free_r+0x24>
 8002514:	4613      	mov	r3, r2
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	b10a      	cbz	r2, 800251e <_free_r+0x52>
 800251a:	42a2      	cmp	r2, r4
 800251c:	d9fa      	bls.n	8002514 <_free_r+0x48>
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	1858      	adds	r0, r3, r1
 8002522:	42a0      	cmp	r0, r4
 8002524:	d10b      	bne.n	800253e <_free_r+0x72>
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	4401      	add	r1, r0
 800252a:	1858      	adds	r0, r3, r1
 800252c:	4282      	cmp	r2, r0
 800252e:	6019      	str	r1, [r3, #0]
 8002530:	d1de      	bne.n	80024f0 <_free_r+0x24>
 8002532:	6810      	ldr	r0, [r2, #0]
 8002534:	6852      	ldr	r2, [r2, #4]
 8002536:	4401      	add	r1, r0
 8002538:	6019      	str	r1, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	e7d8      	b.n	80024f0 <_free_r+0x24>
 800253e:	d902      	bls.n	8002546 <_free_r+0x7a>
 8002540:	230c      	movs	r3, #12
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	e7d4      	b.n	80024f0 <_free_r+0x24>
 8002546:	6820      	ldr	r0, [r4, #0]
 8002548:	1821      	adds	r1, r4, r0
 800254a:	428a      	cmp	r2, r1
 800254c:	bf01      	itttt	eq
 800254e:	6811      	ldreq	r1, [r2, #0]
 8002550:	6852      	ldreq	r2, [r2, #4]
 8002552:	1809      	addeq	r1, r1, r0
 8002554:	6021      	streq	r1, [r4, #0]
 8002556:	6062      	str	r2, [r4, #4]
 8002558:	605c      	str	r4, [r3, #4]
 800255a:	e7c9      	b.n	80024f0 <_free_r+0x24>
 800255c:	bd38      	pop	{r3, r4, r5, pc}
 800255e:	bf00      	nop
 8002560:	20000084 	.word	0x20000084

08002564 <_malloc_r>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	1ccd      	adds	r5, r1, #3
 8002568:	f025 0503 	bic.w	r5, r5, #3
 800256c:	3508      	adds	r5, #8
 800256e:	2d0c      	cmp	r5, #12
 8002570:	bf38      	it	cc
 8002572:	250c      	movcc	r5, #12
 8002574:	2d00      	cmp	r5, #0
 8002576:	4606      	mov	r6, r0
 8002578:	db01      	blt.n	800257e <_malloc_r+0x1a>
 800257a:	42a9      	cmp	r1, r5
 800257c:	d903      	bls.n	8002586 <_malloc_r+0x22>
 800257e:	230c      	movs	r3, #12
 8002580:	6033      	str	r3, [r6, #0]
 8002582:	2000      	movs	r0, #0
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	f000 f881 	bl	800268c <__malloc_lock>
 800258a:	4a23      	ldr	r2, [pc, #140]	; (8002618 <_malloc_r+0xb4>)
 800258c:	6814      	ldr	r4, [r2, #0]
 800258e:	4621      	mov	r1, r4
 8002590:	b991      	cbnz	r1, 80025b8 <_malloc_r+0x54>
 8002592:	4c22      	ldr	r4, [pc, #136]	; (800261c <_malloc_r+0xb8>)
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	b91b      	cbnz	r3, 80025a0 <_malloc_r+0x3c>
 8002598:	4630      	mov	r0, r6
 800259a:	f000 f867 	bl	800266c <_sbrk_r>
 800259e:	6020      	str	r0, [r4, #0]
 80025a0:	4629      	mov	r1, r5
 80025a2:	4630      	mov	r0, r6
 80025a4:	f000 f862 	bl	800266c <_sbrk_r>
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d126      	bne.n	80025fa <_malloc_r+0x96>
 80025ac:	230c      	movs	r3, #12
 80025ae:	4630      	mov	r0, r6
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	f000 f86c 	bl	800268e <__malloc_unlock>
 80025b6:	e7e4      	b.n	8002582 <_malloc_r+0x1e>
 80025b8:	680b      	ldr	r3, [r1, #0]
 80025ba:	1b5b      	subs	r3, r3, r5
 80025bc:	d41a      	bmi.n	80025f4 <_malloc_r+0x90>
 80025be:	2b0b      	cmp	r3, #11
 80025c0:	d90f      	bls.n	80025e2 <_malloc_r+0x7e>
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	18cc      	adds	r4, r1, r3
 80025c6:	50cd      	str	r5, [r1, r3]
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 f860 	bl	800268e <__malloc_unlock>
 80025ce:	f104 000b 	add.w	r0, r4, #11
 80025d2:	1d23      	adds	r3, r4, #4
 80025d4:	f020 0007 	bic.w	r0, r0, #7
 80025d8:	1ac3      	subs	r3, r0, r3
 80025da:	d01b      	beq.n	8002614 <_malloc_r+0xb0>
 80025dc:	425a      	negs	r2, r3
 80025de:	50e2      	str	r2, [r4, r3]
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	428c      	cmp	r4, r1
 80025e4:	bf0b      	itete	eq
 80025e6:	6863      	ldreq	r3, [r4, #4]
 80025e8:	684b      	ldrne	r3, [r1, #4]
 80025ea:	6013      	streq	r3, [r2, #0]
 80025ec:	6063      	strne	r3, [r4, #4]
 80025ee:	bf18      	it	ne
 80025f0:	460c      	movne	r4, r1
 80025f2:	e7e9      	b.n	80025c8 <_malloc_r+0x64>
 80025f4:	460c      	mov	r4, r1
 80025f6:	6849      	ldr	r1, [r1, #4]
 80025f8:	e7ca      	b.n	8002590 <_malloc_r+0x2c>
 80025fa:	1cc4      	adds	r4, r0, #3
 80025fc:	f024 0403 	bic.w	r4, r4, #3
 8002600:	42a0      	cmp	r0, r4
 8002602:	d005      	beq.n	8002610 <_malloc_r+0xac>
 8002604:	1a21      	subs	r1, r4, r0
 8002606:	4630      	mov	r0, r6
 8002608:	f000 f830 	bl	800266c <_sbrk_r>
 800260c:	3001      	adds	r0, #1
 800260e:	d0cd      	beq.n	80025ac <_malloc_r+0x48>
 8002610:	6025      	str	r5, [r4, #0]
 8002612:	e7d9      	b.n	80025c8 <_malloc_r+0x64>
 8002614:	bd70      	pop	{r4, r5, r6, pc}
 8002616:	bf00      	nop
 8002618:	20000084 	.word	0x20000084
 800261c:	20000088 	.word	0x20000088

08002620 <_realloc_r>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	4607      	mov	r7, r0
 8002624:	4614      	mov	r4, r2
 8002626:	460e      	mov	r6, r1
 8002628:	b921      	cbnz	r1, 8002634 <_realloc_r+0x14>
 800262a:	4611      	mov	r1, r2
 800262c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002630:	f7ff bf98 	b.w	8002564 <_malloc_r>
 8002634:	b922      	cbnz	r2, 8002640 <_realloc_r+0x20>
 8002636:	f7ff ff49 	bl	80024cc <_free_r>
 800263a:	4625      	mov	r5, r4
 800263c:	4628      	mov	r0, r5
 800263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002640:	f000 f826 	bl	8002690 <_malloc_usable_size_r>
 8002644:	4284      	cmp	r4, r0
 8002646:	d90f      	bls.n	8002668 <_realloc_r+0x48>
 8002648:	4621      	mov	r1, r4
 800264a:	4638      	mov	r0, r7
 800264c:	f7ff ff8a 	bl	8002564 <_malloc_r>
 8002650:	4605      	mov	r5, r0
 8002652:	2800      	cmp	r0, #0
 8002654:	d0f2      	beq.n	800263c <_realloc_r+0x1c>
 8002656:	4631      	mov	r1, r6
 8002658:	4622      	mov	r2, r4
 800265a:	f7ff ff11 	bl	8002480 <memcpy>
 800265e:	4631      	mov	r1, r6
 8002660:	4638      	mov	r0, r7
 8002662:	f7ff ff33 	bl	80024cc <_free_r>
 8002666:	e7e9      	b.n	800263c <_realloc_r+0x1c>
 8002668:	4635      	mov	r5, r6
 800266a:	e7e7      	b.n	800263c <_realloc_r+0x1c>

0800266c <_sbrk_r>:
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	2300      	movs	r3, #0
 8002670:	4c05      	ldr	r4, [pc, #20]	; (8002688 <_sbrk_r+0x1c>)
 8002672:	4605      	mov	r5, r0
 8002674:	4608      	mov	r0, r1
 8002676:	6023      	str	r3, [r4, #0]
 8002678:	f000 f814 	bl	80026a4 <_sbrk>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d102      	bne.n	8002686 <_sbrk_r+0x1a>
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	b103      	cbz	r3, 8002686 <_sbrk_r+0x1a>
 8002684:	602b      	str	r3, [r5, #0]
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	20000128 	.word	0x20000128

0800268c <__malloc_lock>:
 800268c:	4770      	bx	lr

0800268e <__malloc_unlock>:
 800268e:	4770      	bx	lr

08002690 <_malloc_usable_size_r>:
 8002690:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002694:	2800      	cmp	r0, #0
 8002696:	f1a0 0004 	sub.w	r0, r0, #4
 800269a:	bfbc      	itt	lt
 800269c:	580b      	ldrlt	r3, [r1, r0]
 800269e:	18c0      	addlt	r0, r0, r3
 80026a0:	4770      	bx	lr
	...

080026a4 <_sbrk>:
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <_sbrk+0x14>)
 80026a6:	4602      	mov	r2, r0
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	b909      	cbnz	r1, 80026b0 <_sbrk+0xc>
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <_sbrk+0x18>)
 80026ae:	6019      	str	r1, [r3, #0]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	4402      	add	r2, r0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4770      	bx	lr
 80026b8:	2000008c 	.word	0x2000008c
 80026bc:	2000012c 	.word	0x2000012c

080026c0 <_init>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr

080026cc <_fini>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	bf00      	nop
 80026d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d2:	bc08      	pop	{r3}
 80026d4:	469e      	mov	lr, r3
 80026d6:	4770      	bx	lr
